tf.Assert(condition,data,summarize=None,name=None)
tf.CriticalSection(name=None,shared_name=None,critical_section_def=None,import_scope=None)
tf.DType()
tf.DeviceSpec(job=None,replica=None,task=None,device_type=None,device_index=None)
tf.GradientTape(persistent=False,watch_accessed_variables=True)
tf.Graph()
tf.IndexedSlices(values,indices,dense_shape=None)
tf.IndexedSlicesSpec(shape=None,dtype=tf.dtypes.float32,indices_dtype=tf.dtypes.int64,dense_shape_dtype=None,indices_shape=None)
tf.Module(name=None)
tf.Operation(node_def,g,inputs=None,output_types=None,control_inputs=None,input_types=None,original_op=None,op_def=None)
tf.OptionalSpec(element_spec)
tf.RaggedTensorSpec(shape=None,dtype=tf.dtypes.float32,ragged_rank=None,row_splits_dtype=tf.dtypes.int64,flat_values_spec=None)
tf.RegisterGradient(op_type)
tf.SparseTensor(indices,values,dense_shape)
tf.SparseTensorSpec(shape=None,dtype=tf.dtypes.float32)
tf.Tensor(op,value_index,dtype)
tf.TensorArray(dtype,size=None,dynamic_size=None,clear_after_read=None,tensor_array_name=None,handle=None,flow=None,infer_shape=True,element_shape=None,colocate_with_first_write_call=True,name=None)
tf.TensorArraySpec(element_shape=None,dtype=tf.dtypes.float32,dynamic_size=False,infer_shape=True)
tf.TensorShape(dims)
tf.TensorSpec(shape,dtype=tf.dtypes.float32,name=None)
tf.Variable(initial_value=None,trainable=None,validate_shape=True,caching_device=None,name=None,variable_def=None,dtype=None,import_scope=None,constraint=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.compat.v1.VariableAggregation.NONE,shape=None)
tf.Variable.SaveSliceInfo(full_name=None,full_shape=None,var_offset=None,var_shape=None,save_slice_info_def=None,import_scope=None)
tf.abs(x,name=None)
tf.acos(x,name=None)
tf.acosh(x,name=None)
tf.add(x,y,name=None)
tf.add_n(inputs,name=None)
tf.argmax(input,axis=None,output_type=tf.dtypes.int64,name=None)
tf.argmin(input,axis=None,output_type=tf.dtypes.int64,name=None)
tf.argsort(values,axis=-1,direction='ASCENDING',stable=False,name=None)
tf.as_dtype(type_value)
tf.as_string(input,precision=-1,scientific=False,shortest=False,width=-1,fill='',name=None)
tf.asin(x,name=None)
tf.asinh(x,name=None)
tf.assert_equal(x,y,message=None,summarize=None,name=None)
tf.assert_greater(x,y,message=None,summarize=None,name=None)
tf.assert_less(x,y,message=None,summarize=None,name=None)
tf.assert_rank(x,rank,message=None,name=None)
tf.atan(x,name=None)
tf.atan2(y,x,name=None)
tf.atanh(x,name=None)
tf.audio.decode_wav(contents,desired_channels=-1,desired_samples=-1,name=None)
tf.audio.encode_wav(audio,sample_rate,name=None)
tf.autodiff.ForwardAccumulator(primals,tangents)
tf.autodiff.GradientTape(persistent=False,watch_accessed_variables=True)
tf.autograph.experimental.do_not_convert(func=None)
tf.autograph.experimental.set_loop_options(parallel_iterations=UNSPECIFIED,swap_memory=UNSPECIFIED,maximum_iterations=UNSPECIFIED,shape_invariants=UNSPECIFIED)
tf.autograph.set_verbosity(level,alsologtostdout=False)
tf.autograph.to_code(entity,recursive=True,experimental_optional_features=None)
tf.autograph.to_graph(entity,recursive=True,experimental_optional_features=None)
tf.autograph.trace(*args)
tf.batch_to_space(input,block_shape,crops,name=None)
tf.bitcast(input,type,name=None)
tf.bitwise.bitwise_and(x,y,name=None)
tf.bitwise.bitwise_or(x,y,name=None)
tf.bitwise.bitwise_xor(x,y,name=None)
tf.bitwise.invert(x,name=None)
tf.bitwise.left_shift(x,y,name=None)
tf.bitwise.right_shift(x,y,name=None)
tf.boolean_mask(tensor,mask,axis=None,name='boolean_mask')
tf.broadcast_dynamic_shape(shape_x,shape_y)
tf.broadcast_static_shape(shape_x,shape_y)
tf.broadcast_to(input,shape,name=None)
tf.case(pred_fn_pairs,default=None,exclusive=False,strict=False,name='case')
tf.cast(x,dtype,name=None)
tf.clip_by_global_norm(t_list,clip_norm,use_norm=None,name=None)
tf.clip_by_norm(t,clip_norm,axes=None,name=None)
tf.clip_by_value(t,clip_value_min,clip_value_max,name=None)
tf.compat.as_bytes(bytes_or_text,encoding='utf-8')
tf.compat.as_str(bytes_or_text,encoding='utf-8')
tf.compat.as_str_any(value)
tf.compat.as_text(bytes_or_text,encoding='utf-8')
tf.compat.dimension_at_index(shape,index)
tf.compat.dimension_value(dimension)
tf.compat.forward_compatible(year,month,day)
tf.compat.path_to_str(path)
tf.compat.v1.Assert(condition,data,summarize=None,name=None)
tf.compat.v1.ConditionalAccumulator(dtype,shape=None,shared_name=None,name='conditional_accumulator',reduction_type='MEAN')
tf.compat.v1.ConditionalAccumulatorBase(dtype,shape,accumulator_ref)
tf.compat.v1.CriticalSection(name=None,shared_name=None,critical_section_def=None,import_scope=None)
tf.compat.v1.DType()
tf.compat.v1.DeviceSpec(job=None,replica=None,task=None,device_type=None,device_index=None)
tf.compat.v1.Dimension(value)
tf.compat.v1.FIFOQueue(capacity,dtypes,shapes=None,names=None,shared_name=None,name='fifo_queue')
tf.compat.v1.FixedLenFeature(shape,dtype,default_value=None)
tf.compat.v1.FixedLenSequenceFeature(shape,dtype,allow_missing=False,default_value=None)
tf.compat.v1.FixedLengthRecordReader(record_bytes,header_bytes=None,footer_bytes=None,hop_bytes=None,name=None,encoding=None)
tf.compat.v1.GradientTape(persistent=False,watch_accessed_variables=True)
tf.compat.v1.Graph()
tf.compat.v1.IdentityReader(name=None)
tf.compat.v1.IndexedSlices(values,indices,dense_shape=None)
tf.compat.v1.IndexedSlicesSpec(shape=None,dtype=tf.dtypes.float32,indices_dtype=tf.dtypes.int64,dense_shape_dtype=None,indices_shape=None)
tf.compat.v1.InteractiveSession(target='',graph=None,config=None)
tf.compat.v1.LMDBReader(name=None,options=None)
tf.compat.v1.Module(name=None)
tf.compat.v1.NoGradient(op_type)
tf.compat.v1.NotDifferentiable(op_type)
tf.compat.v1.OpError(node_def,op,message,error_code,*args)
tf.compat.v1.Operation(node_def,g,inputs=None,output_types=None,control_inputs=None,input_types=None,original_op=None,op_def=None)
tf.compat.v1.OptionalSpec(element_spec)
tf.compat.v1.PaddingFIFOQueue(capacity,dtypes,shapes,names=None,shared_name=None,name='padding_fifo_queue')
tf.compat.v1.Print(input_,data,message=None,first_n=None,summarize=None,name=None)
tf.compat.v1.PriorityQueue(capacity,types,shapes=None,names=None,shared_name=None,name='priority_queue')
tf.compat.v1.QueueBase(dtypes,shapes,names,queue_ref)
tf.compat.v1.RaggedTensorSpec(shape=None,dtype=tf.dtypes.float32,ragged_rank=None,row_splits_dtype=tf.dtypes.int64,flat_values_spec=None)
tf.compat.v1.RandomShuffleQueue(capacity,min_after_dequeue,dtypes,shapes=None,names=None,seed=None,shared_name=None,name='random_shuffle_queue')
tf.compat.v1.ReaderBase(reader_ref,supports_serialize=False)
tf.compat.v1.RegisterGradient(op_type)
tf.compat.v1.Session(target='',graph=None,config=None)
tf.compat.v1.SparseConditionalAccumulator(dtype,shape=None,shared_name=None,name='sparse_conditional_accumulator',reduction_type='MEAN')
tf.compat.v1.SparseFeature(index_key,value_key,dtype,size,already_sorted=False)
tf.compat.v1.SparseTensor(indices,values,dense_shape)
tf.compat.v1.SparseTensorSpec(shape=None,dtype=tf.dtypes.float32)
tf.compat.v1.SparseTensorValue(indices,values,dense_shape)
tf.compat.v1.TFRecordReader(name=None,options=None)
tf.compat.v1.Tensor(op,value_index,dtype)
tf.compat.v1.TensorArray(dtype,size=None,dynamic_size=None,clear_after_read=None,tensor_array_name=None,handle=None,flow=None,infer_shape=True,element_shape=None,colocate_with_first_write_call=True,name=None)
tf.compat.v1.TensorArraySpec(element_shape=None,dtype=tf.dtypes.float32,dynamic_size=False,infer_shape=True)
tf.compat.v1.TensorShape(dims)
tf.compat.v1.TensorSpec(shape,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.TextLineReader(skip_header_lines=None,name=None)
tf.compat.v1.VarLenFeature(dtype)
tf.compat.v1.Variable(initial_value=None,trainable=None,collections=None,validate_shape=True,caching_device=None,name=None,variable_def=None,dtype=None,expected_shape=None,import_scope=None,constraint=None,use_resource=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.compat.v1.VariableAggregation.NONE,shape=None)
tf.compat.v1.Variable.SaveSliceInfo(full_name=None,full_shape=None,var_offset=None,var_shape=None,save_slice_info_def=None,import_scope=None)
tf.compat.v1.VariableScope(reuse,name='',initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,name_scope='',dtype=tf.dtypes.float32,use_resource=None,constraint=None)
tf.compat.v1.WholeFileReader(name=None)
tf.compat.v1.abs(x,name=None)
tf.compat.v1.accumulate_n(inputs,shape=None,tensor_dtype=None,name=None)
tf.compat.v1.acos(x,name=None)
tf.compat.v1.acosh(x,name=None)
tf.compat.v1.add(x,y,name=None)
tf.compat.v1.add_check_numerics_ops()
tf.compat.v1.add_n(inputs,name=None)
tf.compat.v1.add_to_collection(name,value)
tf.compat.v1.add_to_collections(names,value)
tf.compat.v1.all_variables()
tf.compat.v1.angle(input,name=None)
tf.compat.v1.app.flags.BaseListParser(token=None,name=None)
tf.compat.v1.app.flags.BooleanFlag(name,default,help,short_name=None,**args)
tf.compat.v1.app.flags.CsvListSerializer(list_sep)
tf.compat.v1.app.flags.DEFINE(parser,name,default,help,flag_values=_flagvalues.FLAGS,serializer=None,module_name=None,required=False,**args)
tf.compat.v1.app.flags.DEFINE_alias(name,original_name,flag_values=_flagvalues.FLAGS,module_name=None)
tf.compat.v1.app.flags.DEFINE_bool(name,default,help,flag_values=_flagvalues.FLAGS,module_name=None,required=False,**args)
tf.compat.v1.app.flags.DEFINE_boolean(name,default,help,flag_values=_flagvalues.FLAGS,module_name=None,required=False,**args)
tf.compat.v1.app.flags.DEFINE_enum(name,default,enum_values,help,flag_values=_flagvalues.FLAGS,module_name=None,required=False,**args)
tf.compat.v1.app.flags.DEFINE_enum_class(name,default,enum_class,help,flag_values=_flagvalues.FLAGS,module_name=None,case_sensitive=False,required=False,**args)
tf.compat.v1.app.flags.DEFINE_flag(flag,flag_values=_flagvalues.FLAGS,module_name=None,required=False)
tf.compat.v1.app.flags.DEFINE_float(name,default,help,lower_bound=None,upper_bound=None,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.app.flags.DEFINE_integer(name,default,help,lower_bound=None,upper_bound=None,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.app.flags.DEFINE_list(name,default,help,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.app.flags.DEFINE_multi(parser,serializer,name,default,help,flag_values=_flagvalues.FLAGS,module_name=None,required=False,**args)
tf.compat.v1.app.flags.DEFINE_multi_enum(name,default,enum_values,help,flag_values=_flagvalues.FLAGS,case_sensitive=True,required=False,**args)
tf.compat.v1.app.flags.DEFINE_multi_enum_class(name,default,enum_class,help,flag_values=_flagvalues.FLAGS,module_name=None,case_sensitive=False,required=False,**args)
tf.compat.v1.app.flags.DEFINE_multi_float(name,default,help,lower_bound=None,upper_bound=None,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.app.flags.DEFINE_multi_integer(name,default,help,lower_bound=None,upper_bound=None,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.app.flags.DEFINE_multi_string(name,default,help,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.app.flags.DEFINE_spaceseplist(name,default,help,comma_compat=False,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.app.flags.DEFINE_string(name,default,help,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.app.flags.EnumClassFlag(name,default,help,enum_class,short_name=None,case_sensitive=False,**args)
tf.compat.v1.app.flags.EnumClassListSerializer(list_sep,**kwargs)
tf.compat.v1.app.flags.EnumClassParser(enum_class,case_sensitive=True)
tf.compat.v1.app.flags.EnumClassSerializer(lowercase)
tf.compat.v1.app.flags.EnumFlag(name,default,help,enum_values,short_name=None,case_sensitive=True,**args)
tf.compat.v1.app.flags.EnumParser(enum_values,case_sensitive=True)
tf.compat.v1.app.flags.FLAGS(*args,**kwargs)
tf.compat.v1.app.flags.Flag(parser,serializer,name,default,help_string,short_name=None,boolean=False,allow_override=False,allow_override_cpp=False,allow_hide_cpp=False,allow_overwrite=True,allow_using_method_names=False)
tf.compat.v1.app.flags.FlagHolder(flag_values,flag,ensure_non_none_value=False)
tf.compat.v1.app.flags.FlagValues()
tf.compat.v1.app.flags.FloatParser(lower_bound=None,upper_bound=None)
tf.compat.v1.app.flags.IntegerParser(lower_bound=None,upper_bound=None)
tf.compat.v1.app.flags.ListParser()
tf.compat.v1.app.flags.ListSerializer(list_sep)
tf.compat.v1.app.flags.MultiEnumClassFlag(name,default,help_string,enum_class,case_sensitive=False,**args)
tf.compat.v1.app.flags.MultiFlag(*args,**kwargs)
tf.compat.v1.app.flags.UnrecognizedFlagError(flagname,flagvalue='',suggestions=None)
tf.compat.v1.app.flags.WhitespaceSeparatedListParser(comma_compat=False)
tf.compat.v1.app.flags.adopt_module_key_flags(module,flag_values=_flagvalues.FLAGS)
tf.compat.v1.app.flags.declare_key_flag(flag_name,flag_values=_flagvalues.FLAGS)
tf.compat.v1.app.flags.disclaim_key_flags()
tf.compat.v1.app.flags.doc_to_help(doc)
tf.compat.v1.app.flags.flag_dict_to_args(flag_map,multi_flags=None)
tf.compat.v1.app.flags.get_help_width()
tf.compat.v1.app.flags.mark_bool_flags_as_mutual_exclusive(flag_names,required=False,flag_values=_flagvalues.FLAGS)
tf.compat.v1.app.flags.mark_flag_as_required(flag_name,flag_values=_flagvalues.FLAGS)
tf.compat.v1.app.flags.mark_flags_as_mutual_exclusive(flag_names,required=False,flag_values=_flagvalues.FLAGS)
tf.compat.v1.app.flags.mark_flags_as_required(flag_names,flag_values=_flagvalues.FLAGS)
tf.compat.v1.app.flags.multi_flags_validator(flag_names,message='Flagvalidationfailed',flag_values=_flagvalues.FLAGS)
tf.compat.v1.app.flags.register_multi_flags_validator(flag_names,multi_flags_checker,message='Flagsvalidationfailed',flag_values=_flagvalues.FLAGS)
tf.compat.v1.app.flags.register_validator(flag_name,checker,message='Flagvalidationfailed',flag_values=_flagvalues.FLAGS)
tf.compat.v1.app.flags.text_wrap(text,length=None,indent='',firstline_indent=None)
tf.compat.v1.app.flags.validator(flag_name,message='Flagvalidationfailed',flag_values=_flagvalues.FLAGS)
tf.compat.v1.app.run(main=None,argv=None)
tf.compat.v1.arg_max(input,dimension,output_type=tf.dtypes.int64,name=None)
tf.compat.v1.arg_min(input,dimension,output_type=tf.dtypes.int64,name=None)
tf.compat.v1.argmax(input,axis=None,name=None,dimension=None,output_type=tf.dtypes.int64)
tf.compat.v1.argmin(input,axis=None,name=None,dimension=None,output_type=tf.dtypes.int64)
tf.compat.v1.argsort(values,axis=-1,direction='ASCENDING',stable=False,name=None)
tf.compat.v1.as_dtype(type_value)
tf.compat.v1.as_string(input,precision=-1,scientific=False,shortest=False,width=-1,fill='',name=None)
tf.compat.v1.asin(x,name=None)
tf.compat.v1.asinh(x,name=None)
tf.compat.v1.assert_equal(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_greater(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_greater_equal(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_integer(x,message=None,name=None)
tf.compat.v1.assert_less(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_less_equal(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_near(x,y,rtol=None,atol=None,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_negative(x,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_non_negative(x,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_non_positive(x,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_none_equal(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_positive(x,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_proper_iterable(values)
tf.compat.v1.assert_rank(x,rank,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_rank_at_least(x,rank,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_rank_in(x,ranks,data=None,summarize=None,message=None,name=None)
tf.compat.v1.assert_same_float_dtype(tensors=None,dtype=None)
tf.compat.v1.assert_scalar(tensor,name=None,message=None)
tf.compat.v1.assert_type(tensor,tf_type,message=None,name=None)
tf.compat.v1.assert_variables_initialized(var_list=None)
tf.compat.v1.assign(ref,value,validate_shape=None,use_locking=None,name=None)
tf.compat.v1.assign_add(ref,value,use_locking=None,name=None)
tf.compat.v1.assign_sub(ref,value,use_locking=None,name=None)
tf.compat.v1.atan(x,name=None)
tf.compat.v1.atan2(y,x,name=None)
tf.compat.v1.atanh(x,name=None)
tf.compat.v1.audio.decode_wav(contents,desired_channels=-1,desired_samples=-1,name=None)
tf.compat.v1.audio.encode_wav(audio,sample_rate,name=None)
tf.compat.v1.autograph.experimental.do_not_convert(func=None)
tf.compat.v1.autograph.experimental.set_loop_options(parallel_iterations=UNSPECIFIED,swap_memory=UNSPECIFIED,maximum_iterations=UNSPECIFIED,shape_invariants=UNSPECIFIED)
tf.compat.v1.autograph.set_verbosity(level,alsologtostdout=False)
tf.compat.v1.autograph.to_code(entity,recursive=True,arg_values=None,arg_types=None,indentation='',experimental_optional_features=None)
tf.compat.v1.autograph.to_graph(entity,recursive=True,arg_values=None,arg_types=None,experimental_optional_features=None)
tf.compat.v1.autograph.trace(*args)
tf.compat.v1.batch_gather(params,indices,name=None)
tf.compat.v1.batch_scatter_update(ref,indices,updates,use_locking=True,name=None)
tf.compat.v1.batch_to_space(input,crops,block_size,name=None,block_shape=None)
tf.compat.v1.batch_to_space_nd(input,block_shape,crops,name=None)
tf.compat.v1.betainc(a,b,x,name=None)
tf.compat.v1.bincount(arr,weights=None,minlength=None,maxlength=None,dtype=tf.dtypes.int32)
tf.compat.v1.bitcast(input,type,name=None)
tf.compat.v1.bitwise.bitwise_and(x,y,name=None)
tf.compat.v1.bitwise.bitwise_or(x,y,name=None)
tf.compat.v1.bitwise.bitwise_xor(x,y,name=None)
tf.compat.v1.bitwise.invert(x,name=None)
tf.compat.v1.bitwise.left_shift(x,y,name=None)
tf.compat.v1.bitwise.right_shift(x,y,name=None)
tf.compat.v1.boolean_mask(tensor,mask,name='boolean_mask',axis=None)
tf.compat.v1.broadcast_dynamic_shape(shape_x,shape_y)
tf.compat.v1.broadcast_static_shape(shape_x,shape_y)
tf.compat.v1.broadcast_to(input,shape,name=None)
tf.compat.v1.case(pred_fn_pairs,default=None,exclusive=False,strict=False,name='case')
tf.compat.v1.cast(x,dtype,name=None)
tf.compat.v1.ceil(x,name=None)
tf.compat.v1.check_numerics(tensor,message,name=None)
tf.compat.v1.cholesky(input,name=None)
tf.compat.v1.cholesky_solve(chol,rhs,name=None)
tf.compat.v1.clip_by_average_norm(t,clip_norm,name=None)
tf.compat.v1.clip_by_global_norm(t_list,clip_norm,use_norm=None,name=None)
tf.compat.v1.clip_by_norm(t,clip_norm,axes=None,name=None)
tf.compat.v1.clip_by_value(t,clip_value_min,clip_value_max,name=None)
tf.compat.v1.colocate_with(op,ignore_existing=False)
tf.compat.v1.compat.as_bytes(bytes_or_text,encoding='utf-8')
tf.compat.v1.compat.as_str(bytes_or_text,encoding='utf-8')
tf.compat.v1.compat.as_str_any(value)
tf.compat.v1.compat.as_text(bytes_or_text,encoding='utf-8')
tf.compat.v1.compat.dimension_at_index(shape,index)
tf.compat.v1.compat.dimension_value(dimension)
tf.compat.v1.compat.forward_compatible(year,month,day)
tf.compat.v1.compat.path_to_str(path)
tf.compat.v1.complex(real,imag,name=None)
tf.compat.v1.concat(values,axis,name='concat')
tf.compat.v1.cond(pred,true_fn=None,false_fn=None,strict=False,name=None,fn1=None,fn2=None)
tf.compat.v1.config.LogicalDevice(name,device_type)
tf.compat.v1.config.LogicalDeviceConfiguration(memory_limit=None,experimental_priority=None)
tf.compat.v1.config.PhysicalDevice(name,device_type)
tf.compat.v1.config.experimental.ClusterDeviceFilters()
tf.compat.v1.config.experimental.VirtualDeviceConfiguration(memory_limit=None,experimental_priority=None)
tf.compat.v1.config.experimental.disable_mlir_bridge()
tf.compat.v1.config.experimental.disable_mlir_graph_optimization()
tf.compat.v1.config.experimental.enable_mlir_bridge()
tf.compat.v1.config.experimental.enable_mlir_graph_optimization()
tf.compat.v1.config.experimental.enable_tensor_float_32_execution(enabled)
tf.compat.v1.config.experimental.get_device_details(device)
tf.compat.v1.config.experimental.get_device_policy()
tf.compat.v1.config.experimental.get_memory_growth(device)
tf.compat.v1.config.experimental.get_memory_info(device)
tf.compat.v1.config.experimental.get_memory_usage(device)
tf.compat.v1.config.experimental.get_synchronous_execution()
tf.compat.v1.config.experimental.get_virtual_device_configuration(device)
tf.compat.v1.config.experimental.get_visible_devices(device_type=None)
tf.compat.v1.config.experimental.list_logical_devices(device_type=None)
tf.compat.v1.config.experimental.list_physical_devices(device_type=None)
tf.compat.v1.config.experimental.reset_memory_stats(device)
tf.compat.v1.config.experimental.set_device_policy(device_policy)
tf.compat.v1.config.experimental.set_memory_growth(device,enable)
tf.compat.v1.config.experimental.set_synchronous_execution(enable)
tf.compat.v1.config.experimental.set_virtual_device_configuration(device,logical_devices)
tf.compat.v1.config.experimental.set_visible_devices(devices,device_type=None)
tf.compat.v1.config.experimental.tensor_float_32_execution_enabled()
tf.compat.v1.config.experimental_connect_to_cluster(cluster_spec_or_resolver,job_name='localhost',task_index=0,protocol=None,make_master_device_default=True,cluster_device_filters=None)
tf.compat.v1.config.experimental_connect_to_host(remote_host=None,job_name='worker')
tf.compat.v1.config.experimental_functions_run_eagerly()
tf.compat.v1.config.experimental_run_functions_eagerly(run_eagerly)
tf.compat.v1.config.functions_run_eagerly()
tf.compat.v1.config.get_logical_device_configuration(device)
tf.compat.v1.config.get_soft_device_placement()
tf.compat.v1.config.get_visible_devices(device_type=None)
tf.compat.v1.config.list_logical_devices(device_type=None)
tf.compat.v1.config.list_physical_devices(device_type=None)
tf.compat.v1.config.optimizer.get_experimental_options()
tf.compat.v1.config.optimizer.get_jit()->str
tf.compat.v1.config.optimizer.set_experimental_options(options)
tf.compat.v1.config.optimizer.set_jit(enabled:Union[bool,str])
tf.compat.v1.config.run_functions_eagerly(run_eagerly)
tf.compat.v1.config.set_logical_device_configuration(device,logical_devices)
tf.compat.v1.config.set_soft_device_placement(enabled)
tf.compat.v1.config.set_visible_devices(devices,device_type=None)
tf.compat.v1.config.threading.get_inter_op_parallelism_threads()
tf.compat.v1.config.threading.get_intra_op_parallelism_threads()
tf.compat.v1.config.threading.set_inter_op_parallelism_threads(num_threads)
tf.compat.v1.config.threading.set_intra_op_parallelism_threads(num_threads)
tf.compat.v1.confusion_matrix(labels,predictions,num_classes=None,dtype=tf.dtypes.int32,name=None,weights=None)
tf.compat.v1.conj(x,name=None)
tf.compat.v1.constant(value,dtype=None,shape=None,name='Const',verify_shape=False)
tf.compat.v1.constant_initializer(value=0,dtype=tf.dtypes.float32,verify_shape=False)
tf.compat.v1.container(container_name)
tf.compat.v1.control_dependencies(control_inputs)
tf.compat.v1.control_flow_v2_enabled()
tf.compat.v1.convert_to_tensor(value,dtype=None,name=None,preferred_dtype=None,dtype_hint=None)
tf.compat.v1.convert_to_tensor_or_indexed_slices(value,dtype=None,name=None)
tf.compat.v1.convert_to_tensor_or_sparse_tensor(value,dtype=None,name=None)
tf.compat.v1.cos(x,name=None)
tf.compat.v1.cosh(x,name=None)
tf.compat.v1.count_nonzero(input_tensor=None,axis=None,keepdims=None,dtype=tf.dtypes.int64,name=None,reduction_indices=None,keep_dims=None,input=None)
tf.compat.v1.count_up_to(ref,limit,name=None)
tf.compat.v1.create_partitioned_variables(shape,slicing,initializer,dtype=tf.dtypes.float32,trainable=True,collections=None,name=None,reuse=None)
tf.compat.v1.cross(a,b,name=None)
tf.compat.v1.cumprod(x,axis=0,exclusive=False,reverse=False,name=None)
tf.compat.v1.cumsum(x,axis=0,exclusive=False,reverse=False,name=None)
tf.compat.v1.custom_gradient(f=None)
tf.compat.v1.data.Dataset()
tf.compat.v1.data.DatasetSpec(element_spec,dataset_shape=())
tf.compat.v1.data.FixedLengthRecordDataset(filenames,record_bytes,header_bytes=None,footer_bytes=None,buffer_size=None,compression_type=None,num_parallel_reads=None,name=None)
tf.compat.v1.data.Iterator(iterator_resource,initializer,output_types,output_shapes,output_classes)
tf.compat.v1.data.Options()
tf.compat.v1.data.TFRecordDataset(filenames,compression_type=None,buffer_size=None,num_parallel_reads=None,name=None)
tf.compat.v1.data.TextLineDataset(filenames,compression_type=None,buffer_size=None,num_parallel_reads=None,name=None)
tf.compat.v1.data.ThreadingOptions()
tf.compat.v1.data.experimental.AutotuneOptions()
tf.compat.v1.data.experimental.CheckpointInputPipelineHook(estimator,external_state_policy=None)
tf.compat.v1.data.experimental.Counter(start=0,step=1,dtype=tf.dtypes.int64)
tf.compat.v1.data.experimental.CsvDataset(filenames,record_defaults,compression_type=None,buffer_size=None,header=False,field_delim=',',use_quote_delim=True,na_value='',select_cols=None,exclude_cols=None)
tf.compat.v1.data.experimental.DatasetInitializer(dataset)
tf.compat.v1.data.experimental.DatasetStructure(element_spec,dataset_shape=())
tf.compat.v1.data.experimental.DistributeOptions()
tf.compat.v1.data.experimental.OptimizationOptions()
tf.compat.v1.data.experimental.OptionalStructure(element_spec)
tf.compat.v1.data.experimental.RaggedTensorStructure(dtype,shape,ragged_rank)
tf.compat.v1.data.experimental.RandomDataset(seed=None,name=None)
tf.compat.v1.data.experimental.Reducer(init_func,reduce_func,finalize_func)
tf.compat.v1.data.experimental.SparseTensorStructure(dtype,shape)
tf.compat.v1.data.experimental.SqlDataset(driver_name,data_source_name,query,output_types)
tf.compat.v1.data.experimental.TFRecordWriter(filename,compression_type=None)
tf.compat.v1.data.experimental.TensorArrayStructure(dtype,element_shape,dynamic_size,infer_shape)
tf.compat.v1.data.experimental.TensorStructure(dtype,shape)
tf.compat.v1.data.experimental.ThreadingOptions()
tf.compat.v1.data.experimental.assert_cardinality(expected_cardinality)
tf.compat.v1.data.experimental.bucket_by_sequence_length(element_length_func,bucket_boundaries,bucket_batch_sizes,padded_shapes=None,padding_values=None,pad_to_bucket_boundary=False,no_padding=False,drop_remainder=False)
tf.compat.v1.data.experimental.cardinality(dataset)
tf.compat.v1.data.experimental.choose_from_datasets(datasets,choice_dataset,stop_on_empty_dataset=False)
tf.compat.v1.data.experimental.copy_to_device(target_device,source_device='/cpu:0')
tf.compat.v1.data.experimental.dense_to_ragged_batch(batch_size,drop_remainder=False,row_splits_dtype=tf.dtypes.int64)
tf.compat.v1.data.experimental.dense_to_sparse_batch(batch_size,row_shape)
tf.compat.v1.data.experimental.enable_debug_mode()
tf.compat.v1.data.experimental.enumerate_dataset(start=0)
tf.compat.v1.data.experimental.from_variant(variant,structure)
tf.compat.v1.data.experimental.get_next_as_optional(iterator)
tf.compat.v1.data.experimental.get_single_element(dataset)
tf.compat.v1.data.experimental.get_structure(dataset_or_iterator)
tf.compat.v1.data.experimental.group_by_reducer(key_func,reducer)
tf.compat.v1.data.experimental.group_by_window(key_func,reduce_func,window_size=None,window_size_func=None)
tf.compat.v1.data.experimental.ignore_errors(log_warning=False)
tf.compat.v1.data.experimental.index_table_from_dataset(dataset=None,num_oov_buckets=0,vocab_size=None,default_value=-1,hasher_spec=lookup_ops.FastHashSpec,key_dtype=tf.dtypes.string,name=None)
tf.compat.v1.data.experimental.make_batched_features_dataset(file_pattern,batch_size,features,reader=None,label_key=None,reader_args=None,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,reader_num_threads=None,parser_num_threads=None,sloppy_ordering=False,drop_final_batch=False)
tf.compat.v1.data.experimental.make_csv_dataset(file_pattern,batch_size,column_names=None,column_defaults=None,label_name=None,select_columns=None,field_delim=',',use_quote_delim=True,na_value='',header=True,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,num_parallel_reads=None,sloppy=False,num_rows_for_inference=100,compression_type=None,ignore_errors=False)
tf.compat.v1.data.experimental.make_saveable_from_iterator(iterator,external_state_policy=None)
tf.compat.v1.data.experimental.map_and_batch(map_func,batch_size,num_parallel_batches=None,drop_remainder=False,num_parallel_calls=None)
tf.compat.v1.data.experimental.map_and_batch_with_legacy_function(map_func,batch_size,num_parallel_batches=None,drop_remainder=False,num_parallel_calls=None)
tf.compat.v1.data.experimental.parallel_interleave(map_func,cycle_length,block_length=1,sloppy=False,buffer_output_elements=None,prefetch_input_elements=None)
tf.compat.v1.data.experimental.parse_example_dataset(features,num_parallel_calls=1,deterministic=None)
tf.compat.v1.data.experimental.prefetch_to_device(device,buffer_size=None)
tf.compat.v1.data.experimental.rejection_resample(class_func,target_dist,initial_dist=None,seed=None)
tf.compat.v1.data.experimental.sample_from_datasets(datasets,weights=None,seed=None,stop_on_empty_dataset=False)
tf.compat.v1.data.experimental.scan(initial_state,scan_func)
tf.compat.v1.data.experimental.service.DispatcherConfig(port=0,protocol=None,work_dir=None,fault_tolerant_mode=False,worker_addresses=None,job_gc_check_interval_ms=None,job_gc_timeout_ms=None)
tf.compat.v1.data.experimental.service.WorkerConfig(dispatcher_address,worker_address=None,port=0,protocol=None,heartbeat_interval_ms=None,dispatcher_timeout_ms=None)
tf.compat.v1.data.experimental.service.distribute(processing_mode,service,job_name=None,consumer_index=None,num_consumers=None,max_outstanding_requests=None,data_transfer_protocol=None,compression='AUTO',target_workers='AUTO')
tf.compat.v1.data.experimental.service.from_dataset_id(processing_mode,service,dataset_id,element_spec=None,job_name=None,consumer_index=None,num_consumers=None,max_outstanding_requests=None,data_transfer_protocol=None,target_workers='AUTO')
tf.compat.v1.data.experimental.service.register_dataset(service,dataset,compression='AUTO')
tf.compat.v1.data.experimental.shuffle_and_repeat(buffer_size,count=None,seed=None)
tf.compat.v1.data.experimental.snapshot(path,compression='AUTO',reader_func=None,shard_func=None)
tf.compat.v1.data.experimental.table_from_dataset(dataset=None,num_oov_buckets=0,vocab_size=None,default_value=None,hasher_spec=lookup_ops.FastHashSpec,key_dtype=tf.dtypes.string,name=None)
tf.compat.v1.data.experimental.take_while(predicate)
tf.compat.v1.data.experimental.to_variant(dataset)
tf.compat.v1.data.experimental.unbatch()
tf.compat.v1.data.experimental.unique()
tf.compat.v1.data.get_output_classes(dataset_or_iterator)
tf.compat.v1.data.get_output_shapes(dataset_or_iterator)
tf.compat.v1.data.get_output_types(dataset_or_iterator)
tf.compat.v1.data.make_initializable_iterator(dataset,shared_name=None)
tf.compat.v1.data.make_one_shot_iterator(dataset)
tf.compat.v1.debugging.Assert(condition,data,summarize=None,name=None)
tf.compat.v1.debugging.assert_all_finite(t=None,msg=None,name=None,x=None,message=None)
tf.compat.v1.debugging.assert_equal(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_greater(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_greater_equal(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_integer(x,message=None,name=None)
tf.compat.v1.debugging.assert_less(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_less_equal(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_near(x,y,rtol=None,atol=None,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_negative(x,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_non_negative(x,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_non_positive(x,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_none_equal(x,y,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_positive(x,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_proper_iterable(values)
tf.compat.v1.debugging.assert_rank(x,rank,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_rank_at_least(x,rank,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_rank_in(x,ranks,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_same_float_dtype(tensors=None,dtype=None)
tf.compat.v1.debugging.assert_scalar(tensor,name=None,message=None)
tf.compat.v1.debugging.assert_shapes(shapes,data=None,summarize=None,message=None,name=None)
tf.compat.v1.debugging.assert_type(tensor,tf_type,message=None,name=None)
tf.compat.v1.debugging.check_numerics(tensor,message,name=None)
tf.compat.v1.debugging.disable_check_numerics()
tf.compat.v1.debugging.disable_traceback_filtering()
tf.compat.v1.debugging.enable_check_numerics(stack_height_limit=30,path_length_limit=50)
tf.compat.v1.debugging.enable_traceback_filtering()
tf.compat.v1.debugging.experimental.disable_dump_debug_info()
tf.compat.v1.debugging.experimental.enable_dump_debug_info(dump_root,tensor_debug_mode=DEFAULT_TENSOR_DEBUG_MODE,circular_buffer_size=1000,op_regex=None,tensor_dtypes=None)
tf.compat.v1.debugging.get_log_device_placement()
tf.compat.v1.debugging.is_finite(x,name=None)
tf.compat.v1.debugging.is_inf(x,name=None)
tf.compat.v1.debugging.is_nan(x,name=None)
tf.compat.v1.debugging.is_non_decreasing(x,name=None)
tf.compat.v1.debugging.is_numeric_tensor(tensor)
tf.compat.v1.debugging.is_strictly_increasing(x,name=None)
tf.compat.v1.debugging.is_traceback_filtering_enabled()
tf.compat.v1.debugging.set_log_device_placement(enabled)
tf.compat.v1.decode_base64(input,name=None)
tf.compat.v1.decode_compressed(bytes,compression_type='',name=None)
tf.compat.v1.decode_csv(records,record_defaults,field_delim=',',use_quote_delim=True,name=None,na_value='',select_cols=None)
tf.compat.v1.decode_json_example(json_examples,name=None)
tf.compat.v1.decode_raw(input_bytes=None,out_type=None,little_endian=True,name=None,bytes=None)
tf.compat.v1.delete_session_tensor(handle,name=None)
tf.compat.v1.depth_to_space(input,block_size,name=None,data_format='NHWC')
tf.compat.v1.dequantize(input,min_range,max_range,mode='MIN_COMBINED',name=None,axis=None,narrow_range=False,dtype=tf.dtypes.float32)
tf.compat.v1.deserialize_many_sparse(serialized_sparse,dtype,rank=None,name=None)
tf.compat.v1.device(device_name_or_function)
tf.compat.v1.diag(diagonal,name=None)
tf.compat.v1.diag_part(input,name=None)
tf.compat.v1.digamma(x,name=None)
tf.compat.v1.dimension_at_index(shape,index)
tf.compat.v1.dimension_value(dimension)
tf.compat.v1.disable_control_flow_v2()
tf.compat.v1.disable_eager_execution()
tf.compat.v1.disable_resource_variables()
tf.compat.v1.disable_tensor_equality()
tf.compat.v1.disable_v2_behavior()
tf.compat.v1.disable_v2_tensorshape()
tf.compat.v1.distribute.CrossDeviceOps()
tf.compat.v1.distribute.HierarchicalCopyAllReduce(num_packs=1)
tf.compat.v1.distribute.InputContext(num_input_pipelines=1,input_pipeline_id=0,num_replicas_in_sync=1)
tf.compat.v1.distribute.MirroredStrategy(devices=None,cross_device_ops=None)
tf.compat.v1.distribute.NcclAllReduce(num_packs=1)
tf.compat.v1.distribute.OneDeviceStrategy(device)
tf.compat.v1.distribute.ReductionToOneDevice(reduce_to_device=None,accumulation_fn=None)
tf.compat.v1.distribute.ReplicaContext(strategy,replica_id_in_sync_group)
tf.compat.v1.distribute.RunOptions(experimental_enable_dynamic_batch_size=True,experimental_bucketizing_dynamic_shape=False,experimental_xla_options=None)
tf.compat.v1.distribute.Server(server_or_cluster_def,job_name=None,task_index=None,protocol=None,config=None,start=True)
tf.compat.v1.distribute.Strategy(extended)
tf.compat.v1.distribute.StrategyExtended(container_strategy)
tf.compat.v1.distribute.cluster_resolver.GCEClusterResolver(project,zone,instance_group,port,task_type='worker',task_id=0,rpc_layer='grpc',credentials='default',service=None)
tf.compat.v1.distribute.cluster_resolver.KubernetesClusterResolver(job_to_label_mapping=None,tf_server_port=8470,rpc_layer='grpc',override_client=None)
tf.compat.v1.distribute.cluster_resolver.SimpleClusterResolver(cluster_spec,master='',task_type=None,task_id=None,environment='',num_accelerators=None,rpc_layer=None)
tf.compat.v1.distribute.cluster_resolver.SlurmClusterResolver(jobs=None,port_base=8888,gpus_per_node=None,gpus_per_task=None,tasks_per_node=None,auto_set_gpu=True,rpc_layer='grpc')
tf.compat.v1.distribute.cluster_resolver.TFConfigClusterResolver(task_type=None,task_id=None,rpc_layer=None,environment=None)
tf.compat.v1.distribute.cluster_resolver.TPUClusterResolver(tpu=None,zone=None,project=None,job_name='worker',coordinator_name=None,coordinator_address=None,credentials='default',service=None,discovery_url=None)
tf.compat.v1.distribute.cluster_resolver.UnionResolver(*args,**kwargs)
tf.compat.v1.distribute.experimental.CentralStorageStrategy(compute_devices=None,parameter_device=None)
tf.compat.v1.distribute.experimental.CollectiveHints(bytes_per_pack=0,timeout_seconds=None)
tf.compat.v1.distribute.experimental.CommunicationOptions(bytes_per_pack=0,timeout_seconds=None,implementation=tf.distribute.experimental.CollectiveCommunication.AUTO)
tf.compat.v1.distribute.experimental.MultiWorkerMirroredStrategy(communication=tf.distribute.experimental.CollectiveCommunication.AUTO,cluster_resolver=None)
tf.compat.v1.distribute.experimental.ParameterServerStrategy(cluster_resolver=None)
tf.compat.v1.distribute.experimental.TPUStrategy(tpu_cluster_resolver=None,steps_per_run=None,device_assignment=None)
tf.compat.v1.distribute.experimental_set_strategy(strategy)
tf.compat.v1.distribute.get_loss_reduction()
tf.compat.v1.distribute.get_replica_context()
tf.compat.v1.distribute.get_strategy()
tf.compat.v1.distribute.has_strategy()
tf.compat.v1.distribute.in_cross_replica_context()
tf.compat.v1.distributions.Bernoulli(logits=None,probs=None,dtype=tf.dtypes.int32,validate_args=False,allow_nan_stats=True,name='Bernoulli')
tf.compat.v1.distributions.Beta(concentration1=None,concentration0=None,validate_args=False,allow_nan_stats=True,name='Beta')
tf.compat.v1.distributions.Categorical(logits=None,probs=None,dtype=tf.dtypes.int32,validate_args=False,allow_nan_stats=True,name='Categorical')
tf.compat.v1.distributions.Dirichlet(concentration,validate_args=False,allow_nan_stats=True,name='Dirichlet')
tf.compat.v1.distributions.DirichletMultinomial(total_count,concentration,validate_args=False,allow_nan_stats=True,name='DirichletMultinomial')
tf.compat.v1.distributions.Distribution(dtype,reparameterization_type,validate_args,allow_nan_stats,parameters=None,graph_parents=None,name=None)
tf.compat.v1.distributions.Exponential(rate,validate_args=False,allow_nan_stats=True,name='Exponential')
tf.compat.v1.distributions.Gamma(concentration,rate,validate_args=False,allow_nan_stats=True,name='Gamma')
tf.compat.v1.distributions.Laplace(loc,scale,validate_args=False,allow_nan_stats=True,name='Laplace')
tf.compat.v1.distributions.Multinomial(total_count,logits=None,probs=None,validate_args=False,allow_nan_stats=True,name='Multinomial')
tf.compat.v1.distributions.Normal(loc,scale,validate_args=False,allow_nan_stats=True,name='Normal')
tf.compat.v1.distributions.RegisterKL(dist_cls_a,dist_cls_b)
tf.compat.v1.distributions.ReparameterizationType(rep_type)
tf.compat.v1.distributions.StudentT(df,loc,scale,validate_args=False,allow_nan_stats=True,name='StudentT')
tf.compat.v1.distributions.Uniform(low=0.0,high=1.0,validate_args=False,allow_nan_stats=True,name='Uniform')
tf.compat.v1.distributions.kl_divergence(distribution_a,distribution_b,allow_nan_stats=True,name=None)
tf.compat.v1.div_no_nan(x,y,name=None)
tf.compat.v1.divide(x,y,name=None)
tf.compat.v1.dtypes.DType()
tf.compat.v1.dtypes.as_dtype(type_value)
tf.compat.v1.dtypes.as_string(input,precision=-1,scientific=False,shortest=False,width=-1,fill='',name=None)
tf.compat.v1.dtypes.cast(x,dtype,name=None)
tf.compat.v1.dtypes.complex(real,imag,name=None)
tf.compat.v1.dtypes.saturate_cast(value,dtype,name=None)
tf.compat.v1.dynamic_partition(data,partitions,num_partitions,name=None)
tf.compat.v1.dynamic_stitch(indices,data,name=None)
tf.compat.v1.edit_distance(hypothesis,truth,normalize=True,name='edit_distance')
tf.compat.v1.einsum(equation,*inputs,**kwargs)
tf.compat.v1.enable_control_flow_v2()
tf.compat.v1.enable_eager_execution(config=None,device_policy=None,execution_mode=None)
tf.compat.v1.enable_resource_variables()
tf.compat.v1.enable_tensor_equality()
tf.compat.v1.enable_v2_behavior()
tf.compat.v1.enable_v2_tensorshape()
tf.compat.v1.encode_base64(input,pad=False,name=None)
tf.compat.v1.ensure_shape(x,shape,name=None)
tf.compat.v1.equal(x,y,name=None)
tf.compat.v1.erf(x,name=None)
tf.compat.v1.erfc(x,name=None)
tf.compat.v1.errors.AbortedError(node_def,op,message,*args)
tf.compat.v1.errors.AlreadyExistsError(node_def,op,message,*args)
tf.compat.v1.errors.CancelledError(node_def,op,message,*args)
tf.compat.v1.errors.DataLossError(node_def,op,message,*args)
tf.compat.v1.errors.DeadlineExceededError(node_def,op,message,*args)
tf.compat.v1.errors.FailedPreconditionError(node_def,op,message,*args)
tf.compat.v1.errors.InternalError(node_def,op,message,*args)
tf.compat.v1.errors.InvalidArgumentError(node_def,op,message,*args)
tf.compat.v1.errors.NotFoundError(node_def,op,message,*args)
tf.compat.v1.errors.OpError(node_def,op,message,error_code,*args)
tf.compat.v1.errors.OutOfRangeError(node_def,op,message,*args)
tf.compat.v1.errors.PermissionDeniedError(node_def,op,message,*args)
tf.compat.v1.errors.ResourceExhaustedError(node_def,op,message,*args)
tf.compat.v1.errors.UnauthenticatedError(node_def,op,message,*args)
tf.compat.v1.errors.UnavailableError(node_def,op,message,*args)
tf.compat.v1.errors.UnimplementedError(node_def,op,message,*args)
tf.compat.v1.errors.UnknownError(node_def,op,message,*args)
tf.compat.v1.errors.error_code_from_exception_type(cls)
tf.compat.v1.errors.exception_type_from_error_code(error_code)
tf.compat.v1.estimator.BaselineClassifier(model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Ftrl',config=None,loss_reduction=tf.compat.v1.losses.Reduction.SUM)
tf.compat.v1.estimator.BaselineEstimator(head,model_dir=None,optimizer='Ftrl',config=None)
tf.compat.v1.estimator.BaselineRegressor(model_dir=None,label_dimension=1,weight_column=None,optimizer='Ftrl',config=None,loss_reduction=tf.compat.v1.losses.Reduction.SUM)
tf.compat.v1.estimator.BestExporter(name='best_exporter',serving_input_receiver_fn=None,event_file_pattern='eval/*.tfevents.*',compare_fn=_loss_smaller,assets_extra=None,as_text=False,exports_to_keep=5)
tf.compat.v1.estimator.BinaryClassHead(weight_column=None,thresholds=None,label_vocabulary=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,name=None)
tf.compat.v1.estimator.BoostedTreesClassifier(feature_columns,n_batches_per_layer,model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,n_trees=100,max_depth=6,learning_rate=0.1,l1_regularization=0.0,l2_regularization=0.0,tree_complexity=0.0,min_node_weight=0.0,config=None,center_bias=False,pruning_mode='none',quantile_sketch_epsilon=0.01,train_in_memory=False)
tf.compat.v1.estimator.BoostedTreesEstimator(feature_columns,n_batches_per_layer,head,model_dir=None,weight_column=None,n_trees=100,max_depth=6,learning_rate=0.1,l1_regularization=0.0,l2_regularization=0.0,tree_complexity=0.0,min_node_weight=0.0,config=None,center_bias=False,pruning_mode='none',quantile_sketch_epsilon=0.01)
tf.compat.v1.estimator.BoostedTreesRegressor(feature_columns,n_batches_per_layer,model_dir=None,label_dimension=1,weight_column=None,n_trees=100,max_depth=6,learning_rate=0.1,l1_regularization=0.0,l2_regularization=0.0,tree_complexity=0.0,min_node_weight=0.0,config=None,center_bias=False,pruning_mode='none',quantile_sketch_epsilon=0.01,train_in_memory=False)
tf.compat.v1.estimator.CheckpointSaverHook(checkpoint_dir,save_secs=None,save_steps=None,saver=None,checkpoint_basename='model.ckpt',scaffold=None,listeners=None,save_graph_def=True)
tf.compat.v1.estimator.DNNClassifier(hidden_units,feature_columns,model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Adagrad',activation_fn=tf.nn.relu,dropout=None,input_layer_partitioner=None,config=None,warm_start_from=None,loss_reduction=tf.compat.v1.losses.Reduction.SUM,batch_norm=False)
tf.compat.v1.estimator.DNNEstimator(head,hidden_units,feature_columns,model_dir=None,optimizer='Adagrad',activation_fn=tf.nn.relu,dropout=None,input_layer_partitioner=None,config=None,warm_start_from=None,batch_norm=False)
tf.compat.v1.estimator.DNNLinearCombinedClassifier(model_dir=None,linear_feature_columns=None,linear_optimizer='Ftrl',dnn_feature_columns=None,dnn_optimizer='Adagrad',dnn_hidden_units=None,dnn_activation_fn=tf.nn.relu,dnn_dropout=None,n_classes=2,weight_column=None,label_vocabulary=None,input_layer_partitioner=None,config=None,warm_start_from=None,loss_reduction=tf.compat.v1.losses.Reduction.SUM,batch_norm=False,linear_sparse_combiner='sum')
tf.compat.v1.estimator.DNNLinearCombinedEstimator(head,model_dir=None,linear_feature_columns=None,linear_optimizer='Ftrl',dnn_feature_columns=None,dnn_optimizer='Adagrad',dnn_hidden_units=None,dnn_activation_fn=tf.nn.relu,dnn_dropout=None,input_layer_partitioner=None,config=None,batch_norm=False,linear_sparse_combiner='sum')
tf.compat.v1.estimator.DNNLinearCombinedRegressor(model_dir=None,linear_feature_columns=None,linear_optimizer='Ftrl',dnn_feature_columns=None,dnn_optimizer='Adagrad',dnn_hidden_units=None,dnn_activation_fn=tf.nn.relu,dnn_dropout=None,label_dimension=1,weight_column=None,input_layer_partitioner=None,config=None,warm_start_from=None,loss_reduction=tf.compat.v1.losses.Reduction.SUM,batch_norm=False,linear_sparse_combiner='sum')
tf.compat.v1.estimator.DNNRegressor(hidden_units,feature_columns,model_dir=None,label_dimension=1,weight_column=None,optimizer='Adagrad',activation_fn=tf.nn.relu,dropout=None,input_layer_partitioner=None,config=None,warm_start_from=None,loss_reduction=tf.compat.v1.losses.Reduction.SUM,batch_norm=False)
tf.compat.v1.estimator.Estimator(model_fn,model_dir=None,config=None,params=None,warm_start_from=None)
tf.compat.v1.estimator.EstimatorSpec(mode,predictions=None,loss=None,train_op=None,eval_metric_ops=None,export_outputs=None,training_chief_hooks=None,training_hooks=None,scaffold=None,evaluation_hooks=None,prediction_hooks=None)
tf.compat.v1.estimator.EvalSpec(input_fn,steps=100,name=None,hooks=None,exporters=None,start_delay_secs=120,throttle_secs=600)
tf.compat.v1.estimator.FeedFnHook(feed_fn)
tf.compat.v1.estimator.FinalExporter(name,serving_input_receiver_fn,assets_extra=None,as_text=False)
tf.compat.v1.estimator.FinalOpsHook(final_ops,final_ops_feed_dict=None)
tf.compat.v1.estimator.GlobalStepWaiterHook(wait_until_step)
tf.compat.v1.estimator.LatestExporter(name,serving_input_receiver_fn,assets_extra=None,as_text=False,exports_to_keep=5)
tf.compat.v1.estimator.LinearClassifier(feature_columns,model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Ftrl',config=None,partitioner=None,warm_start_from=None,loss_reduction=tf.compat.v1.losses.Reduction.SUM,sparse_combiner='sum')
tf.compat.v1.estimator.LinearEstimator(head,feature_columns,model_dir=None,optimizer='Ftrl',config=None,partitioner=None,sparse_combiner='sum',warm_start_from=None)
tf.compat.v1.estimator.LinearRegressor(feature_columns,model_dir=None,label_dimension=1,weight_column=None,optimizer='Ftrl',config=None,partitioner=None,warm_start_from=None,loss_reduction=tf.compat.v1.losses.Reduction.SUM,sparse_combiner='sum')
tf.compat.v1.estimator.LoggingTensorHook(tensors,every_n_iter=None,every_n_secs=None,at_end=False,formatter=None)
tf.compat.v1.estimator.LogisticRegressionHead(weight_column=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,name=None)
tf.compat.v1.estimator.MultiClassHead(n_classes,weight_column=None,label_vocabulary=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,name=None)
tf.compat.v1.estimator.MultiHead(heads,head_weights=None)
tf.compat.v1.estimator.MultiLabelHead(n_classes,weight_column=None,thresholds=None,label_vocabulary=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,classes_for_class_based_metrics=None,name=None)
tf.compat.v1.estimator.NanLossDuringTrainingError(*args,**kwargs)
tf.compat.v1.estimator.NanTensorHook(loss_tensor,fail_on_nan_loss=True)
tf.compat.v1.estimator.PoissonRegressionHead(label_dimension=1,weight_column=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,compute_full_loss=True,name=None)
tf.compat.v1.estimator.ProfilerHook(save_steps=None,save_secs=None,output_dir='',show_dataflow=True,show_memory=False)
tf.compat.v1.estimator.RegressionHead(label_dimension=1,weight_column=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,inverse_link_fn=None,name=None)
tf.compat.v1.estimator.RunConfig(model_dir=None,tf_random_seed=None,save_summary_steps=100,save_checkpoints_steps=_USE_DEFAULT,save_checkpoints_secs=_USE_DEFAULT,session_config=None,keep_checkpoint_max=5,keep_checkpoint_every_n_hours=10000,log_step_count_steps=100,train_distribute=None,device_fn=None,protocol=None,eval_distribute=None,experimental_distribute=None,experimental_max_worker_delay_secs=None,session_creation_timeout_secs=7200,checkpoint_save_graph_def=True)
tf.compat.v1.estimator.SecondOrStepTimer(every_secs=None,every_steps=None)
tf.compat.v1.estimator.SessionRunArgs(fetches,feed_dict=None,options=None)
tf.compat.v1.estimator.SessionRunContext(original_args,session)
tf.compat.v1.estimator.SessionRunValues(results,options,run_metadata)
tf.compat.v1.estimator.StepCounterHook(every_n_steps=100,every_n_secs=None,output_dir=None,summary_writer=None)
tf.compat.v1.estimator.StopAtStepHook(num_steps=None,last_step=None)
tf.compat.v1.estimator.SummarySaverHook(save_steps=None,save_secs=None,output_dir=None,summary_writer=None,scaffold=None,summary_op=None)
tf.compat.v1.estimator.TrainSpec(input_fn,max_steps=None,hooks=None,saving_listeners=None)
tf.compat.v1.estimator.VocabInfo(new_vocab,new_vocab_size,num_oov_buckets,old_vocab,old_vocab_size=-1,backup_initializer=None,axis=0)
tf.compat.v1.estimator.WarmStartSettings(ckpt_to_initialize_from,vars_to_warm_start='.*',var_name_to_vocab_info=None,var_name_to_prev_var_name=None)
tf.compat.v1.estimator.add_metrics(estimator,metric_fn)
tf.compat.v1.estimator.classifier_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.int64,label_default=None,weight_column=None)
tf.compat.v1.estimator.experimental.InMemoryEvaluatorHook(estimator,input_fn,steps=None,hooks=None,name=None,every_n_iter=100)
tf.compat.v1.estimator.experimental.KMeans(num_clusters,model_dir=None,initial_clusters=RANDOM_INIT,distance_metric=SQUARED_EUCLIDEAN_DISTANCE,seed=None,use_mini_batch=True,mini_batch_steps_per_iteration=1,kmeans_plus_plus_num_retries=2,relative_tolerance=None,config=None,feature_columns=None)
tf.compat.v1.estimator.experimental.LinearSDCA(example_id_column,num_loss_partitions=1,num_table_shards=None,symmetric_l1_regularization=0.0,symmetric_l2_regularization=1.0,adaptive=False)
tf.compat.v1.estimator.experimental.build_raw_supervised_input_receiver_fn(features,labels,default_batch_size=None)
tf.compat.v1.estimator.experimental.call_logit_fn(logit_fn,features,mode,params,config)
tf.compat.v1.estimator.experimental.dnn_logit_fn_builder(units,hidden_units,feature_columns,activation_fn,dropout,input_layer_partitioner,batch_norm)
tf.compat.v1.estimator.experimental.linear_logit_fn_builder(units,feature_columns,sparse_combiner='sum')
tf.compat.v1.estimator.experimental.make_early_stopping_hook(estimator,should_stop_fn,run_every_secs=60,run_every_steps=None)
tf.compat.v1.estimator.experimental.make_stop_at_checkpoint_step_hook(estimator,last_step,wait_after_file_check_secs=30)
tf.compat.v1.estimator.experimental.stop_if_higher_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)
tf.compat.v1.estimator.experimental.stop_if_lower_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)
tf.compat.v1.estimator.experimental.stop_if_no_decrease_hook(estimator,metric_name,max_steps_without_decrease,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)
tf.compat.v1.estimator.experimental.stop_if_no_increase_hook(estimator,metric_name,max_steps_without_increase,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)
tf.compat.v1.estimator.export.ClassificationOutput(scores=None,classes=None)
tf.compat.v1.estimator.export.EvalOutput(loss=None,predictions=None,metrics=None)
tf.compat.v1.estimator.export.PredictOutput(outputs)
tf.compat.v1.estimator.export.RegressionOutput(value)
tf.compat.v1.estimator.export.ServingInputReceiver(features,receiver_tensors,receiver_tensors_alternatives=None)
tf.compat.v1.estimator.export.TensorServingInputReceiver(features,receiver_tensors,receiver_tensors_alternatives=None)
tf.compat.v1.estimator.export.build_parsing_serving_input_receiver_fn(feature_spec,default_batch_size=None)
tf.compat.v1.estimator.export.build_raw_serving_input_receiver_fn(features,default_batch_size=None)
tf.compat.v1.estimator.inputs.numpy_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=None,queue_capacity=1000,num_threads=1)
tf.compat.v1.estimator.inputs.pandas_input_fn(x,y=None,batch_size=128,num_epochs=1,shuffle=None,queue_capacity=1000,num_threads=1,target_column='target')
tf.compat.v1.estimator.regressor_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.float32,label_default=None,label_dimension=1,weight_column=None)
tf.compat.v1.estimator.tpu.RunConfig(tpu_config=None,evaluation_master=None,master=None,cluster=None,**kwargs)
tf.compat.v1.estimator.tpu.TPUConfig(iterations_per_loop=2,num_shards=None,num_cores_per_replica=None,per_host_input_for_training=True,tpu_job_name=None,initial_infeed_sleep_secs=None,input_partition_dims=None,eval_training_input_configuration=InputPipelineConfig.PER_HOST_V1,experimental_host_call_every_n_steps=1,experimental_allow_per_host_v2_parallel_get_next=False,experimental_feed_hook=None)
tf.compat.v1.estimator.tpu.TPUEstimator(model_fn=None,model_dir=None,config=None,params=None,use_tpu=True,train_batch_size=None,eval_batch_size=None,predict_batch_size=None,batch_axis=None,eval_on_tpu=True,export_to_tpu=True,export_to_cpu=True,warm_start_from=None,embedding_config_spec=None,export_saved_model_api_version=ExportSavedModelApiVersion.V1)
tf.compat.v1.estimator.tpu.TPUEstimatorSpec(mode,predictions=None,loss=None,train_op=None,eval_metrics=None,export_outputs=None,scaffold_fn=None,host_call=None,training_hooks=None,evaluation_hooks=None,prediction_hooks=None)
tf.compat.v1.estimator.tpu.experimental.EmbeddingConfigSpec(feature_columns=None,optimization_parameters=None,clipping_limit=None,pipeline_execution_with_tensor_core=False,experimental_gradient_multiplier_fn=None,feature_to_config_dict=None,table_to_config_dict=None,partition_strategy='div',profile_data_directory=None)
tf.compat.v1.estimator.train_and_evaluate(estimator,train_spec,eval_spec)
tf.compat.v1.executing_eagerly()
tf.compat.v1.executing_eagerly_outside_functions()
tf.compat.v1.exp(x,name=None)
tf.compat.v1.expand_dims(input,axis=None,name=None,dim=None)
tf.compat.v1.experimental.BatchableExtensionType(*args,**kwargs)
tf.compat.v1.experimental.ExtensionType(*args,**kwargs)
tf.compat.v1.experimental.async_clear_error()
tf.compat.v1.experimental.dispatch_for_api(api,*signatures)
tf.compat.v1.experimental.dispatch_for_binary_elementwise_apis(x_type,y_type)
tf.compat.v1.experimental.dispatch_for_unary_elementwise_apis(x_type)
tf.compat.v1.experimental.output_all_intermediates(state)
tf.compat.v1.experimental.register_filesystem_plugin(plugin_location)
tf.compat.v1.experimental.unregister_dispatch_for(dispatch_target)
tf.compat.v1.expm1(x,name=None)
tf.compat.v1.extract_image_patches(images,ksizes=None,strides=None,rates=None,padding=None,name=None,sizes=None)
tf.compat.v1.extract_volume_patches(input,ksizes,strides,padding,name=None)
tf.compat.v1.eye(num_rows,num_columns=None,batch_shape=None,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.fake_quant_with_min_max_args(inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.fake_quant_with_min_max_args_gradient(gradients,inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.fake_quant_with_min_max_vars(inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.fake_quant_with_min_max_vars_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.fake_quant_with_min_max_vars_per_channel(inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.fake_quant_with_min_max_vars_per_channel_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.feature_column.bucketized_column(source_column,boundaries)
tf.compat.v1.feature_column.categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)
tf.compat.v1.feature_column.categorical_column_with_identity(key,num_buckets,default_value=None)
tf.compat.v1.feature_column.categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,num_oov_buckets=0,default_value=None,dtype=tf.dtypes.string)
tf.compat.v1.feature_column.categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)
tf.compat.v1.feature_column.crossed_column(keys,hash_bucket_size,hash_key=None)
tf.compat.v1.feature_column.embedding_column(categorical_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True,use_safe_embedding_lookup=True)
tf.compat.v1.feature_column.indicator_column(categorical_column)
tf.compat.v1.feature_column.input_layer(features,feature_columns,weight_collections=None,trainable=True,cols_to_vars=None,cols_to_output_tensors=None)
tf.compat.v1.feature_column.linear_model(features,feature_columns,units=1,sparse_combiner='sum',weight_collections=None,trainable=True,cols_to_vars=None)
tf.compat.v1.feature_column.make_parse_example_spec(feature_columns)
tf.compat.v1.feature_column.numeric_column(key,shape=(1,),default_value=None,dtype=tf.dtypes.float32,normalizer_fn=None)
tf.compat.v1.feature_column.sequence_categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)
tf.compat.v1.feature_column.sequence_categorical_column_with_identity(key,num_buckets,default_value=None)
tf.compat.v1.feature_column.sequence_categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,num_oov_buckets=0,default_value=None,dtype=tf.dtypes.string)
tf.compat.v1.feature_column.sequence_categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)
tf.compat.v1.feature_column.sequence_numeric_column(key,shape=(1,),default_value=0.0,dtype=tf.dtypes.float32,normalizer_fn=None)
tf.compat.v1.feature_column.shared_embedding_columns(categorical_columns,dimension,combiner='mean',initializer=None,shared_embedding_collection_name=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True,use_safe_embedding_lookup=True)
tf.compat.v1.feature_column.weighted_categorical_column(categorical_column,weight_feature_key,dtype=tf.dtypes.float32)
tf.compat.v1.fft(input,name=None)
tf.compat.v1.fft2d(input,name=None)
tf.compat.v1.fft3d(input,name=None)
tf.compat.v1.fill(dims,value,name=None)
tf.compat.v1.fingerprint(data,method='farmhash64',name=None)
tf.compat.v1.fixed_size_partitioner(num_shards,axis=0)
tf.compat.v1.flags.BaseListParser(token=None,name=None)
tf.compat.v1.flags.BooleanFlag(name,default,help,short_name=None,**args)
tf.compat.v1.flags.CsvListSerializer(list_sep)
tf.compat.v1.flags.DEFINE(parser,name,default,help,flag_values=_flagvalues.FLAGS,serializer=None,module_name=None,required=False,**args)
tf.compat.v1.flags.DEFINE_alias(name,original_name,flag_values=_flagvalues.FLAGS,module_name=None)
tf.compat.v1.flags.DEFINE_bool(name,default,help,flag_values=_flagvalues.FLAGS,module_name=None,required=False,**args)
tf.compat.v1.flags.DEFINE_boolean(name,default,help,flag_values=_flagvalues.FLAGS,module_name=None,required=False,**args)
tf.compat.v1.flags.DEFINE_enum(name,default,enum_values,help,flag_values=_flagvalues.FLAGS,module_name=None,required=False,**args)
tf.compat.v1.flags.DEFINE_enum_class(name,default,enum_class,help,flag_values=_flagvalues.FLAGS,module_name=None,case_sensitive=False,required=False,**args)
tf.compat.v1.flags.DEFINE_flag(flag,flag_values=_flagvalues.FLAGS,module_name=None,required=False)
tf.compat.v1.flags.DEFINE_float(name,default,help,lower_bound=None,upper_bound=None,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.flags.DEFINE_integer(name,default,help,lower_bound=None,upper_bound=None,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.flags.DEFINE_list(name,default,help,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.flags.DEFINE_multi(parser,serializer,name,default,help,flag_values=_flagvalues.FLAGS,module_name=None,required=False,**args)
tf.compat.v1.flags.DEFINE_multi_enum(name,default,enum_values,help,flag_values=_flagvalues.FLAGS,case_sensitive=True,required=False,**args)
tf.compat.v1.flags.DEFINE_multi_enum_class(name,default,enum_class,help,flag_values=_flagvalues.FLAGS,module_name=None,case_sensitive=False,required=False,**args)
tf.compat.v1.flags.DEFINE_multi_float(name,default,help,lower_bound=None,upper_bound=None,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.flags.DEFINE_multi_integer(name,default,help,lower_bound=None,upper_bound=None,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.flags.DEFINE_multi_string(name,default,help,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.flags.DEFINE_spaceseplist(name,default,help,comma_compat=False,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.flags.DEFINE_string(name,default,help,flag_values=_flagvalues.FLAGS,required=False,**args)
tf.compat.v1.flags.EnumClassFlag(name,default,help,enum_class,short_name=None,case_sensitive=False,**args)
tf.compat.v1.flags.EnumClassListSerializer(list_sep,**kwargs)
tf.compat.v1.flags.EnumClassParser(enum_class,case_sensitive=True)
tf.compat.v1.flags.EnumClassSerializer(lowercase)
tf.compat.v1.flags.EnumFlag(name,default,help,enum_values,short_name=None,case_sensitive=True,**args)
tf.compat.v1.flags.EnumParser(enum_values,case_sensitive=True)
tf.compat.v1.flags.FLAGS(*args,**kwargs)
tf.compat.v1.flags.Flag(parser,serializer,name,default,help_string,short_name=None,boolean=False,allow_override=False,allow_override_cpp=False,allow_hide_cpp=False,allow_overwrite=True,allow_using_method_names=False)
tf.compat.v1.flags.FlagHolder(flag_values,flag,ensure_non_none_value=False)
tf.compat.v1.flags.FlagValues()
tf.compat.v1.flags.FloatParser(lower_bound=None,upper_bound=None)
tf.compat.v1.flags.IntegerParser(lower_bound=None,upper_bound=None)
tf.compat.v1.flags.ListParser()
tf.compat.v1.flags.ListSerializer(list_sep)
tf.compat.v1.flags.MultiEnumClassFlag(name,default,help_string,enum_class,case_sensitive=False,**args)
tf.compat.v1.flags.MultiFlag(*args,**kwargs)
tf.compat.v1.flags.UnrecognizedFlagError(flagname,flagvalue='',suggestions=None)
tf.compat.v1.flags.WhitespaceSeparatedListParser(comma_compat=False)
tf.compat.v1.flags.adopt_module_key_flags(module,flag_values=_flagvalues.FLAGS)
tf.compat.v1.flags.declare_key_flag(flag_name,flag_values=_flagvalues.FLAGS)
tf.compat.v1.flags.disclaim_key_flags()
tf.compat.v1.flags.doc_to_help(doc)
tf.compat.v1.flags.flag_dict_to_args(flag_map,multi_flags=None)
tf.compat.v1.flags.get_help_width()
tf.compat.v1.flags.mark_bool_flags_as_mutual_exclusive(flag_names,required=False,flag_values=_flagvalues.FLAGS)
tf.compat.v1.flags.mark_flag_as_required(flag_name,flag_values=_flagvalues.FLAGS)
tf.compat.v1.flags.mark_flags_as_mutual_exclusive(flag_names,required=False,flag_values=_flagvalues.FLAGS)
tf.compat.v1.flags.mark_flags_as_required(flag_names,flag_values=_flagvalues.FLAGS)
tf.compat.v1.flags.multi_flags_validator(flag_names,message='Flagvalidationfailed',flag_values=_flagvalues.FLAGS)
tf.compat.v1.flags.register_multi_flags_validator(flag_names,multi_flags_checker,message='Flagsvalidationfailed',flag_values=_flagvalues.FLAGS)
tf.compat.v1.flags.register_validator(flag_name,checker,message='Flagvalidationfailed',flag_values=_flagvalues.FLAGS)
tf.compat.v1.flags.text_wrap(text,length=None,indent='',firstline_indent=None)
tf.compat.v1.flags.validator(flag_name,message='Flagvalidationfailed',flag_values=_flagvalues.FLAGS)
tf.compat.v1.floor(x,name=None)
tf.compat.v1.floor_div(x,y,name=None)
tf.compat.v1.floordiv(x,y,name=None)
tf.compat.v1.floormod(x,y,name=None)
tf.compat.v1.foldl(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)
tf.compat.v1.foldr(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)
tf.compat.v1.function(func=None,input_signature=None,autograph=True,jit_compile=None,experimental_implements=None,experimental_autograph_options=None,experimental_relax_shapes=False,experimental_compile=None,experimental_follow_type_hints=None)->tf.types.experimental.GenericFunctiontf.types.experimental.GenericFunction
tf.compat.v1.gather(params,indices,validate_indices=None,name=None,axis=None,batch_dims=0)
tf.compat.v1.gather_nd(params,indices,name=None,batch_dims=0)
tf.compat.v1.get_collection(key,scope=None)
tf.compat.v1.get_collection_ref(key)
tf.compat.v1.get_default_graph()
tf.compat.v1.get_default_session()
tf.compat.v1.get_local_variable(name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=False,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None,custom_getter=None,constraint=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.compat.v1.VariableAggregation.NONE)
tf.compat.v1.get_logger()
tf.compat.v1.get_seed(op_seed)
tf.compat.v1.get_session_handle(data,name=None)
tf.compat.v1.get_session_tensor(handle,dtype,name=None)
tf.compat.v1.get_static_value(tensor,partial=False)
tf.compat.v1.get_variable(name,shape=None,dtype=None,initializer=None,regularizer=None,trainable=None,collections=None,caching_device=None,partitioner=None,validate_shape=True,use_resource=None,custom_getter=None,constraint=None,synchronization=tf.VariableSynchronization.AUTO,aggregation=tf.compat.v1.VariableAggregation.NONE)
tf.compat.v1.get_variable_scope()
tf.compat.v1.gfile.Copy(oldpath,newpath,overwrite=False)
tf.compat.v1.gfile.DeleteRecursively(dirname)
tf.compat.v1.gfile.Exists(filename)
tf.compat.v1.gfile.FastGFile(name,mode='r')
tf.compat.v1.gfile.GFile(name,mode='r')
tf.compat.v1.gfile.Glob(filename)
tf.compat.v1.gfile.IsDirectory(dirname)
tf.compat.v1.gfile.ListDirectory(dirname)
tf.compat.v1.gfile.MakeDirs(dirname)
tf.compat.v1.gfile.MkDir(dirname)
tf.compat.v1.gfile.Open(name,mode='r')
tf.compat.v1.gfile.Remove(filename)
tf.compat.v1.gfile.Rename(oldname,newname,overwrite=False)
tf.compat.v1.gfile.Stat(filename)
tf.compat.v1.gfile.Walk(top,in_order=True)
tf.compat.v1.global_norm(t_list,name=None)
tf.compat.v1.global_variables(scope=None)
tf.compat.v1.global_variables_initializer()
tf.compat.v1.glorot_normal_initializer(seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.glorot_uniform_initializer(seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.grad_pass_through(f)
tf.compat.v1.gradients(ys,xs,grad_ys=None,name='gradients',colocate_gradients_with_ops=False,gate_gradients=False,aggregation_method=None,stop_gradients=None,unconnected_gradients=tf.UnconnectedGradients.NONE)
tf.compat.v1.graph_util.convert_variables_to_constants(sess,input_graph_def,output_node_names,variable_names_whitelist=None,variable_names_blacklist=None)
tf.compat.v1.graph_util.extract_sub_graph(graph_def,dest_nodes)
tf.compat.v1.graph_util.import_graph_def(graph_def,input_map=None,return_elements=None,name=None,op_dict=None,producer_op_list=None)
tf.compat.v1.graph_util.must_run_on_cpu(node,pin_variables_on_cpu=False)
tf.compat.v1.graph_util.remove_training_nodes(input_graph,protected_nodes=None)
tf.compat.v1.graph_util.tensor_shape_from_node_def_name(graph,input_name)
tf.compat.v1.greater(x,y,name=None)
tf.compat.v1.greater_equal(x,y,name=None)
tf.compat.v1.group(*inputs,**kwargs)
tf.compat.v1.guarantee_const(input,name=None)
tf.compat.v1.hessians(ys,xs,name='hessians',colocate_gradients_with_ops=False,gate_gradients=False,aggregation_method=None)
tf.compat.v1.histogram_fixed_width(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)
tf.compat.v1.histogram_fixed_width_bins(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)
tf.compat.v1.identity(input,name=None)
tf.compat.v1.identity_n(input,name=None)
tf.compat.v1.ifft(input,name=None)
tf.compat.v1.ifft2d(input,name=None)
tf.compat.v1.ifft3d(input,name=None)
tf.compat.v1.igamma(a,x,name=None)
tf.compat.v1.igammac(a,x,name=None)
tf.compat.v1.imag(input,name=None)
tf.compat.v1.image.adjust_brightness(image,delta)
tf.compat.v1.image.adjust_contrast(images,contrast_factor)
tf.compat.v1.image.adjust_gamma(image,gamma=1,gain=1)
tf.compat.v1.image.adjust_hue(image,delta,name=None)
tf.compat.v1.image.adjust_jpeg_quality(image,jpeg_quality,name=None)
tf.compat.v1.image.adjust_saturation(image,saturation_factor,name=None)
tf.compat.v1.image.central_crop(image,central_fraction)
tf.compat.v1.image.combined_non_max_suppression(boxes,scores,max_output_size_per_class,max_total_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_per_class=False,clip_boxes=True,name=None)
tf.compat.v1.image.convert_image_dtype(image,dtype,saturate=False,name=None)
tf.compat.v1.image.crop_and_resize(image,boxes,box_ind=None,crop_size=None,method='bilinear',extrapolation_value=0,name=None,box_indices=None)
tf.compat.v1.image.crop_to_bounding_box(image,offset_height,offset_width,target_height,target_width)
tf.compat.v1.image.decode_and_crop_jpeg(contents,crop_window,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)
tf.compat.v1.image.decode_bmp(contents,channels=0,name=None)
tf.compat.v1.image.decode_gif(contents,name=None)
tf.compat.v1.image.decode_image(contents,channels=None,dtype=tf.dtypes.uint8,name=None,expand_animations=True)
tf.compat.v1.image.decode_jpeg(contents,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)
tf.compat.v1.image.decode_png(contents,channels=0,dtype=tf.dtypes.uint8,name=None)
tf.compat.v1.image.draw_bounding_boxes(images,boxes,name=None,colors=None)
tf.compat.v1.image.encode_jpeg(image,format='',quality=95,progressive=False,optimize_size=False,chroma_downsampling=True,density_unit='in',x_density=300,y_density=300,xmp_metadata='',name=None)
tf.compat.v1.image.encode_png(image,compression=-1,name=None)
tf.compat.v1.image.extract_glimpse(input,size,offsets,centered=True,normalized=True,uniform_noise=True,name=None)
tf.compat.v1.image.extract_image_patches(images,ksizes=None,strides=None,rates=None,padding=None,name=None,sizes=None)
tf.compat.v1.image.extract_jpeg_shape(contents,output_type=tf.dtypes.int32,name=None)
tf.compat.v1.image.extract_patches(images,sizes,strides,rates,padding,name=None)
tf.compat.v1.image.flip_left_right(image)
tf.compat.v1.image.flip_up_down(image)
tf.compat.v1.image.generate_bounding_box_proposals(scores,bbox_deltas,image_info,anchors,nms_threshold=0.7,pre_nms_topn=6000,min_size=16,post_nms_topn=300,name=None)
tf.compat.v1.image.grayscale_to_rgb(images,name=None)
tf.compat.v1.image.hsv_to_rgb(images,name=None)
tf.compat.v1.image.image_gradients(image)
tf.compat.v1.image.is_jpeg(contents,name=None)
tf.compat.v1.image.non_max_suppression(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),name=None)
tf.compat.v1.image.non_max_suppression_overlaps(overlaps,scores,max_output_size,overlap_threshold=0.5,score_threshold=float('-inf'),name=None)
tf.compat.v1.image.non_max_suppression_padded(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_to_max_output_size=False,name=None,sorted_input=False,canonicalized_coordinates=False,tile_size=512)
tf.compat.v1.image.non_max_suppression_with_scores(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),soft_nms_sigma=0.0,name=None)
tf.compat.v1.image.pad_to_bounding_box(image,offset_height,offset_width,target_height,target_width)
tf.compat.v1.image.per_image_standardization(image)
tf.compat.v1.image.psnr(a,b,max_val,name=None)
tf.compat.v1.image.random_brightness(image,max_delta,seed=None)
tf.compat.v1.image.random_contrast(image,lower,upper,seed=None)
tf.compat.v1.image.random_crop(value,size,seed=None,name=None)
tf.compat.v1.image.random_flip_left_right(image,seed=None)
tf.compat.v1.image.random_flip_up_down(image,seed=None)
tf.compat.v1.image.random_hue(image,max_delta,seed=None)
tf.compat.v1.image.random_jpeg_quality(image,min_jpeg_quality,max_jpeg_quality,seed=None)
tf.compat.v1.image.random_saturation(image,lower,upper,seed=None)
tf.compat.v1.image.resize(images,size,method=ResizeMethodV1.BILINEAR,align_corners=False,preserve_aspect_ratio=False,name=None)
tf.compat.v1.image.resize_area(images,size,align_corners=False,name=None)
tf.compat.v1.image.resize_bicubic(images,size,align_corners=False,name=None,half_pixel_centers=False)
tf.compat.v1.image.resize_bilinear(images,size,align_corners=False,name=None,half_pixel_centers=False)
tf.compat.v1.image.resize_image_with_crop_or_pad(image,target_height,target_width)
tf.compat.v1.image.resize_image_with_pad(image,target_height,target_width,method=ResizeMethodV1.BILINEAR,align_corners=False)
tf.compat.v1.image.resize_images(images,size,method=ResizeMethodV1.BILINEAR,align_corners=False,preserve_aspect_ratio=False,name=None)
tf.compat.v1.image.resize_nearest_neighbor(images,size,align_corners=False,name=None,half_pixel_centers=False)
tf.compat.v1.image.resize_with_crop_or_pad(image,target_height,target_width)
tf.compat.v1.image.rgb_to_grayscale(images,name=None)
tf.compat.v1.image.rgb_to_hsv(images,name=None)
tf.compat.v1.image.rgb_to_yiq(images)
tf.compat.v1.image.rgb_to_yuv(images)
tf.compat.v1.image.rot90(image,k=1,name=None)
tf.compat.v1.image.sample_distorted_bounding_box(image_size,bounding_boxes,seed=None,seed2=None,min_object_covered=0.1,aspect_ratio_range=None,area_range=None,max_attempts=None,use_image_if_no_bounding_boxes=None,name=None)
tf.compat.v1.image.sobel_edges(image)
tf.compat.v1.image.ssim(img1,img2,max_val,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)
tf.compat.v1.image.ssim_multiscale(img1,img2,max_val,power_factors=_MSSSIM_WEIGHTS,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)
tf.compat.v1.image.total_variation(images,name=None)
tf.compat.v1.image.transpose(image,name=None)
tf.compat.v1.image.transpose_image(image,name=None)
tf.compat.v1.image.yiq_to_rgb(images)
tf.compat.v1.image.yuv_to_rgb(images)
tf.compat.v1.import_graph_def(graph_def,input_map=None,return_elements=None,name=None,op_dict=None,producer_op_list=None)
tf.compat.v1.initialize_all_tables(name='init_all_tables')
tf.compat.v1.initialize_all_variables()
tf.compat.v1.initialize_local_variables()
tf.compat.v1.initialize_variables(var_list,name='init')
tf.compat.v1.initializers.constant(value=0,dtype=tf.dtypes.float32,verify_shape=False)
tf.compat.v1.initializers.global_variables()
tf.compat.v1.initializers.glorot_normal(seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.initializers.glorot_uniform(seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.initializers.he_normal(seed=None)
tf.compat.v1.initializers.he_uniform(seed=None)
tf.compat.v1.initializers.identity(gain=1.0,dtype=tf.dtypes.float32)
tf.compat.v1.initializers.lecun_normal(seed=None)
tf.compat.v1.initializers.lecun_uniform(seed=None)
tf.compat.v1.initializers.local_variables()
tf.compat.v1.initializers.ones(dtype=tf.dtypes.float32)
tf.compat.v1.initializers.orthogonal(gain=1.0,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.initializers.random_normal(mean=0.0,stddev=1.0,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.initializers.random_uniform(minval=0.0,maxval=None,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.initializers.tables_initializer(name='init_all_tables')
tf.compat.v1.initializers.truncated_normal(mean=0.0,stddev=1.0,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.initializers.uniform_unit_scaling(factor=1.0,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.initializers.variables(var_list,name='init')
tf.compat.v1.initializers.variance_scaling(scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.initializers.zeros(dtype=tf.dtypes.float32)
tf.compat.v1.invert_permutation(x,name=None)
tf.compat.v1.io.FixedLenFeature(shape,dtype,default_value=None)
tf.compat.v1.io.FixedLenSequenceFeature(shape,dtype,allow_missing=False,default_value=None)
tf.compat.v1.io.PaddingFIFOQueue(capacity,dtypes,shapes,names=None,shared_name=None,name='padding_fifo_queue')
tf.compat.v1.io.PriorityQueue(capacity,types,shapes=None,names=None,shared_name=None,name='priority_queue')
tf.compat.v1.io.QueueBase(dtypes,shapes,names,queue_ref)
tf.compat.v1.io.RaggedFeature(dtype,value_key=None,partitions=(),row_splits_dtype=tf.dtypes.int32,validate=False)
tf.compat.v1.io.RaggedFeature.RowLengths(key)
tf.compat.v1.io.RaggedFeature.RowLimits(key)
tf.compat.v1.io.RaggedFeature.RowSplits(key)
tf.compat.v1.io.RaggedFeature.RowStarts(key)
tf.compat.v1.io.RaggedFeature.UniformRowLength(length)
tf.compat.v1.io.RaggedFeature.ValueRowIds(key)
tf.compat.v1.io.RandomShuffleQueue(capacity,min_after_dequeue,dtypes,shapes=None,names=None,seed=None,shared_name=None,name='random_shuffle_queue')
tf.compat.v1.io.SparseFeature(index_key,value_key,dtype,size,already_sorted=False)
tf.compat.v1.io.TFRecordOptions(compression_type=None,flush_mode=None,input_buffer_size=None,output_buffer_size=None,window_bits=None,compression_level=None,compression_method=None,mem_level=None,compression_strategy=None)
tf.compat.v1.io.TFRecordWriter(path,options=None)
tf.compat.v1.io.VarLenFeature(dtype)
tf.compat.v1.io.decode_and_crop_jpeg(contents,crop_window,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)
tf.compat.v1.io.decode_base64(input,name=None)
tf.compat.v1.io.decode_bmp(contents,channels=0,name=None)
tf.compat.v1.io.decode_compressed(bytes,compression_type='',name=None)
tf.compat.v1.io.decode_csv(records,record_defaults,field_delim=',',use_quote_delim=True,name=None,na_value='',select_cols=None)
tf.compat.v1.io.decode_gif(contents,name=None)
tf.compat.v1.io.decode_image(contents,channels=None,dtype=tf.dtypes.uint8,name=None,expand_animations=True)
tf.compat.v1.io.decode_jpeg(contents,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)
tf.compat.v1.io.decode_json_example(json_examples,name=None)
tf.compat.v1.io.decode_png(contents,channels=0,dtype=tf.dtypes.uint8,name=None)
tf.compat.v1.io.decode_proto(bytes,message_type,field_names,output_types,descriptor_source='local://',message_format='binary',sanitize=False,name=None)
tf.compat.v1.io.decode_raw(input_bytes=None,out_type=None,little_endian=True,name=None,bytes=None)
tf.compat.v1.io.deserialize_many_sparse(serialized_sparse,dtype,rank=None,name=None)
tf.compat.v1.io.encode_base64(input,pad=False,name=None)
tf.compat.v1.io.encode_jpeg(image,format='',quality=95,progressive=False,optimize_size=False,chroma_downsampling=True,density_unit='in',x_density=300,y_density=300,xmp_metadata='',name=None)
tf.compat.v1.io.encode_png(image,compression=-1,name=None)
tf.compat.v1.io.encode_proto(sizes,values,field_names,message_type,descriptor_source='local://',name=None)
tf.compat.v1.io.extract_jpeg_shape(contents,output_type=tf.dtypes.int32,name=None)
tf.compat.v1.io.gfile.GFile(name,mode='r')
tf.compat.v1.io.gfile.copy(src,dst,overwrite=False)
tf.compat.v1.io.gfile.exists(path)
tf.compat.v1.io.gfile.glob(pattern)
tf.compat.v1.io.gfile.isdir(path)
tf.compat.v1.io.gfile.join(path,*paths)
tf.compat.v1.io.gfile.listdir(path)
tf.compat.v1.io.gfile.makedirs(path)
tf.compat.v1.io.gfile.mkdir(path)
tf.compat.v1.io.gfile.remove(path)
tf.compat.v1.io.gfile.rename(src,dst,overwrite=False)
tf.compat.v1.io.gfile.rmtree(path)
tf.compat.v1.io.gfile.stat(path)
tf.compat.v1.io.gfile.walk(top,topdown=True,onerror=None)
tf.compat.v1.io.is_jpeg(contents,name=None)
tf.compat.v1.io.match_filenames_once(pattern,name=None)
tf.compat.v1.io.matching_files(pattern,name=None)
tf.compat.v1.io.parse_example(serialized,features,name=None,example_names=None)
tf.compat.v1.io.parse_sequence_example(serialized,context_features=None,sequence_features=None,example_names=None,name=None)
tf.compat.v1.io.parse_single_example(serialized,features,name=None,example_names=None)
tf.compat.v1.io.parse_single_sequence_example(serialized,context_features=None,sequence_features=None,example_name=None,name=None)
tf.compat.v1.io.parse_tensor(serialized,out_type,name=None)
tf.compat.v1.io.read_file(filename,name=None)
tf.compat.v1.io.serialize_many_sparse(sp_input,name=None,out_type=tf.dtypes.string)
tf.compat.v1.io.serialize_sparse(sp_input,name=None,out_type=tf.dtypes.string)
tf.compat.v1.io.serialize_tensor(tensor,name=None)
tf.compat.v1.io.write_file(filename,contents,name=None)
tf.compat.v1.io.write_graph(graph_or_graph_def,logdir,name,as_text=True)
tf.compat.v1.is_finite(x,name=None)
tf.compat.v1.is_inf(x,name=None)
tf.compat.v1.is_nan(x,name=None)
tf.compat.v1.is_non_decreasing(x,name=None)
tf.compat.v1.is_numeric_tensor(tensor)
tf.compat.v1.is_strictly_increasing(x,name=None)
tf.compat.v1.is_tensor(x)
tf.compat.v1.is_variable_initialized(variable)
tf.compat.v1.keras.Input(shape=None,batch_size=None,name=None,dtype=None,sparse=None,tensor=None,ragged=None,type_spec=None,**kwargs)
tf.compat.v1.keras.Model(*args,**kwargs)
tf.compat.v1.keras.Sequential(layers=None,name=None)
tf.compat.v1.keras.activations.deserialize(name,custom_objects=None)
tf.compat.v1.keras.activations.elu(x,alpha=1.0)
tf.compat.v1.keras.activations.exponential(x)
tf.compat.v1.keras.activations.get(identifier)
tf.compat.v1.keras.activations.hard_sigmoid(x)
tf.compat.v1.keras.activations.linear(x)
tf.compat.v1.keras.activations.relu(x,alpha=0.0,max_value=None,threshold=0.0)
tf.compat.v1.keras.activations.selu(x)
tf.compat.v1.keras.activations.serialize(activation)
tf.compat.v1.keras.activations.sigmoid(x)
tf.compat.v1.keras.activations.softmax(x,axis=-1)
tf.compat.v1.keras.activations.softplus(x)
tf.compat.v1.keras.activations.softsign(x)
tf.compat.v1.keras.activations.swish(x)
tf.compat.v1.keras.activations.tanh(x)
tf.compat.v1.keras.applications.DenseNet121(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.compat.v1.keras.applications.DenseNet169(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.compat.v1.keras.applications.DenseNet201(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.compat.v1.keras.applications.EfficientNetB0(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.EfficientNetB1(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.EfficientNetB2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.EfficientNetB3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.EfficientNetB4(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.EfficientNetB5(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.EfficientNetB6(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.EfficientNetB7(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.InceptionResNetV2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.InceptionV3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.MobileNet(input_shape=None,alpha=1.0,depth_multiplier=1,dropout=0.001,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.MobileNetV2(input_shape=None,alpha=1.0,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.MobileNetV3Large(input_shape=None,alpha=1.0,minimalistic=False,include_top=True,weights='imagenet',input_tensor=None,classes=1000,pooling=None,dropout_rate=0.2,classifier_activation='softmax',include_preprocessing=True)
tf.compat.v1.keras.applications.MobileNetV3Small(input_shape=None,alpha=1.0,minimalistic=False,include_top=True,weights='imagenet',input_tensor=None,classes=1000,pooling=None,dropout_rate=0.2,classifier_activation='softmax',include_preprocessing=True)
tf.compat.v1.keras.applications.NASNetLarge(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
tf.compat.v1.keras.applications.NASNetMobile(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
tf.compat.v1.keras.applications.ResNet101(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.compat.v1.keras.applications.ResNet101V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.ResNet152(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.compat.v1.keras.applications.ResNet152V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.ResNet50(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.compat.v1.keras.applications.ResNet50V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.VGG16(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.VGG19(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.Xception(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.densenet.DenseNet121(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.compat.v1.keras.applications.densenet.DenseNet169(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.compat.v1.keras.applications.densenet.DenseNet201(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.compat.v1.keras.applications.densenet.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.densenet.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.efficientnet.EfficientNetB0(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.efficientnet.EfficientNetB1(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.efficientnet.EfficientNetB2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.efficientnet.EfficientNetB3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.efficientnet.EfficientNetB4(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.efficientnet.EfficientNetB5(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.efficientnet.EfficientNetB6(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.efficientnet.EfficientNetB7(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.efficientnet.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.efficientnet.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.imagenet_utils.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.imagenet_utils.preprocess_input(x,data_format=None,mode='caffe')
tf.compat.v1.keras.applications.inception_resnet_v2.InceptionResNetV2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.inception_resnet_v2.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.inception_resnet_v2.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.inception_v3.InceptionV3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.inception_v3.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.inception_v3.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.mobilenet.MobileNet(input_shape=None,alpha=1.0,depth_multiplier=1,dropout=0.001,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.mobilenet.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.mobilenet.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.mobilenet_v2.MobileNetV2(input_shape=None,alpha=1.0,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.compat.v1.keras.applications.mobilenet_v2.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.mobilenet_v2.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.mobilenet_v3.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.mobilenet_v3.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.nasnet.NASNetLarge(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
tf.compat.v1.keras.applications.nasnet.NASNetMobile(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
tf.compat.v1.keras.applications.nasnet.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.nasnet.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.resnet.ResNet101(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.compat.v1.keras.applications.resnet.ResNet152(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.compat.v1.keras.applications.resnet.ResNet50(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.compat.v1.keras.applications.resnet.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.resnet.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.resnet50.ResNet50(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.compat.v1.keras.applications.resnet50.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.resnet50.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.resnet_v2.ResNet101V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.resnet_v2.ResNet152V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.resnet_v2.ResNet50V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.resnet_v2.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.resnet_v2.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.vgg16.VGG16(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.vgg16.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.vgg16.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.vgg19.VGG19(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.vgg19.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.vgg19.preprocess_input(x,data_format=None)
tf.compat.v1.keras.applications.xception.Xception(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.compat.v1.keras.applications.xception.decode_predictions(preds,top=5)
tf.compat.v1.keras.applications.xception.preprocess_input(x,data_format=None)
tf.compat.v1.keras.backend.clear_session()
tf.compat.v1.keras.backend.epsilon()
tf.compat.v1.keras.backend.floatx()
tf.compat.v1.keras.backend.get_session(op_input_list=())
tf.compat.v1.keras.backend.get_uid(prefix='')
tf.compat.v1.keras.backend.image_data_format()
tf.compat.v1.keras.backend.is_keras_tensor(x)
tf.compat.v1.keras.backend.name_scope(name,default_name=None,values=None)
tf.compat.v1.keras.backend.reset_uids()
tf.compat.v1.keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False)
tf.compat.v1.keras.backend.set_epsilon(value)
tf.compat.v1.keras.backend.set_floatx(value)
tf.compat.v1.keras.backend.set_image_data_format(data_format)
tf.compat.v1.keras.backend.set_session(session)
tf.compat.v1.keras.callbacks.BaseLogger(stateful_metrics=None)
tf.compat.v1.keras.callbacks.CSVLogger(filename,separator=',',append=False)
tf.compat.v1.keras.callbacks.Callback()
tf.compat.v1.keras.callbacks.CallbackList(callbacks=None,add_history=False,add_progbar=False,model=None,**params)
tf.compat.v1.keras.callbacks.EarlyStopping(monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False)
tf.compat.v1.keras.callbacks.History()
tf.compat.v1.keras.callbacks.LambdaCallback(on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
tf.compat.v1.keras.callbacks.LearningRateScheduler(schedule,verbose=0)
tf.compat.v1.keras.callbacks.ModelCheckpoint(filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',save_freq='epoch',options=None,**kwargs)
tf.compat.v1.keras.callbacks.ProgbarLogger(count_mode='samples',stateful_metrics=None)
tf.compat.v1.keras.callbacks.ReduceLROnPlateau(monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0,**kwargs)
tf.compat.v1.keras.callbacks.RemoteMonitor(root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)
tf.compat.v1.keras.callbacks.TensorBoard(log_dir='./logs',histogram_freq=0,batch_size=32,write_graph=True,write_grads=False,write_images=False,embeddings_freq=0,embeddings_layer_names=None,embeddings_metadata=None,embeddings_data=None,update_freq='epoch',profile_batch=2)
tf.compat.v1.keras.callbacks.TerminateOnNaN()
tf.compat.v1.keras.constraints.MaxNorm(max_value=2,axis=0)
tf.compat.v1.keras.constraints.MinMaxNorm(min_value=0.0,max_value=1.0,rate=1.0,axis=0)
tf.compat.v1.keras.constraints.UnitNorm(axis=0)
tf.compat.v1.keras.constraints.deserialize(config,custom_objects=None)
tf.compat.v1.keras.constraints.get(identifier)
tf.compat.v1.keras.constraints.max_norm(max_value=2,axis=0)
tf.compat.v1.keras.constraints.min_max_norm(min_value=0.0,max_value=1.0,rate=1.0,axis=0)
tf.compat.v1.keras.constraints.serialize(constraint)
tf.compat.v1.keras.constraints.unit_norm(axis=0)
tf.compat.v1.keras.datasets.boston_housing.load_data(path='boston_housing.npz',test_split=0.2,seed=113)
tf.compat.v1.keras.datasets.cifar10.load_data()
tf.compat.v1.keras.datasets.cifar100.load_data(label_mode='fine')
tf.compat.v1.keras.datasets.fashion_mnist.load_data()
tf.compat.v1.keras.datasets.imdb.get_word_index(path='imdb_word_index.json')
tf.compat.v1.keras.datasets.imdb.load_data(path='imdb.npz',num_words=None,skip_top=0,maxlen=None,seed=113,start_char=1,oov_char=2,index_from=3,**kwargs)
tf.compat.v1.keras.datasets.mnist.load_data(path='mnist.npz')
tf.compat.v1.keras.datasets.reuters.get_word_index(path='reuters_word_index.json')
tf.compat.v1.keras.datasets.reuters.load_data(path='reuters.npz',num_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3,**kwargs)
tf.compat.v1.keras.estimator.model_to_estimator(keras_model=None,keras_model_path=None,custom_objects=None,model_dir=None,config=None,checkpoint_format='saver',metric_names_map=None,export_outputs=None)
tf.compat.v1.keras.experimental.CosineDecay(initial_learning_rate,decay_steps,alpha=0.0,name=None)
tf.compat.v1.keras.experimental.CosineDecayRestarts(initial_learning_rate,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name=None)
tf.compat.v1.keras.experimental.LinearModel(units=1,activation=None,use_bias=True,kernel_initializer='zeros',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,**kwargs)
tf.compat.v1.keras.experimental.PeepholeLSTMCell(units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.compat.v1.keras.experimental.SequenceFeatures(feature_columns,trainable=True,name=None,**kwargs)
tf.compat.v1.keras.experimental.WideDeepModel(linear_model,dnn_model,activation=None,**kwargs)
tf.compat.v1.keras.experimental.export_saved_model(model,saved_model_path,custom_objects=None,as_text=False,input_signature=None,serving_only=False)
tf.compat.v1.keras.experimental.load_from_saved_model(saved_model_path,custom_objects=None)
tf.compat.v1.keras.initializers.Constant(value=0,dtype=tf.dtypes.float32,verify_shape=False)
tf.compat.v1.keras.initializers.Identity(gain=1.0,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.Ones(dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.Orthogonal(gain=1.0,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.RandomNormal(mean=0.0,stddev=0.05,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.RandomUniform(minval=-0.05,maxval=0.05,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.TruncatedNormal(mean=0.0,stddev=0.05,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.VarianceScaling(scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.Zeros(dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.constant(value=0,dtype=tf.dtypes.float32,verify_shape=False)
tf.compat.v1.keras.initializers.deserialize(config,custom_objects=None)
tf.compat.v1.keras.initializers.get(identifier)
tf.compat.v1.keras.initializers.glorot_normal(seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.glorot_uniform(seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.he_normal(seed=None)
tf.compat.v1.keras.initializers.he_uniform(seed=None)
tf.compat.v1.keras.initializers.identity(gain=1.0,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.lecun_normal(seed=None)
tf.compat.v1.keras.initializers.lecun_uniform(seed=None)
tf.compat.v1.keras.initializers.normal(mean=0.0,stddev=0.05,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.ones(dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.orthogonal(gain=1.0,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.random_normal(mean=0.0,stddev=0.05,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.random_uniform(minval=-0.05,maxval=0.05,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.serialize(initializer)
tf.compat.v1.keras.initializers.truncated_normal(mean=0.0,stddev=0.05,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.uniform(minval=-0.05,maxval=0.05,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.keras.initializers.zeros(dtype=tf.dtypes.float32)
tf.compat.v1.keras.layers.AbstractRNNCell(trainable=True,name=None,dtype=None,dynamic=False,**kwargs)
tf.compat.v1.keras.layers.Activation(activation,**kwargs)
tf.compat.v1.keras.layers.ActivityRegularization(l1=0.0,l2=0.0,**kwargs)
tf.compat.v1.keras.layers.Add(**kwargs)
tf.compat.v1.keras.layers.AdditiveAttention(use_scale=True,**kwargs)
tf.compat.v1.keras.layers.AlphaDropout(rate,noise_shape=None,seed=None,**kwargs)
tf.compat.v1.keras.layers.Attention(use_scale=False,**kwargs)
tf.compat.v1.keras.layers.Average(**kwargs)
tf.compat.v1.keras.layers.AveragePooling1D(pool_size=2,strides=None,padding='valid',data_format='channels_last',**kwargs)
tf.compat.v1.keras.layers.AveragePooling2D(pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.compat.v1.keras.layers.AveragePooling3D(pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.compat.v1.keras.layers.AvgPool1D(pool_size=2,strides=None,padding='valid',data_format='channels_last',**kwargs)
tf.compat.v1.keras.layers.AvgPool2D(pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.compat.v1.keras.layers.AvgPool3D(pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.compat.v1.keras.layers.BatchNormalization(axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,renorm=False,renorm_clipping=None,renorm_momentum=0.99,fused=None,trainable=True,virtual_batch_size=None,adjustment=None,name=None,**kwargs)
tf.compat.v1.keras.layers.Bidirectional(layer,merge_mode='concat',weights=None,backward_layer=None,**kwargs)
tf.compat.v1.keras.layers.CategoryEncoding(num_tokens=None,output_mode='multi_hot',sparse=False,**kwargs)
tf.compat.v1.keras.layers.CenterCrop(height,width,**kwargs)
tf.compat.v1.keras.layers.Concatenate(axis=-1,**kwargs)
tf.compat.v1.keras.layers.Conv1D(filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Conv1DTranspose(filters,kernel_size,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Conv2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Conv2DTranspose(filters,kernel_size,strides=(1,1),padding='valid',output_padding=None,data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Conv3D(filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Conv3DTranspose(filters,kernel_size,strides=(1,1,1),padding='valid',output_padding=None,data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.ConvLSTM1D(filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.compat.v1.keras.layers.ConvLSTM2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.compat.v1.keras.layers.ConvLSTM3D(filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.compat.v1.keras.layers.Convolution1D(filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Convolution1DTranspose(filters,kernel_size,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Convolution2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Convolution2DTranspose(filters,kernel_size,strides=(1,1),padding='valid',output_padding=None,data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Convolution3D(filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Convolution3DTranspose(filters,kernel_size,strides=(1,1,1),padding='valid',output_padding=None,data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Cropping1D(cropping=(1,1),**kwargs)
tf.compat.v1.keras.layers.Cropping2D(cropping=((0,0),(0,0)),data_format=None,**kwargs)
tf.compat.v1.keras.layers.Cropping3D(cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
tf.compat.v1.keras.layers.CuDNNGRU(units,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
tf.compat.v1.keras.layers.CuDNNLSTM(units,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,**kwargs)
tf.compat.v1.keras.layers.Dense(units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.DenseFeatures(feature_columns,trainable=True,name=None,partitioner=None,**kwargs)
tf.compat.v1.keras.layers.DepthwiseConv1D(kernel_size,strides=1,padding='valid',depth_multiplier=1,data_format=None,dilation_rate=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.DepthwiseConv2D(kernel_size,strides=(1,1),padding='valid',depth_multiplier=1,data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Discretization(bin_boundaries=None,num_bins=None,epsilon=0.01,**kwargs)
tf.compat.v1.keras.layers.Dot(axes,normalize=False,**kwargs)
tf.compat.v1.keras.layers.Dropout(rate,noise_shape=None,seed=None,**kwargs)
tf.compat.v1.keras.layers.ELU(alpha=1.0,**kwargs)
tf.compat.v1.keras.layers.Embedding(input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,activity_regularizer=None,embeddings_constraint=None,mask_zero=False,input_length=None,**kwargs)
tf.compat.v1.keras.layers.Flatten(data_format=None,**kwargs)
tf.compat.v1.keras.layers.GRU(units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,reset_after=False,**kwargs)
tf.compat.v1.keras.layers.GRUCell(units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,reset_after=False,**kwargs)
tf.compat.v1.keras.layers.GaussianDropout(rate,seed=None,**kwargs)
tf.compat.v1.keras.layers.GaussianNoise(stddev,seed=None,**kwargs)
tf.compat.v1.keras.layers.GlobalAveragePooling1D(data_format='channels_last',**kwargs)
tf.compat.v1.keras.layers.GlobalAveragePooling2D(data_format=None,keepdims=False,**kwargs)
tf.compat.v1.keras.layers.GlobalAveragePooling3D(data_format=None,keepdims=False,**kwargs)
tf.compat.v1.keras.layers.GlobalAvgPool1D(data_format='channels_last',**kwargs)
tf.compat.v1.keras.layers.GlobalAvgPool2D(data_format=None,keepdims=False,**kwargs)
tf.compat.v1.keras.layers.GlobalAvgPool3D(data_format=None,keepdims=False,**kwargs)
tf.compat.v1.keras.layers.GlobalMaxPool1D(data_format='channels_last',keepdims=False,**kwargs)
tf.compat.v1.keras.layers.GlobalMaxPool2D(data_format=None,keepdims=False,**kwargs)
tf.compat.v1.keras.layers.GlobalMaxPool3D(data_format=None,keepdims=False,**kwargs)
tf.compat.v1.keras.layers.GlobalMaxPooling1D(data_format='channels_last',keepdims=False,**kwargs)
tf.compat.v1.keras.layers.GlobalMaxPooling2D(data_format=None,keepdims=False,**kwargs)
tf.compat.v1.keras.layers.GlobalMaxPooling3D(data_format=None,keepdims=False,**kwargs)
tf.compat.v1.keras.layers.Hashing(num_bins,mask_value=None,salt=None,**kwargs)
tf.compat.v1.keras.layers.Input(shape=None,batch_size=None,name=None,dtype=None,sparse=None,tensor=None,ragged=None,type_spec=None,**kwargs)
tf.compat.v1.keras.layers.InputLayer(input_shape=None,batch_size=None,dtype=None,input_tensor=None,sparse=None,name=None,ragged=None,type_spec=None,**kwargs)
tf.compat.v1.keras.layers.InputSpec(dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None,allow_last_axis_squeeze=False,name=None)
tf.compat.v1.keras.layers.LSTM(units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
tf.compat.v1.keras.layers.LSTMCell(units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.compat.v1.keras.layers.Lambda(function,output_shape=None,mask=None,arguments=None,**kwargs)
tf.compat.v1.keras.layers.Layer(trainable=True,name=None,dtype=None,dynamic=False,**kwargs)
tf.compat.v1.keras.layers.LayerNormalization(axis=-1,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
tf.compat.v1.keras.layers.LeakyReLU(alpha=0.3,**kwargs)
tf.compat.v1.keras.layers.LocallyConnected1D(filters,kernel_size,strides=1,padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,implementation=1,**kwargs)
tf.compat.v1.keras.layers.LocallyConnected2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,implementation=1,**kwargs)
tf.compat.v1.keras.layers.Masking(mask_value=0.0,**kwargs)
tf.compat.v1.keras.layers.MaxPool1D(pool_size=2,strides=None,padding='valid',data_format='channels_last',**kwargs)
tf.compat.v1.keras.layers.MaxPool2D(pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.compat.v1.keras.layers.MaxPool3D(pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.compat.v1.keras.layers.MaxPooling1D(pool_size=2,strides=None,padding='valid',data_format='channels_last',**kwargs)
tf.compat.v1.keras.layers.MaxPooling2D(pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.compat.v1.keras.layers.MaxPooling3D(pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.compat.v1.keras.layers.Maximum(**kwargs)
tf.compat.v1.keras.layers.Minimum(**kwargs)
tf.compat.v1.keras.layers.MultiHeadAttention(num_heads,key_dim,value_dim=None,dropout=0.0,use_bias=True,output_shape=None,attention_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.Multiply(**kwargs)
tf.compat.v1.keras.layers.Normalization(axis=-1,mean=None,variance=None,**kwargs)
tf.compat.v1.keras.layers.PReLU(alpha_initializer='zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)
tf.compat.v1.keras.layers.Permute(dims,**kwargs)
tf.compat.v1.keras.layers.RNN(cell,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,time_major=False,**kwargs)
tf.compat.v1.keras.layers.RandomContrast(factor,seed=None,**kwargs)
tf.compat.v1.keras.layers.RandomCrop(height,width,seed=None,**kwargs)
tf.compat.v1.keras.layers.RandomFlip(mode=HORIZONTAL_AND_VERTICAL,seed=None,**kwargs)
tf.compat.v1.keras.layers.RandomHeight(factor,interpolation='bilinear',seed=None,**kwargs)
tf.compat.v1.keras.layers.RandomRotation(factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.compat.v1.keras.layers.RandomTranslation(height_factor,width_factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.compat.v1.keras.layers.RandomWidth(factor,interpolation='bilinear',seed=None,**kwargs)
tf.compat.v1.keras.layers.RandomZoom(height_factor,width_factor=None,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.compat.v1.keras.layers.ReLU(max_value=None,negative_slope=0.0,threshold=0.0,**kwargs)
tf.compat.v1.keras.layers.RepeatVector(n,**kwargs)
tf.compat.v1.keras.layers.Rescaling(scale,offset=0.0,**kwargs)
tf.compat.v1.keras.layers.Reshape(target_shape,**kwargs)
tf.compat.v1.keras.layers.Resizing(height,width,interpolation='bilinear',crop_to_aspect_ratio=False,**kwargs)
tf.compat.v1.keras.layers.SeparableConv1D(filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.SeparableConv2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.SeparableConvolution1D(filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.SeparableConvolution2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.SimpleRNN(units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
tf.compat.v1.keras.layers.SimpleRNNCell(units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.compat.v1.keras.layers.Softmax(axis=-1,**kwargs)
tf.compat.v1.keras.layers.SpatialDropout1D(rate,**kwargs)
tf.compat.v1.keras.layers.SpatialDropout2D(rate,data_format=None,**kwargs)
tf.compat.v1.keras.layers.SpatialDropout3D(rate,data_format=None,**kwargs)
tf.compat.v1.keras.layers.StackedRNNCells(cells,**kwargs)
tf.compat.v1.keras.layers.Subtract(**kwargs)
tf.compat.v1.keras.layers.ThresholdedReLU(theta=1.0,**kwargs)
tf.compat.v1.keras.layers.TimeDistributed(layer,**kwargs)
tf.compat.v1.keras.layers.UpSampling1D(size=2,**kwargs)
tf.compat.v1.keras.layers.UpSampling2D(size=(2,2),data_format=None,interpolation='nearest',**kwargs)
tf.compat.v1.keras.layers.UpSampling3D(size=(2,2,2),data_format=None,**kwargs)
tf.compat.v1.keras.layers.Wrapper(layer,**kwargs)
tf.compat.v1.keras.layers.ZeroPadding1D(padding=1,**kwargs)
tf.compat.v1.keras.layers.ZeroPadding2D(padding=(1,1),data_format=None,**kwargs)
tf.compat.v1.keras.layers.ZeroPadding3D(padding=(1,1,1),data_format=None,**kwargs)
tf.compat.v1.keras.layers.add(inputs,**kwargs)
tf.compat.v1.keras.layers.average(inputs,**kwargs)
tf.compat.v1.keras.layers.concatenate(inputs,axis=-1,**kwargs)
tf.compat.v1.keras.layers.deserialize(config,custom_objects=None)
tf.compat.v1.keras.layers.disable_v2_dtype_behavior()
tf.compat.v1.keras.layers.dot(inputs,axes,normalize=False,**kwargs)
tf.compat.v1.keras.layers.enable_v2_dtype_behavior()
tf.compat.v1.keras.layers.experimental.EinsumDense(equation,output_shape,activation=None,bias_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.compat.v1.keras.layers.experimental.RandomFourierFeatures(output_dim,kernel_initializer='gaussian',scale=None,trainable=False,name=None,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.CategoryCrossing(depth=None,name=None,separator='_X_',**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.CategoryEncoding(num_tokens=None,output_mode='multi_hot',sparse=False,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.CenterCrop(height,width,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.Discretization(bin_boundaries=None,num_bins=None,epsilon=0.01,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.Hashing(num_bins,mask_value=None,salt=None,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.Normalization(axis=-1,mean=None,variance=None,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.PreprocessingLayer(**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.RandomContrast(factor,seed=None,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.RandomCrop(height,width,seed=None,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.RandomFlip(mode=HORIZONTAL_AND_VERTICAL,seed=None,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.RandomHeight(factor,interpolation='bilinear',seed=None,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.RandomRotation(factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.RandomTranslation(height_factor,width_factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.RandomWidth(factor,interpolation='bilinear',seed=None,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.RandomZoom(height_factor,width_factor=None,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.Rescaling(scale,offset=0.0,**kwargs)
tf.compat.v1.keras.layers.experimental.preprocessing.Resizing(height,width,interpolation='bilinear',crop_to_aspect_ratio=False,**kwargs)
tf.compat.v1.keras.layers.maximum(inputs,**kwargs)
tf.compat.v1.keras.layers.minimum(inputs,**kwargs)
tf.compat.v1.keras.layers.multiply(inputs,**kwargs)
tf.compat.v1.keras.layers.serialize(layer)
tf.compat.v1.keras.layers.subtract(inputs,**kwargs)
tf.compat.v1.keras.losses.BinaryCrossentropy(from_logits=False,label_smoothing=0.0,axis=-1,reduction=losses_utils.ReductionV2.AUTO,name='binary_crossentropy')
tf.compat.v1.keras.losses.CategoricalCrossentropy(from_logits=False,label_smoothing=0.0,axis=-1,reduction=losses_utils.ReductionV2.AUTO,name='categorical_crossentropy')
tf.compat.v1.keras.losses.CategoricalHinge(reduction=losses_utils.ReductionV2.AUTO,name='categorical_hinge')
tf.compat.v1.keras.losses.CosineSimilarity(axis=-1,reduction=losses_utils.ReductionV2.AUTO,name='cosine_similarity')
tf.compat.v1.keras.losses.Hinge(reduction=losses_utils.ReductionV2.AUTO,name='hinge')
tf.compat.v1.keras.losses.Huber(delta=1.0,reduction=losses_utils.ReductionV2.AUTO,name='huber_loss')
tf.compat.v1.keras.losses.KLD(y_true,y_pred)
tf.compat.v1.keras.losses.KLDivergence(reduction=losses_utils.ReductionV2.AUTO,name='kl_divergence')
tf.compat.v1.keras.losses.LogCosh(reduction=losses_utils.ReductionV2.AUTO,name='log_cosh')
tf.compat.v1.keras.losses.Loss(reduction=losses_utils.ReductionV2.AUTO,name=None)
tf.compat.v1.keras.losses.MAE(y_true,y_pred)
tf.compat.v1.keras.losses.MAPE(y_true,y_pred)
tf.compat.v1.keras.losses.MSE(y_true,y_pred)
tf.compat.v1.keras.losses.MSLE(y_true,y_pred)
tf.compat.v1.keras.losses.MeanAbsoluteError(reduction=losses_utils.ReductionV2.AUTO,name='mean_absolute_error')
tf.compat.v1.keras.losses.MeanAbsolutePercentageError(reduction=losses_utils.ReductionV2.AUTO,name='mean_absolute_percentage_error')
tf.compat.v1.keras.losses.MeanSquaredError(reduction=losses_utils.ReductionV2.AUTO,name='mean_squared_error')
tf.compat.v1.keras.losses.MeanSquaredLogarithmicError(reduction=losses_utils.ReductionV2.AUTO,name='mean_squared_logarithmic_error')
tf.compat.v1.keras.losses.Poisson(reduction=losses_utils.ReductionV2.AUTO,name='poisson')
tf.compat.v1.keras.losses.SparseCategoricalCrossentropy(from_logits=False,reduction=losses_utils.ReductionV2.AUTO,name='sparse_categorical_crossentropy')
tf.compat.v1.keras.losses.SquaredHinge(reduction=losses_utils.ReductionV2.AUTO,name='squared_hinge')
tf.compat.v1.keras.losses.binary_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.compat.v1.keras.losses.categorical_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.compat.v1.keras.losses.categorical_hinge(y_true,y_pred)
tf.compat.v1.keras.losses.cosine(y_true,y_pred,axis=-1)
tf.compat.v1.keras.losses.cosine_proximity(y_true,y_pred,axis=-1)
tf.compat.v1.keras.losses.cosine_similarity(y_true,y_pred,axis=-1)
tf.compat.v1.keras.losses.deserialize(name,custom_objects=None)
tf.compat.v1.keras.losses.get(identifier)
tf.compat.v1.keras.losses.hinge(y_true,y_pred)
tf.compat.v1.keras.losses.kl_divergence(y_true,y_pred)
tf.compat.v1.keras.losses.kld(y_true,y_pred)
tf.compat.v1.keras.losses.kullback_leibler_divergence(y_true,y_pred)
tf.compat.v1.keras.losses.log_cosh(y_true,y_pred)
tf.compat.v1.keras.losses.logcosh(y_true,y_pred)
tf.compat.v1.keras.losses.mae(y_true,y_pred)
tf.compat.v1.keras.losses.mape(y_true,y_pred)
tf.compat.v1.keras.losses.mean_absolute_error(y_true,y_pred)
tf.compat.v1.keras.losses.mean_absolute_percentage_error(y_true,y_pred)
tf.compat.v1.keras.losses.mean_squared_error(y_true,y_pred)
tf.compat.v1.keras.losses.mean_squared_logarithmic_error(y_true,y_pred)
tf.compat.v1.keras.losses.mse(y_true,y_pred)
tf.compat.v1.keras.losses.msle(y_true,y_pred)
tf.compat.v1.keras.losses.poisson(y_true,y_pred)
tf.compat.v1.keras.losses.serialize(loss)
tf.compat.v1.keras.losses.sparse_categorical_crossentropy(y_true,y_pred,from_logits=False,axis=-1)
tf.compat.v1.keras.losses.squared_hinge(y_true,y_pred)
tf.compat.v1.keras.metrics.AUC(num_thresholds=200,curve='ROC',summation_method='interpolation',name=None,dtype=None,thresholds=None,multi_label=False,num_labels=None,label_weights=None,from_logits=False)
tf.compat.v1.keras.metrics.Accuracy(name='accuracy',dtype=None)
tf.compat.v1.keras.metrics.BinaryAccuracy(name='binary_accuracy',dtype=None,threshold=0.5)
tf.compat.v1.keras.metrics.BinaryCrossentropy(name='binary_crossentropy',dtype=None,from_logits=False,label_smoothing=0)
tf.compat.v1.keras.metrics.CategoricalAccuracy(name='categorical_accuracy',dtype=None)
tf.compat.v1.keras.metrics.CategoricalCrossentropy(name='categorical_crossentropy',dtype=None,from_logits=False,label_smoothing=0)
tf.compat.v1.keras.metrics.CategoricalHinge(name='categorical_hinge',dtype=None)
tf.compat.v1.keras.metrics.CosineSimilarity(name='cosine_similarity',dtype=None,axis=-1)
tf.compat.v1.keras.metrics.FalseNegatives(thresholds=None,name=None,dtype=None)
tf.compat.v1.keras.metrics.FalsePositives(thresholds=None,name=None,dtype=None)
tf.compat.v1.keras.metrics.Hinge(name='hinge',dtype=None)
tf.compat.v1.keras.metrics.KLD(y_true,y_pred)
tf.compat.v1.keras.metrics.KLDivergence(name='kullback_leibler_divergence',dtype=None)
tf.compat.v1.keras.metrics.LogCoshError(name='logcosh',dtype=None)
tf.compat.v1.keras.metrics.MAE(y_true,y_pred)
tf.compat.v1.keras.metrics.MAPE(y_true,y_pred)
tf.compat.v1.keras.metrics.MSE(y_true,y_pred)
tf.compat.v1.keras.metrics.MSLE(y_true,y_pred)
tf.compat.v1.keras.metrics.Mean(name='mean',dtype=None)
tf.compat.v1.keras.metrics.MeanAbsoluteError(name='mean_absolute_error',dtype=None)
tf.compat.v1.keras.metrics.MeanAbsolutePercentageError(name='mean_absolute_percentage_error',dtype=None)
tf.compat.v1.keras.metrics.MeanIoU(num_classes,name=None,dtype=None)
tf.compat.v1.keras.metrics.MeanMetricWrapper(fn,name=None,dtype=None,**kwargs)
tf.compat.v1.keras.metrics.MeanRelativeError(normalizer,name=None,dtype=None)
tf.compat.v1.keras.metrics.MeanSquaredError(name='mean_squared_error',dtype=None)
tf.compat.v1.keras.metrics.MeanSquaredLogarithmicError(name='mean_squared_logarithmic_error',dtype=None)
tf.compat.v1.keras.metrics.MeanTensor(name='mean_tensor',dtype=None,shape=None)
tf.compat.v1.keras.metrics.Metric(name=None,dtype=None,**kwargs)
tf.compat.v1.keras.metrics.Poisson(name='poisson',dtype=None)
tf.compat.v1.keras.metrics.Precision(thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
tf.compat.v1.keras.metrics.PrecisionAtRecall(recall,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.compat.v1.keras.metrics.Recall(thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
tf.compat.v1.keras.metrics.RecallAtPrecision(precision,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.compat.v1.keras.metrics.RootMeanSquaredError(name='root_mean_squared_error',dtype=None)
tf.compat.v1.keras.metrics.SensitivityAtSpecificity(specificity,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.compat.v1.keras.metrics.SparseCategoricalAccuracy(name='sparse_categorical_accuracy',dtype=None)
tf.compat.v1.keras.metrics.SparseCategoricalCrossentropy(name='sparse_categorical_crossentropy',dtype=None,from_logits=False,axis=-1)
tf.compat.v1.keras.metrics.SparseTopKCategoricalAccuracy(k=5,name='sparse_top_k_categorical_accuracy',dtype=None)
tf.compat.v1.keras.metrics.SpecificityAtSensitivity(sensitivity,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.compat.v1.keras.metrics.SquaredHinge(name='squared_hinge',dtype=None)
tf.compat.v1.keras.metrics.Sum(name='sum',dtype=None)
tf.compat.v1.keras.metrics.TopKCategoricalAccuracy(k=5,name='top_k_categorical_accuracy',dtype=None)
tf.compat.v1.keras.metrics.TrueNegatives(thresholds=None,name=None,dtype=None)
tf.compat.v1.keras.metrics.TruePositives(thresholds=None,name=None,dtype=None)
tf.compat.v1.keras.metrics.binary_accuracy(y_true,y_pred,threshold=0.5)
tf.compat.v1.keras.metrics.binary_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.compat.v1.keras.metrics.categorical_accuracy(y_true,y_pred)
tf.compat.v1.keras.metrics.categorical_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.compat.v1.keras.metrics.cosine(y_true,y_pred,axis=-1)
tf.compat.v1.keras.metrics.cosine_proximity(y_true,y_pred,axis=-1)
tf.compat.v1.keras.metrics.deserialize(config,custom_objects=None)
tf.compat.v1.keras.metrics.get(identifier)
tf.compat.v1.keras.metrics.hinge(y_true,y_pred)
tf.compat.v1.keras.metrics.kl_divergence(y_true,y_pred)
tf.compat.v1.keras.metrics.kld(y_true,y_pred)
tf.compat.v1.keras.metrics.kullback_leibler_divergence(y_true,y_pred)
tf.compat.v1.keras.metrics.log_cosh(y_true,y_pred)
tf.compat.v1.keras.metrics.logcosh(y_true,y_pred)
tf.compat.v1.keras.metrics.mae(y_true,y_pred)
tf.compat.v1.keras.metrics.mape(y_true,y_pred)
tf.compat.v1.keras.metrics.mean_absolute_error(y_true,y_pred)
tf.compat.v1.keras.metrics.mean_absolute_percentage_error(y_true,y_pred)
tf.compat.v1.keras.metrics.mean_squared_error(y_true,y_pred)
tf.compat.v1.keras.metrics.mean_squared_logarithmic_error(y_true,y_pred)
tf.compat.v1.keras.metrics.mse(y_true,y_pred)
tf.compat.v1.keras.metrics.msle(y_true,y_pred)
tf.compat.v1.keras.metrics.poisson(y_true,y_pred)
tf.compat.v1.keras.metrics.serialize(metric)
tf.compat.v1.keras.metrics.sparse_categorical_accuracy(y_true,y_pred)
tf.compat.v1.keras.metrics.sparse_categorical_crossentropy(y_true,y_pred,from_logits=False,axis=-1)
tf.compat.v1.keras.metrics.sparse_top_k_categorical_accuracy(y_true,y_pred,k=5)
tf.compat.v1.keras.metrics.squared_hinge(y_true,y_pred)
tf.compat.v1.keras.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)
tf.compat.v1.keras.mixed_precision.LossScaleOptimizer(inner_optimizer,dynamic=True,initial_scale=None,dynamic_growth_steps=None)
tf.compat.v1.keras.mixed_precision.experimental.LossScaleOptimizer(optimizer,loss_scale)
tf.compat.v1.keras.models.LinearModel(units=1,activation=None,use_bias=True,kernel_initializer='zeros',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,**kwargs)
tf.compat.v1.keras.models.Model(*args,**kwargs)
tf.compat.v1.keras.models.Sequential(layers=None,name=None)
tf.compat.v1.keras.models.WideDeepModel(linear_model,dnn_model,activation=None,**kwargs)
tf.compat.v1.keras.models.clone_model(model,input_tensors=None,clone_function=None)
tf.compat.v1.keras.models.load_model(filepath,custom_objects=None,compile=True,options=None)
tf.compat.v1.keras.models.model_from_config(config,custom_objects=None)
tf.compat.v1.keras.models.model_from_json(json_string,custom_objects=None)
tf.compat.v1.keras.models.model_from_yaml(yaml_string,custom_objects=None)
tf.compat.v1.keras.models.save_model(model,filepath,overwrite=True,include_optimizer=True,save_format=None,signatures=None,options=None,save_traces=True)
tf.compat.v1.keras.optimizers.Adadelta(learning_rate=0.001,rho=0.95,epsilon=1e-07,name='Adadelta',**kwargs)
tf.compat.v1.keras.optimizers.Adagrad(learning_rate=0.001,initial_accumulator_value=0.1,epsilon=1e-07,name='Adagrad',**kwargs)
tf.compat.v1.keras.optimizers.Adam(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,name='Adam',**kwargs)
tf.compat.v1.keras.optimizers.Adamax(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Adamax',**kwargs)
tf.compat.v1.keras.optimizers.Ftrl(learning_rate=0.001,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,name='Ftrl',l2_shrinkage_regularization_strength=0.0,beta=0.0,**kwargs)
tf.compat.v1.keras.optimizers.Nadam(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Nadam',**kwargs)
tf.compat.v1.keras.optimizers.Optimizer(name,gradient_aggregator=None,gradient_transformers=None,**kwargs)
tf.compat.v1.keras.optimizers.RMSprop(learning_rate=0.001,rho=0.9,momentum=0.0,epsilon=1e-07,centered=False,name='RMSprop',**kwargs)
tf.compat.v1.keras.optimizers.SGD(learning_rate=0.01,momentum=0.0,nesterov=False,name='SGD',**kwargs)
tf.compat.v1.keras.optimizers.deserialize(config,custom_objects=None)
tf.compat.v1.keras.optimizers.get(identifier)
tf.compat.v1.keras.optimizers.schedules.CosineDecay(initial_learning_rate,decay_steps,alpha=0.0,name=None)
tf.compat.v1.keras.optimizers.schedules.CosineDecayRestarts(initial_learning_rate,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name=None)
tf.compat.v1.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)
tf.compat.v1.keras.optimizers.schedules.InverseTimeDecay(initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)
tf.compat.v1.keras.optimizers.schedules.PiecewiseConstantDecay(boundaries,values,name=None)
tf.compat.v1.keras.optimizers.schedules.PolynomialDecay(initial_learning_rate,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name=None)
tf.compat.v1.keras.optimizers.schedules.deserialize(config,custom_objects=None)
tf.compat.v1.keras.optimizers.schedules.serialize(learning_rate_schedule)
tf.compat.v1.keras.optimizers.serialize(optimizer)
tf.compat.v1.keras.preprocessing.image.DirectoryIterator(directory,image_data_generator,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',follow_links=False,subset=None,interpolation='nearest',dtype=None)
tf.compat.v1.keras.preprocessing.image.ImageDataGenerator(featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,zca_epsilon=1e-06,rotation_range=0,width_shift_range=0.0,height_shift_range=0.0,brightness_range=None,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,preprocessing_function=None,data_format=None,validation_split=0.0,dtype=None)
tf.compat.v1.keras.preprocessing.image.Iterator(n,batch_size,shuffle,seed)
tf.compat.v1.keras.preprocessing.image.NumpyArrayIterator(x,y,image_data_generator,batch_size=32,shuffle=False,sample_weight=None,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',subset=None,dtype=None)
tf.compat.v1.keras.preprocessing.image.apply_affine_transform(x,theta=0,tx=0,ty=0,shear=0,zx=1,zy=1,row_axis=0,col_axis=1,channel_axis=2,fill_mode='nearest',cval=0.0,order=1)
tf.compat.v1.keras.preprocessing.image.apply_brightness_shift(x,brightness)
tf.compat.v1.keras.preprocessing.image.apply_channel_shift(x,intensity,channel_axis=0)
tf.compat.v1.keras.preprocessing.image.array_to_img(x,data_format=None,scale=True,dtype=None)
tf.compat.v1.keras.preprocessing.image.img_to_array(img,data_format=None,dtype=None)
tf.compat.v1.keras.preprocessing.image.load_img(path,grayscale=False,color_mode='rgb',target_size=None,interpolation='nearest')
tf.compat.v1.keras.preprocessing.image.random_brightness(x,brightness_range)
tf.compat.v1.keras.preprocessing.image.random_channel_shift(x,intensity_range,channel_axis=0)
tf.compat.v1.keras.preprocessing.image.random_rotation(x,rg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
tf.compat.v1.keras.preprocessing.image.random_shear(x,intensity,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
tf.compat.v1.keras.preprocessing.image.random_shift(x,wrg,hrg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
tf.compat.v1.keras.preprocessing.image.random_zoom(x,zoom_range,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
tf.compat.v1.keras.preprocessing.image.save_img(path,x,data_format=None,file_format=None,scale=True,**kwargs)
tf.compat.v1.keras.preprocessing.sequence.TimeseriesGenerator(data,targets,length,sampling_rate=1,stride=1,start_index=0,end_index=None,shuffle=False,reverse=False,batch_size=128)
tf.compat.v1.keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)
tf.compat.v1.keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)
tf.compat.v1.keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None,seed=None)
tf.compat.v1.keras.preprocessing.text.Tokenizer(num_words=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='',char_level=False,oov_token=None,document_count=0,**kwargs)
tf.compat.v1.keras.preprocessing.text.hashing_trick(text,n,hash_function=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
tf.compat.v1.keras.preprocessing.text.one_hot(input_text,n,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
tf.compat.v1.keras.preprocessing.text.text_to_word_sequence(input_text,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
tf.compat.v1.keras.preprocessing.text.tokenizer_from_json(json_string)
tf.compat.v1.keras.regularizers.L1(l1=0.01,**kwargs)
tf.compat.v1.keras.regularizers.L1L2(l1=0.0,l2=0.0)
tf.compat.v1.keras.regularizers.L2(l2=0.01,**kwargs)
tf.compat.v1.keras.regularizers.deserialize(config,custom_objects=None)
tf.compat.v1.keras.regularizers.get(identifier)
tf.compat.v1.keras.regularizers.l1(l1=0.01,**kwargs)
tf.compat.v1.keras.regularizers.l1_l2(l1=0.01,l2=0.01)
tf.compat.v1.keras.regularizers.l2(l2=0.01,**kwargs)
tf.compat.v1.keras.regularizers.serialize(regularizer)
tf.compat.v1.keras.utils.CustomObjectScope(*args)
tf.compat.v1.keras.utils.GeneratorEnqueuer(generator,use_multiprocessing=False,random_seed=None)
tf.compat.v1.keras.utils.OrderedEnqueuer(sequence,use_multiprocessing=False,shuffle=False)
tf.compat.v1.keras.utils.Progbar(target,width=30,verbose=1,interval=0.05,stateful_metrics=None,unit_name='step')
tf.compat.v1.keras.utils.SequenceEnqueuer(sequence,use_multiprocessing=False)
tf.compat.v1.keras.utils.array_to_img(x,data_format=None,scale=True,dtype=None)
tf.compat.v1.keras.utils.custom_object_scope(*args)
tf.compat.v1.keras.utils.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')
tf.compat.v1.keras.utils.get_custom_objects()
tf.compat.v1.keras.utils.get_file(fname=None,origin=None,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None)
tf.compat.v1.keras.utils.get_registered_name(obj)
tf.compat.v1.keras.utils.get_registered_object(name,custom_objects=None,module_objects=None)
tf.compat.v1.keras.utils.get_source_inputs(tensor,layer=None,node_index=None)
tf.compat.v1.keras.utils.img_to_array(img,data_format=None,dtype=None)
tf.compat.v1.keras.utils.load_img(path,grayscale=False,color_mode='rgb',target_size=None,interpolation='nearest')
tf.compat.v1.keras.utils.model_to_dot(model,show_shapes=False,show_dtype=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96,subgraph=False,layer_range=None,show_layer_activations=False)
tf.compat.v1.keras.utils.normalize(x,axis=-1,order=2)
tf.compat.v1.keras.utils.plot_model(model,to_file='model.png',show_shapes=False,show_dtype=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96,layer_range=None,show_layer_activations=False)
tf.compat.v1.keras.utils.register_keras_serializable(package='Custom',name=None)
tf.compat.v1.keras.utils.save_img(path,x,data_format=None,file_format=None,scale=True,**kwargs)
tf.compat.v1.keras.utils.serialize_keras_object(instance)
tf.compat.v1.keras.utils.to_categorical(y,num_classes=None,dtype='float32')
tf.compat.v1.layers.AveragePooling1D(pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tf.compat.v1.layers.AveragePooling2D(pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tf.compat.v1.layers.AveragePooling3D(pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tf.compat.v1.layers.BatchNormalization(axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer=tf.compat.v1.zeros_initializer(),gamma_initializer=tf.compat.v1.ones_initializer(),moving_mean_initializer=tf.compat.v1.zeros_initializer(),moving_variance_initializer=tf.compat.v1.ones_initializer(),beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,renorm=False,renorm_clipping=None,renorm_momentum=0.99,fused=None,trainable=True,virtual_batch_size=None,adjustment=None,name=None,**kwargs)
tf.compat.v1.layers.Conv1D(filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
tf.compat.v1.layers.Conv2D(filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
tf.compat.v1.layers.Conv2DTranspose(filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
tf.compat.v1.layers.Conv3D(filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
tf.compat.v1.layers.Conv3DTranspose(filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
tf.compat.v1.layers.Dense(units,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
tf.compat.v1.layers.Dropout(rate=0.5,noise_shape=None,seed=None,name=None,**kwargs)
tf.compat.v1.layers.Flatten(data_format=None,**kwargs)
tf.compat.v1.layers.InputSpec(dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None,allow_last_axis_squeeze=False,name=None)
tf.compat.v1.layers.Layer(trainable=True,name=None,dtype=None,**kwargs)
tf.compat.v1.layers.MaxPooling1D(pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tf.compat.v1.layers.MaxPooling2D(pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tf.compat.v1.layers.MaxPooling3D(pool_size,strides,padding='valid',data_format='channels_last',name=None,**kwargs)
tf.compat.v1.layers.SeparableConv1D(filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
tf.compat.v1.layers.SeparableConv2D(filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,**kwargs)
tf.compat.v1.layers.average_pooling1d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tf.compat.v1.layers.average_pooling2d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tf.compat.v1.layers.average_pooling3d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tf.compat.v1.layers.batch_normalization(inputs,axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer=tf.compat.v1.zeros_initializer(),gamma_initializer=tf.compat.v1.ones_initializer(),moving_mean_initializer=tf.compat.v1.zeros_initializer(),moving_variance_initializer=tf.compat.v1.ones_initializer(),beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,training=False,trainable=True,name=None,reuse=None,renorm=False,renorm_clipping=None,renorm_momentum=0.99,fused=None,virtual_batch_size=None,adjustment=None)
tf.compat.v1.layers.conv1d(inputs,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
tf.compat.v1.layers.conv2d(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
tf.compat.v1.layers.conv2d_transpose(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
tf.compat.v1.layers.conv3d(inputs,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
tf.compat.v1.layers.conv3d_transpose(inputs,filters,kernel_size,strides=(1,1,1),padding='valid',data_format='channels_last',activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
tf.compat.v1.layers.dense(inputs,units,activation=None,use_bias=True,kernel_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
tf.compat.v1.layers.dropout(inputs,rate=0.5,noise_shape=None,seed=None,training=False,name=None)
tf.compat.v1.layers.experimental.set_keras_style()
tf.compat.v1.layers.flatten(inputs,name=None,data_format='channels_last')
tf.compat.v1.layers.max_pooling1d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tf.compat.v1.layers.max_pooling2d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tf.compat.v1.layers.max_pooling3d(inputs,pool_size,strides,padding='valid',data_format='channels_last',name=None)
tf.compat.v1.layers.separable_conv1d(inputs,filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
tf.compat.v1.layers.separable_conv2d(inputs,filters,kernel_size,strides=(1,1),padding='valid',data_format='channels_last',dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer=None,pointwise_initializer=None,bias_initializer=tf.compat.v1.zeros_initializer(),depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,trainable=True,name=None,reuse=None)
tf.compat.v1.lbeta(x,name=None)
tf.compat.v1.less(x,y,name=None)
tf.compat.v1.less_equal(x,y,name=None)
tf.compat.v1.lgamma(x,name=None)
tf.compat.v1.lin_space(start,stop,num,name=None,axis=0)
tf.compat.v1.linalg.LinearOperator(dtype,graph_parents=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None,parameters=None)
tf.compat.v1.linalg.LinearOperatorAdjoint(operator,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)
tf.compat.v1.linalg.LinearOperatorBlockDiag(operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name=None)
tf.compat.v1.linalg.LinearOperatorBlockLowerTriangular(operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorBlockLowerTriangular')
tf.compat.v1.linalg.LinearOperatorCirculant(spectrum,input_output_dtype=tf.dtypes.complex64,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name='LinearOperatorCirculant')
tf.compat.v1.linalg.LinearOperatorCirculant2D(spectrum,input_output_dtype=tf.dtypes.complex64,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name='LinearOperatorCirculant2D')
tf.compat.v1.linalg.LinearOperatorCirculant3D(spectrum,input_output_dtype=tf.dtypes.complex64,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name='LinearOperatorCirculant3D')
tf.compat.v1.linalg.LinearOperatorComposition(operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)
tf.compat.v1.linalg.LinearOperatorDiag(diag,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorDiag')
tf.compat.v1.linalg.LinearOperatorFullMatrix(matrix,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorFullMatrix')
tf.compat.v1.linalg.LinearOperatorHouseholder(reflection_axis,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorHouseholder')
tf.compat.v1.linalg.LinearOperatorIdentity(num_rows,batch_shape=None,dtype=None,is_non_singular=True,is_self_adjoint=True,is_positive_definite=True,is_square=True,assert_proper_shapes=False,name='LinearOperatorIdentity')
tf.compat.v1.linalg.LinearOperatorInversion(operator,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)
tf.compat.v1.linalg.LinearOperatorKronecker(operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)
tf.compat.v1.linalg.LinearOperatorLowRankUpdate(base_operator,u,diag_update=None,v=None,is_diag_update_positive=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorLowRankUpdate')
tf.compat.v1.linalg.LinearOperatorLowerTriangular(tril,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorLowerTriangular')
tf.compat.v1.linalg.LinearOperatorPermutation(perm,dtype=tf.dtypes.float32,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorPermutation')
tf.compat.v1.linalg.LinearOperatorScaledIdentity(num_rows,multiplier,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,assert_proper_shapes=False,name='LinearOperatorScaledIdentity')
tf.compat.v1.linalg.LinearOperatorToeplitz(col,row,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorToeplitz')
tf.compat.v1.linalg.LinearOperatorTridiag(diagonals,diagonals_format=_COMPACT,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorTridiag')
tf.compat.v1.linalg.LinearOperatorZeros(num_rows,num_columns=None,batch_shape=None,dtype=None,is_non_singular=False,is_self_adjoint=True,is_positive_definite=False,is_square=True,assert_proper_shapes=False,name='LinearOperatorZeros')
tf.compat.v1.linalg.adjoint(matrix,name=None)
tf.compat.v1.linalg.band_part(input,num_lower,num_upper,name=None)
tf.compat.v1.linalg.cholesky(input,name=None)
tf.compat.v1.linalg.cholesky_solve(chol,rhs,name=None)
tf.compat.v1.linalg.cross(a,b,name=None)
tf.compat.v1.linalg.det(input,name=None)
tf.compat.v1.linalg.diag(diagonal,name='diag',k=0,num_rows=-1,num_cols=-1,padding_value=0,align='RIGHT_LEFT')
tf.compat.v1.linalg.diag_part(input,name='diag_part',k=0,padding_value=0,align='RIGHT_LEFT')
tf.compat.v1.linalg.eigh(tensor,name=None)
tf.compat.v1.linalg.eigh_tridiagonal(alpha,beta,eigvals_only=True,select='a',select_range=None,tol=None,name=None)
tf.compat.v1.linalg.eigvalsh(tensor,name=None)
tf.compat.v1.linalg.einsum(equation,*inputs,**kwargs)
tf.compat.v1.linalg.experimental.conjugate_gradient(operator,rhs,preconditioner=None,x=None,tol=1e-05,max_iter=20,name='conjugate_gradient')
tf.compat.v1.linalg.expm(input,name=None)
tf.compat.v1.linalg.eye(num_rows,num_columns=None,batch_shape=None,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.linalg.global_norm(t_list,name=None)
tf.compat.v1.linalg.inv(input,adjoint=False,name=None)
tf.compat.v1.linalg.l2_normalize(x,axis=None,epsilon=1e-12,name=None,dim=None)
tf.compat.v1.linalg.logdet(matrix,name=None)
tf.compat.v1.linalg.logm(input,name=None)
tf.compat.v1.linalg.lstsq(matrix,rhs,l2_regularizer=0.0,fast=True,name=None)
tf.compat.v1.linalg.lu(input,output_idx_type=tf.dtypes.int32,name=None)
tf.compat.v1.linalg.lu_matrix_inverse(lower_upper,perm,validate_args=False,name=None)
tf.compat.v1.linalg.lu_reconstruct(lower_upper,perm,validate_args=False,name=None)
tf.compat.v1.linalg.lu_solve(lower_upper,perm,rhs,validate_args=False,name=None)
tf.compat.v1.linalg.matmul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,a_is_sparse=False,b_is_sparse=False,output_type=None,name=None)
tf.compat.v1.linalg.matrix_rank(a,tol=None,validate_args=False,name=None)
tf.compat.v1.linalg.matrix_transpose(a,name='matrix_transpose',conjugate=False)
tf.compat.v1.linalg.matvec(a,b,transpose_a=False,adjoint_a=False,a_is_sparse=False,b_is_sparse=False,name=None)
tf.compat.v1.linalg.norm(tensor,ord='euclidean',axis=None,keepdims=None,name=None,keep_dims=None)
tf.compat.v1.linalg.normalize(tensor,ord='euclidean',axis=None,name=None)
tf.compat.v1.linalg.pinv(a,rcond=None,validate_args=False,name=None)
tf.compat.v1.linalg.qr(input,full_matrices=False,name=None)
tf.compat.v1.linalg.set_diag(input,diagonal,name='set_diag',k=0,align='RIGHT_LEFT')
tf.compat.v1.linalg.slogdet(input,name=None)
tf.compat.v1.linalg.solve(matrix,rhs,adjoint=False,name=None)
tf.compat.v1.linalg.sqrtm(input,name=None)
tf.compat.v1.linalg.svd(tensor,full_matrices=False,compute_uv=True,name=None)
tf.compat.v1.linalg.tensor_diag(diagonal,name=None)
tf.compat.v1.linalg.tensor_diag_part(input,name=None)
tf.compat.v1.linalg.tensordot(a,b,axes,name=None)
tf.compat.v1.linalg.trace(x,name=None)
tf.compat.v1.linalg.transpose(a,name='matrix_transpose',conjugate=False)
tf.compat.v1.linalg.triangular_solve(matrix,rhs,lower=True,adjoint=False,name=None)
tf.compat.v1.linalg.tridiagonal_matmul(diagonals,rhs,diagonals_format='compact',name=None)
tf.compat.v1.linalg.tridiagonal_solve(diagonals,rhs,diagonals_format='compact',transpose_rhs=False,conjugate_rhs=False,name=None,partial_pivoting=True,perturb_singular=False)
tf.compat.v1.linspace(start,stop,num,name=None,axis=0)
tf.compat.v1.lite.Interpreter(model_path=None,model_content=None,experimental_delegates=None,num_threads=None,experimental_op_resolver_type=tf.lite.experimental.OpResolverType.AUTO,experimental_preserve_all_tensors=False)
tf.compat.v1.lite.OpHint(function_name,level=1,children_inputs_mappings=None,**kwargs)
tf.compat.v1.lite.OpHint.OpHintArgumentTracker(function_name,unique_function_id,node_name_prefix,attr_name,level=1,children_inputs_mappings=None)
tf.compat.v1.lite.RepresentativeDataset(input_gen)
tf.compat.v1.lite.TFLiteConverter(graph_def,input_tensors,output_tensors,input_arrays_with_shape=None,output_arrays=None,experimental_debug_info_func=None)
tf.compat.v1.lite.TargetSpec(supported_ops=None,supported_types=None,experimental_select_user_tf_ops=None,experimental_supported_backends=None)
tf.compat.v1.lite.experimental.QuantizationDebugOptions(layer_debug_metrics:Optional[Mapping[str,Callable[[np.ndarray],float]]]=None,model_debug_metrics:Optional[Mapping[str,Callable[[Sequence[np.ndarray],Sequence[np.ndarray]],float]]]=None,layer_direct_compare_metrics:Optional[Mapping[str,Callable[[Sequence[np.ndarray],Sequence[np.ndarray],float,int],float]]]=None,denylisted_ops:Optional[List[str]]=None,denylisted_nodes:Optional[List[str]]=None,fully_quantize:bool=False)->None
tf.compat.v1.lite.experimental.QuantizationDebugger(quant_debug_model_path:Optional[str]=None,quant_debug_model_content:Optional[bytes]=None,float_model_path:Optional[str]=None,float_model_content:Optional[bytes]=None,debug_dataset:Optional[Callable[[],Iterable[Sequence[np.ndarray]]]]=None,debug_options:Optional[tf.lite.experimental.QuantizationDebugOptions]=None,converter:Optional[TFLiteConverter]=None)->Nonetf.lite.experimental.QuantizationDebugOptions
tf.compat.v1.lite.experimental.authoring.compatible(target=None,converter_target_spec=None,**kwargs)
tf.compat.v1.lite.experimental.convert_op_hints_to_stubs(session=None,graph_def=None,write_callback=(lambdagraph_def,comments:None))
tf.compat.v1.lite.experimental.load_delegate(library,options=None)
tf.compat.v1.lite.toco_convert(input_data,input_tensors,output_tensors,*args,**kwargs)
tf.compat.v1.load_file_system_library(library_filename)
tf.compat.v1.load_library(library_location)
tf.compat.v1.load_op_library(library_filename)
tf.compat.v1.local_variables(scope=None)
tf.compat.v1.local_variables_initializer()
tf.compat.v1.log(x,name=None)
tf.compat.v1.log1p(x,name=None)
tf.compat.v1.log_sigmoid(x,name=None)
tf.compat.v1.logging.TaskLevelStatusMessage(msg)
tf.compat.v1.logging.debug(msg,*args,**kwargs)
tf.compat.v1.logging.error(msg,*args,**kwargs)
tf.compat.v1.logging.fatal(msg,*args,**kwargs)
tf.compat.v1.logging.flush()
tf.compat.v1.logging.get_verbosity()
tf.compat.v1.logging.info(msg,*args,**kwargs)
tf.compat.v1.logging.log(level,msg,*args,**kwargs)
tf.compat.v1.logging.log_every_n(level,msg,n,*args)
tf.compat.v1.logging.log_first_n(level,msg,n,*args)
tf.compat.v1.logging.log_if(level,msg,condition,*args)
tf.compat.v1.logging.set_verbosity(v)
tf.compat.v1.logging.vlog(level,msg,*args,**kwargs)
tf.compat.v1.logging.warn(msg,*args,**kwargs)
tf.compat.v1.logging.warning(msg,*args,**kwargs)
tf.compat.v1.logical_and(x,y,name=None)
tf.compat.v1.logical_not(x,name=None)
tf.compat.v1.logical_or(x,y,name=None)
tf.compat.v1.logical_xor(x,y,name='LogicalXor')
tf.compat.v1.lookup.KeyValueTensorInitializer(keys,values,key_dtype=None,value_dtype=None,name=None)
tf.compat.v1.lookup.StaticHashTable(initializer,default_value,name=None)
tf.compat.v1.lookup.StaticVocabularyTable(initializer,num_oov_buckets,lookup_key_dtype=None,name=None)
tf.compat.v1.lookup.TextFileInitializer(filename,key_dtype,key_index,value_dtype,value_index,vocab_size=None,delimiter='\t',name=None,value_index_offset=0)
tf.compat.v1.lookup.experimental.DenseHashTable(key_dtype,value_dtype,default_value,empty_key,deleted_key,initial_num_buckets=None,name='MutableDenseHashTable',checkpoint=True)
tf.compat.v1.lookup.experimental.MutableHashTable(key_dtype,value_dtype,default_value,name='MutableHashTable',checkpoint=True)
tf.compat.v1.losses.absolute_difference(labels,predictions,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)
tf.compat.v1.losses.add_loss(loss,loss_collection=tf.GraphKeys.LOSSES)
tf.compat.v1.losses.compute_weighted_loss(losses,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)
tf.compat.v1.losses.cosine_distance(labels,predictions,axis=None,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS,dim=None)
tf.compat.v1.losses.get_losses(scope=None,loss_collection=tf.GraphKeys.LOSSES)
tf.compat.v1.losses.get_regularization_loss(scope=None,name='total_regularization_loss')
tf.compat.v1.losses.get_regularization_losses(scope=None)
tf.compat.v1.losses.get_total_loss(add_regularization_losses=True,name='total_loss',scope=None)
tf.compat.v1.losses.hinge_loss(labels,logits,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)
tf.compat.v1.losses.huber_loss(labels,predictions,weights=1.0,delta=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)
tf.compat.v1.losses.log_loss(labels,predictions,weights=1.0,epsilon=1e-07,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)
tf.compat.v1.losses.mean_pairwise_squared_error(labels,predictions,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES)
tf.compat.v1.losses.mean_squared_error(labels,predictions,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)
tf.compat.v1.losses.sigmoid_cross_entropy(multi_class_labels,logits,weights=1.0,label_smoothing=0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)
tf.compat.v1.losses.softmax_cross_entropy(onehot_labels,logits,weights=1.0,label_smoothing=0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)
tf.compat.v1.losses.sparse_softmax_cross_entropy(labels,logits,weights=1.0,scope=None,loss_collection=tf.GraphKeys.LOSSES,reduction=Reduction.SUM_BY_NONZERO_WEIGHTS)
tf.compat.v1.make_ndarray(tensor)
tf.compat.v1.make_template(name_,func_,create_scope_now_=False,unique_name_=None,custom_getter_=None,**kwargs)
tf.compat.v1.make_tensor_proto(values,dtype=None,shape=None,verify_shape=False,allow_broadcast=False)
tf.compat.v1.manip.batch_to_space_nd(input,block_shape,crops,name=None)
tf.compat.v1.manip.gather_nd(params,indices,name=None,batch_dims=0)
tf.compat.v1.manip.reshape(tensor,shape,name=None)
tf.compat.v1.manip.reverse(tensor,axis,name=None)
tf.compat.v1.manip.roll(input,shift,axis,name=None)
tf.compat.v1.manip.scatter_nd(indices,updates,shape,name=None)
tf.compat.v1.manip.space_to_batch_nd(input,block_shape,paddings,name=None)
tf.compat.v1.manip.tile(input,multiples,name=None)
tf.compat.v1.map_fn(fn,elems,dtype=None,parallel_iterations=None,back_prop=True,swap_memory=False,infer_shape=True,name=None,fn_output_signature=None)
tf.compat.v1.matching_files(pattern,name=None)
tf.compat.v1.math.abs(x,name=None)
tf.compat.v1.math.accumulate_n(inputs,shape=None,tensor_dtype=None,name=None)
tf.compat.v1.math.acos(x,name=None)
tf.compat.v1.math.acosh(x,name=None)
tf.compat.v1.math.add(x,y,name=None)
tf.compat.v1.math.add_n(inputs,name=None)
tf.compat.v1.math.angle(input,name=None)
tf.compat.v1.math.argmax(input,axis=None,name=None,dimension=None,output_type=tf.dtypes.int64)
tf.compat.v1.math.argmin(input,axis=None,name=None,dimension=None,output_type=tf.dtypes.int64)
tf.compat.v1.math.asin(x,name=None)
tf.compat.v1.math.asinh(x,name=None)
tf.compat.v1.math.atan(x,name=None)
tf.compat.v1.math.atan2(y,x,name=None)
tf.compat.v1.math.atanh(x,name=None)
tf.compat.v1.math.bessel_i0(x,name=None)
tf.compat.v1.math.bessel_i0e(x,name=None)
tf.compat.v1.math.bessel_i1(x,name=None)
tf.compat.v1.math.bessel_i1e(x,name=None)
tf.compat.v1.math.betainc(a,b,x,name=None)
tf.compat.v1.math.bincount(arr,weights=None,minlength=None,maxlength=None,dtype=tf.dtypes.int32)
tf.compat.v1.math.ceil(x,name=None)
tf.compat.v1.math.confusion_matrix(labels,predictions,num_classes=None,dtype=tf.dtypes.int32,name=None,weights=None)
tf.compat.v1.math.conj(x,name=None)
tf.compat.v1.math.cos(x,name=None)
tf.compat.v1.math.cosh(x,name=None)
tf.compat.v1.math.count_nonzero(input_tensor=None,axis=None,keepdims=None,dtype=tf.dtypes.int64,name=None,reduction_indices=None,keep_dims=None,input=None)
tf.compat.v1.math.cumprod(x,axis=0,exclusive=False,reverse=False,name=None)
tf.compat.v1.math.cumsum(x,axis=0,exclusive=False,reverse=False,name=None)
tf.compat.v1.math.cumulative_logsumexp(x,axis=0,exclusive=False,reverse=False,name=None)
tf.compat.v1.math.digamma(x,name=None)
tf.compat.v1.math.divide(x,y,name=None)
tf.compat.v1.math.divide_no_nan(x,y,name=None)
tf.compat.v1.math.equal(x,y,name=None)
tf.compat.v1.math.erf(x,name=None)
tf.compat.v1.math.erfc(x,name=None)
tf.compat.v1.math.erfcinv(x,name=None)
tf.compat.v1.math.erfinv(x,name=None)
tf.compat.v1.math.exp(x,name=None)
tf.compat.v1.math.expm1(x,name=None)
tf.compat.v1.math.floor(x,name=None)
tf.compat.v1.math.floordiv(x,y,name=None)
tf.compat.v1.math.floormod(x,y,name=None)
tf.compat.v1.math.greater(x,y,name=None)
tf.compat.v1.math.greater_equal(x,y,name=None)
tf.compat.v1.math.igamma(a,x,name=None)
tf.compat.v1.math.igammac(a,x,name=None)
tf.compat.v1.math.imag(input,name=None)
tf.compat.v1.math.in_top_k(predictions,targets,k,name=None)
tf.compat.v1.math.invert_permutation(x,name=None)
tf.compat.v1.math.is_finite(x,name=None)
tf.compat.v1.math.is_inf(x,name=None)
tf.compat.v1.math.is_nan(x,name=None)
tf.compat.v1.math.is_non_decreasing(x,name=None)
tf.compat.v1.math.is_strictly_increasing(x,name=None)
tf.compat.v1.math.l2_normalize(x,axis=None,epsilon=1e-12,name=None,dim=None)
tf.compat.v1.math.lbeta(x,name=None)
tf.compat.v1.math.less(x,y,name=None)
tf.compat.v1.math.less_equal(x,y,name=None)
tf.compat.v1.math.lgamma(x,name=None)
tf.compat.v1.math.log(x,name=None)
tf.compat.v1.math.log1p(x,name=None)
tf.compat.v1.math.log_sigmoid(x,name=None)
tf.compat.v1.math.log_softmax(logits,axis=None,name=None,dim=None)
tf.compat.v1.math.logical_and(x,y,name=None)
tf.compat.v1.math.logical_not(x,name=None)
tf.compat.v1.math.logical_or(x,y,name=None)
tf.compat.v1.math.logical_xor(x,y,name='LogicalXor')
tf.compat.v1.math.maximum(x,y,name=None)
tf.compat.v1.math.minimum(x,y,name=None)
tf.compat.v1.math.mod(x,y,name=None)
tf.compat.v1.math.multiply(x,y,name=None)
tf.compat.v1.math.multiply_no_nan(x,y,name=None)
tf.compat.v1.math.ndtri(x,name=None)
tf.compat.v1.math.negative(x,name=None)
tf.compat.v1.math.nextafter(x1,x2,name=None)
tf.compat.v1.math.not_equal(x,y,name=None)
tf.compat.v1.math.polygamma(a,x,name=None)
tf.compat.v1.math.polyval(coeffs,x,name=None)
tf.compat.v1.math.pow(x,y,name=None)
tf.compat.v1.math.real(input,name=None)
tf.compat.v1.math.reciprocal(x,name=None)
tf.compat.v1.math.reciprocal_no_nan(x,name=None)
tf.compat.v1.math.reduce_all(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.math.reduce_any(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.math.reduce_euclidean_norm(input_tensor,axis=None,keepdims=False,name=None)
tf.compat.v1.math.reduce_logsumexp(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.math.reduce_max(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.math.reduce_mean(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.math.reduce_min(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.math.reduce_prod(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.math.reduce_std(input_tensor,axis=None,keepdims=False,name=None)
tf.compat.v1.math.reduce_sum(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.math.reduce_variance(input_tensor,axis=None,keepdims=False,name=None)
tf.compat.v1.math.rint(x,name=None)
tf.compat.v1.math.round(x,name=None)
tf.compat.v1.math.rsqrt(x,name=None)
tf.compat.v1.math.scalar_mul(scalar,x,name=None)
tf.compat.v1.math.segment_max(data,segment_ids,name=None)
tf.compat.v1.math.segment_mean(data,segment_ids,name=None)
tf.compat.v1.math.segment_min(data,segment_ids,name=None)
tf.compat.v1.math.segment_prod(data,segment_ids,name=None)
tf.compat.v1.math.segment_sum(data,segment_ids,name=None)
tf.compat.v1.math.sigmoid(x,name=None)
tf.compat.v1.math.sign(x,name=None)
tf.compat.v1.math.sin(x,name=None)
tf.compat.v1.math.sinh(x,name=None)
tf.compat.v1.math.sobol_sample(dim,num_results,skip=0,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.math.softmax(logits,axis=None,name=None,dim=None)
tf.compat.v1.math.softplus(features,name=None)
tf.compat.v1.math.softsign(features,name=None)
tf.compat.v1.math.special.bessel_i0(x,name=None)
tf.compat.v1.math.special.bessel_i0e(x,name=None)
tf.compat.v1.math.special.bessel_i1(x,name=None)
tf.compat.v1.math.special.bessel_i1e(x,name=None)
tf.compat.v1.math.special.bessel_j0(x,name=None)
tf.compat.v1.math.special.bessel_j1(x,name=None)
tf.compat.v1.math.special.bessel_k0(x,name=None)
tf.compat.v1.math.special.bessel_k0e(x,name=None)
tf.compat.v1.math.special.bessel_k1(x,name=None)
tf.compat.v1.math.special.bessel_k1e(x,name=None)
tf.compat.v1.math.special.bessel_y0(x,name=None)
tf.compat.v1.math.special.bessel_y1(x,name=None)
tf.compat.v1.math.special.dawsn(x,name=None)
tf.compat.v1.math.special.expint(x,name=None)
tf.compat.v1.math.special.fresnel_cos(x,name=None)
tf.compat.v1.math.special.fresnel_sin(x,name=None)
tf.compat.v1.math.special.spence(x,name=None)
tf.compat.v1.math.sqrt(x,name=None)
tf.compat.v1.math.square(x,name=None)
tf.compat.v1.math.squared_difference(x,y,name=None)
tf.compat.v1.math.subtract(x,y,name=None)
tf.compat.v1.math.tan(x,name=None)
tf.compat.v1.math.tanh(x,name=None)
tf.compat.v1.math.top_k(input,k=1,sorted=True,name=None)
tf.compat.v1.math.truediv(x,y,name=None)
tf.compat.v1.math.unsorted_segment_max(data,segment_ids,num_segments,name=None)
tf.compat.v1.math.unsorted_segment_mean(data,segment_ids,num_segments,name=None)
tf.compat.v1.math.unsorted_segment_min(data,segment_ids,num_segments,name=None)
tf.compat.v1.math.unsorted_segment_prod(data,segment_ids,num_segments,name=None)
tf.compat.v1.math.unsorted_segment_sqrt_n(data,segment_ids,num_segments,name=None)
tf.compat.v1.math.unsorted_segment_sum(data,segment_ids,num_segments,name=None)
tf.compat.v1.math.xdivy(x,y,name=None)
tf.compat.v1.math.xlog1py(x,y,name=None)
tf.compat.v1.math.xlogy(x,y,name=None)
tf.compat.v1.math.zero_fraction(value,name=None)
tf.compat.v1.math.zeta(x,q,name=None)
tf.compat.v1.matmul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,a_is_sparse=False,b_is_sparse=False,output_type=None,name=None)
tf.compat.v1.matrix_band_part(input,num_lower,num_upper,name=None)
tf.compat.v1.matrix_determinant(input,name=None)
tf.compat.v1.matrix_diag(diagonal,name='diag',k=0,num_rows=-1,num_cols=-1,padding_value=0,align='RIGHT_LEFT')
tf.compat.v1.matrix_diag_part(input,name='diag_part',k=0,padding_value=0,align='RIGHT_LEFT')
tf.compat.v1.matrix_inverse(input,adjoint=False,name=None)
tf.compat.v1.matrix_set_diag(input,diagonal,name='set_diag',k=0,align='RIGHT_LEFT')
tf.compat.v1.matrix_solve(matrix,rhs,adjoint=False,name=None)
tf.compat.v1.matrix_solve_ls(matrix,rhs,l2_regularizer=0.0,fast=True,name=None)
tf.compat.v1.matrix_square_root(input,name=None)
tf.compat.v1.matrix_transpose(a,name='matrix_transpose',conjugate=False)
tf.compat.v1.matrix_triangular_solve(matrix,rhs,lower=True,adjoint=False,name=None)
tf.compat.v1.maximum(x,y,name=None)
tf.compat.v1.meshgrid(*args,**kwargs)
tf.compat.v1.metrics.accuracy(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.auc(labels,predictions,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,curve='ROC',name=None,summation_method='trapezoidal',thresholds=None)
tf.compat.v1.metrics.average_precision_at_k(labels,predictions,k,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.false_negatives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.false_negatives_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.false_positives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.false_positives_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.mean(values,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.mean_absolute_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.mean_cosine_distance(labels,predictions,dim,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.mean_iou(labels,predictions,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.mean_per_class_accuracy(labels,predictions,num_classes,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.mean_relative_error(labels,predictions,normalizer,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.mean_squared_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.mean_tensor(values,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.percentage_below(values,threshold,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.precision(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.precision_at_k(labels,predictions,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.precision_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.precision_at_top_k(labels,predictions_idx,k=None,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.recall(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.recall_at_k(labels,predictions,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.recall_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.recall_at_top_k(labels,predictions_idx,k=None,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.root_mean_squared_error(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.sensitivity_at_specificity(labels,predictions,specificity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.sparse_average_precision_at_k(labels,predictions,k,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.sparse_precision_at_k(labels,predictions,k,class_id=None,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.specificity_at_sensitivity(labels,predictions,sensitivity,weights=None,num_thresholds=200,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.true_negatives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.true_negatives_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.true_positives(labels,predictions,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.metrics.true_positives_at_thresholds(labels,predictions,thresholds,weights=None,metrics_collections=None,updates_collections=None,name=None)
tf.compat.v1.min_max_variable_partitioner(max_partitions=1,axis=0,min_slice_size=(256<<10),bytes_per_string_element=16)
tf.compat.v1.minimum(x,y,name=None)
tf.compat.v1.mixed_precision.DynamicLossScale(initial_loss_scale=(2**15),increment_period=2000,multiplier=2.0)
tf.compat.v1.mixed_precision.FixedLossScale(loss_scale_value)
tf.compat.v1.mixed_precision.LossScale()
tf.compat.v1.mixed_precision.MixedPrecisionLossScaleOptimizer(opt,loss_scale)
tf.compat.v1.mixed_precision.disable_mixed_precision_graph_rewrite()
tf.compat.v1.mixed_precision.enable_mixed_precision_graph_rewrite(opt,loss_scale='dynamic')
tf.compat.v1.mixed_precision.experimental.DynamicLossScale(initial_loss_scale=(2**15),increment_period=2000,multiplier=2.0)
tf.compat.v1.mixed_precision.experimental.FixedLossScale(loss_scale_value)
tf.compat.v1.mixed_precision.experimental.LossScale()
tf.compat.v1.mlir.experimental.convert_function(concrete_function,pass_pipeline='tf-standard-pipeline',show_debug_info=False)
tf.compat.v1.mlir.experimental.convert_graph_def(graph_def,pass_pipeline='tf-standard-pipeline',show_debug_info=False)
tf.compat.v1.mod(x,y,name=None)
tf.compat.v1.model_variables(scope=None)
tf.compat.v1.moving_average_variables(scope=None)
tf.compat.v1.multinomial(logits,num_samples,seed=None,name=None,output_dtype=None)
tf.compat.v1.multiply(x,y,name=None)
tf.compat.v1.name_scope(name,default_name=None,values=None)
tf.compat.v1.negative(x,name=None)
tf.compat.v1.nest.assert_same_structure(nest1,nest2,check_types=True,expand_composites=False)
tf.compat.v1.nest.flatten(structure,expand_composites=False)
tf.compat.v1.nest.is_nested(seq)
tf.compat.v1.nest.map_structure(func,*structure,**kwargs)
tf.compat.v1.nest.pack_sequence_as(structure,flat_sequence,expand_composites=False)
tf.compat.v1.nn.all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,name=None)
tf.compat.v1.nn.atrous_conv2d(value,filters,rate,padding,name=None)
tf.compat.v1.nn.atrous_conv2d_transpose(value,filters,output_shape,rate,padding,name=None)
tf.compat.v1.nn.avg_pool(value,ksize,strides,padding,data_format='NHWC',name=None,input=None)
tf.compat.v1.nn.avg_pool1d(input,ksize,strides,padding,data_format='NWC',name=None)
tf.compat.v1.nn.avg_pool2d(value,ksize,strides,padding,data_format='NHWC',name=None,input=None)
tf.compat.v1.nn.avg_pool3d(input,ksize,strides,padding,data_format='NDHWC',name=None)
tf.compat.v1.nn.avg_pool_v2(input,ksize,strides,padding,data_format=None,name=None)
tf.compat.v1.nn.batch_norm_with_global_normalization(t=None,m=None,v=None,beta=None,gamma=None,variance_epsilon=None,scale_after_normalization=None,name=None,input=None,mean=None,variance=None)
tf.compat.v1.nn.batch_normalization(x,mean,variance,offset,scale,variance_epsilon,name=None)
tf.compat.v1.nn.bias_add(value,bias,data_format=None,name=None)
tf.compat.v1.nn.bidirectional_dynamic_rnn(cell_fw,cell_bw,inputs,sequence_length=None,initial_state_fw=None,initial_state_bw=None,dtype=None,parallel_iterations=None,swap_memory=False,time_major=False,scope=None)
tf.compat.v1.nn.collapse_repeated(labels,seq_length,name=None)
tf.compat.v1.nn.compute_accidental_hits(true_classes,sampled_candidates,num_true,seed=None,name=None)
tf.compat.v1.nn.compute_average_loss(per_example_loss,sample_weight=None,global_batch_size=None)
tf.compat.v1.nn.conv1d(value=None,filters=None,stride=None,padding=None,use_cudnn_on_gpu=None,data_format=None,name=None,input=None,dilations=None)
tf.compat.v1.nn.conv1d_transpose(input,filters,output_shape,strides,padding='SAME',data_format='NWC',dilations=None,name=None)
tf.compat.v1.nn.conv2d(input,filter=None,strides=None,padding=None,use_cudnn_on_gpu=True,data_format='NHWC',dilations=[1,1,1,1],name=None,filters=None)
tf.compat.v1.nn.conv2d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,use_cudnn_on_gpu=True,data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.compat.v1.nn.conv2d_backprop_input(input_sizes,filter=None,out_backprop=None,strides=None,padding=None,use_cudnn_on_gpu=True,data_format='NHWC',dilations=[1,1,1,1],name=None,filters=None)
tf.compat.v1.nn.conv2d_transpose(value=None,filter=None,output_shape=None,strides=None,padding='SAME',data_format='NHWC',name=None,input=None,filters=None,dilations=None)
tf.compat.v1.nn.conv3d(input,filter=None,strides=None,padding=None,data_format='NDHWC',dilations=[1,1,1,1,1],name=None,filters=None)
tf.compat.v1.nn.conv3d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format='NDHWC',dilations=[1,1,1,1,1],name=None)
tf.compat.v1.nn.conv3d_backprop_filter_v2(input,filter_sizes,out_backprop,strides,padding,data_format='NDHWC',dilations=[1,1,1,1,1],name=None)
tf.compat.v1.nn.conv3d_transpose(value,filter=None,output_shape=None,strides=None,padding='SAME',data_format='NDHWC',name=None,input=None,filters=None,dilations=None)
tf.compat.v1.nn.conv_transpose(input,filters,output_shape,strides,padding='SAME',data_format=None,dilations=None,name=None)
tf.compat.v1.nn.convolution(input,filter,padding,strides=None,dilation_rate=None,name=None,data_format=None,filters=None,dilations=None)
tf.compat.v1.nn.crelu(features,name=None,axis=-1)
tf.compat.v1.nn.ctc_beam_search_decoder(inputs,sequence_length,beam_width=100,top_paths=1,merge_repeated=True)
tf.compat.v1.nn.ctc_beam_search_decoder_v2(inputs,sequence_length,beam_width=100,top_paths=1)
tf.compat.v1.nn.ctc_greedy_decoder(inputs,sequence_length,merge_repeated=True,blank_index=None)
tf.compat.v1.nn.ctc_loss(labels,inputs=None,sequence_length=None,preprocess_collapse_repeated=False,ctc_merge_repeated=True,ignore_longer_outputs_than_inputs=False,time_major=True,logits=None)
tf.compat.v1.nn.ctc_loss_v2(labels,logits,label_length,logit_length,logits_time_major=True,unique=None,blank_index=None,name=None)
tf.compat.v1.nn.ctc_unique_labels(labels,name=None)
tf.compat.v1.nn.depth_to_space(input,block_size,name=None,data_format='NHWC')
tf.compat.v1.nn.depthwise_conv2d(input,filter,strides,padding,rate=None,name=None,data_format=None,dilations=None)
tf.compat.v1.nn.depthwise_conv2d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.compat.v1.nn.depthwise_conv2d_backprop_input(input_sizes,filter,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.compat.v1.nn.depthwise_conv2d_native(input,filter,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.compat.v1.nn.depthwise_conv2d_native_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.compat.v1.nn.depthwise_conv2d_native_backprop_input(input_sizes,filter,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.compat.v1.nn.dilation2d(input,filter=None,strides=None,rates=None,padding=None,name=None,filters=None,dilations=None)
tf.compat.v1.nn.dropout(x,keep_prob=None,noise_shape=None,seed=None,name=None,rate=None)
tf.compat.v1.nn.dynamic_rnn(cell,inputs,sequence_length=None,initial_state=None,dtype=None,parallel_iterations=None,swap_memory=False,time_major=False,scope=None)
tf.compat.v1.nn.elu(features,name=None)
tf.compat.v1.nn.embedding_lookup(params,ids,partition_strategy='mod',name=None,validate_indices=True,max_norm=None)
tf.compat.v1.nn.embedding_lookup_sparse(params,sp_ids,sp_weights,partition_strategy='mod',name=None,combiner=None,max_norm=None)
tf.compat.v1.nn.erosion2d(value,kernel,strides,rates,padding,name=None)
tf.compat.v1.nn.experimental.stateless_dropout(x,rate,seed,rng_alg=None,noise_shape=None,name=None)
tf.compat.v1.nn.fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1.0,num_reserved_ids=0,num_shards=1,shard=0,unigrams=(),seed=None,name=None)
tf.compat.v1.nn.fractional_avg_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,deterministic=False,seed=0,seed2=0,name=None)
tf.compat.v1.nn.fractional_max_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,deterministic=False,seed=0,seed2=0,name=None)
tf.compat.v1.nn.fused_batch_norm(x,scale,offset,mean=None,variance=None,epsilon=0.001,data_format='NHWC',is_training=True,name=None,exponential_avg_factor=1.0)
tf.compat.v1.nn.in_top_k(predictions,targets,k,name=None)
tf.compat.v1.nn.l2_loss(t,name=None)
tf.compat.v1.nn.l2_normalize(x,axis=None,epsilon=1e-12,name=None,dim=None)
tf.compat.v1.nn.leaky_relu(features,alpha=0.2,name=None)
tf.compat.v1.nn.learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tf.compat.v1.nn.local_response_normalization(input,depth_radius=5,bias=1,alpha=1,beta=0.5,name=None)
tf.compat.v1.nn.log_poisson_loss(targets,log_input,compute_full_loss=False,name=None)
tf.compat.v1.nn.log_softmax(logits,axis=None,name=None,dim=None)
tf.compat.v1.nn.log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tf.compat.v1.nn.lrn(input,depth_radius=5,bias=1,alpha=1,beta=0.5,name=None)
tf.compat.v1.nn.max_pool(value,ksize,strides,padding,data_format='NHWC',name=None,input=None)
tf.compat.v1.nn.max_pool1d(input,ksize,strides,padding,data_format='NWC',name=None)
tf.compat.v1.nn.max_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)
tf.compat.v1.nn.max_pool3d(input,ksize,strides,padding,data_format='NDHWC',name=None)
tf.compat.v1.nn.max_pool_v2(input,ksize,strides,padding,data_format=None,name=None)
tf.compat.v1.nn.max_pool_with_argmax(input,ksize,strides,padding,data_format='NHWC',Targmax=None,name=None,output_dtype=None,include_batch_in_index=False)
tf.compat.v1.nn.moments(x,axes,shift=None,name=None,keep_dims=None,keepdims=None)
tf.compat.v1.nn.nce_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=False,partition_strategy='mod',name='nce_loss')
tf.compat.v1.nn.normalize_moments(counts,mean_ss,variance_ss,shift,name=None)
tf.compat.v1.nn.pool(input,window_shape,pooling_type,padding,dilation_rate=None,strides=None,name=None,data_format=None,dilations=None)
tf.compat.v1.nn.quantized_avg_pool(input,min_input,max_input,ksize,strides,padding,name=None)
tf.compat.v1.nn.quantized_conv2d(input,filter,min_input,max_input,min_filter,max_filter,strides,padding,out_type=tf.dtypes.qint32,dilations=[1,1,1,1],name=None)
tf.compat.v1.nn.quantized_max_pool(input,min_input,max_input,ksize,strides,padding,name=None)
tf.compat.v1.nn.quantized_relu_x(features,max_value,min_features,max_features,out_type=tf.dtypes.quint8,name=None)
tf.compat.v1.nn.raw_rnn(cell,loop_fn,parallel_iterations=None,swap_memory=False,scope=None)
tf.compat.v1.nn.relu(features,name=None)
tf.compat.v1.nn.relu6(features,name=None)
tf.compat.v1.nn.relu_layer(x,weights,biases,name=None)
tf.compat.v1.nn.rnn_cell.BasicLSTMCell(num_units,forget_bias=1.0,state_is_tuple=True,activation=None,reuse=None,name=None,dtype=None,**kwargs)
tf.compat.v1.nn.rnn_cell.BasicRNNCell(num_units,activation=None,reuse=None,name=None,dtype=None,**kwargs)
tf.compat.v1.nn.rnn_cell.DeviceWrapper(*args,**kwargs)
tf.compat.v1.nn.rnn_cell.DropoutWrapper(*args,**kwargs)
tf.compat.v1.nn.rnn_cell.GRUCell(num_units,activation=None,reuse=None,kernel_initializer=None,bias_initializer=None,name=None,dtype=None,**kwargs)
tf.compat.v1.nn.rnn_cell.LSTMCell(num_units,use_peepholes=False,cell_clip=None,initializer=None,num_proj=None,proj_clip=None,num_unit_shards=None,num_proj_shards=None,forget_bias=1.0,state_is_tuple=True,activation=None,reuse=None,name=None,dtype=None,**kwargs)
tf.compat.v1.nn.rnn_cell.LSTMStateTuple(c,h)
tf.compat.v1.nn.rnn_cell.MultiRNNCell(cells,state_is_tuple=True)
tf.compat.v1.nn.rnn_cell.RNNCell(trainable=True,name=None,dtype=None,**kwargs)
tf.compat.v1.nn.rnn_cell.ResidualWrapper(*args,**kwargs)
tf.compat.v1.nn.safe_embedding_lookup_sparse(embedding_weights,sparse_ids,sparse_weights=None,combiner='mean',default_id=None,name=None,partition_strategy='div',max_norm=None)
tf.compat.v1.nn.sampled_softmax_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=True,partition_strategy='mod',name='sampled_softmax_loss',seed=None)
tf.compat.v1.nn.scale_regularization_loss(regularization_loss)
tf.compat.v1.nn.selu(features,name=None)
tf.compat.v1.nn.separable_conv2d(input,depthwise_filter,pointwise_filter,strides,padding,rate=None,name=None,data_format=None,dilations=None)
tf.compat.v1.nn.sigmoid(x,name=None)
tf.compat.v1.nn.sigmoid_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,name=None)
tf.compat.v1.nn.silu(features)
tf.compat.v1.nn.softmax(logits,axis=None,name=None,dim=None)
tf.compat.v1.nn.softmax_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,dim=-1,name=None,axis=None)
tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2(labels,logits,axis=None,name=None,dim=None)
tf.compat.v1.nn.softplus(features,name=None)
tf.compat.v1.nn.softsign(features,name=None)
tf.compat.v1.nn.space_to_batch(input,paddings,block_size=None,name=None,block_shape=None)
tf.compat.v1.nn.space_to_depth(input,block_size,name=None,data_format='NHWC')
tf.compat.v1.nn.sparse_softmax_cross_entropy_with_logits(_sentinel=None,labels=None,logits=None,name=None)
tf.compat.v1.nn.static_bidirectional_rnn(cell_fw,cell_bw,inputs,initial_state_fw=None,initial_state_bw=None,dtype=None,sequence_length=None,scope=None)
tf.compat.v1.nn.static_rnn(cell,inputs,initial_state=None,dtype=None,sequence_length=None,scope=None)
tf.compat.v1.nn.static_state_saving_rnn(cell,inputs,state_saver,state_name,sequence_length=None,scope=None)
tf.compat.v1.nn.sufficient_statistics(x,axes,shift=None,keep_dims=None,name=None,keepdims=None)
tf.compat.v1.nn.swish(features)
tf.compat.v1.nn.tanh(x,name=None)
tf.compat.v1.nn.top_k(input,k=1,sorted=True,name=None)
tf.compat.v1.nn.uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tf.compat.v1.nn.weighted_cross_entropy_with_logits(labels=None,logits=None,pos_weight=None,name=None,targets=None)
tf.compat.v1.nn.weighted_moments(x,axes,frequency_weights,name=None,keep_dims=None,keepdims=None)
tf.compat.v1.nn.with_space_to_batch(input,dilation_rate,padding,op,filter_shape=None,spatial_dims=None,data_format=None)
tf.compat.v1.nn.xw_plus_b(x,weights,biases,name=None)
tf.compat.v1.nn.zero_fraction(value,name=None)
tf.compat.v1.no_gradient(op_type)
tf.compat.v1.no_op(name=None)
tf.compat.v1.no_regularizer(_)
tf.compat.v1.nondifferentiable_batch_function(num_batch_threads,max_batch_size,batch_timeout_micros,allowed_batch_sizes=None,max_enqueued_batches=10,autograph=True,enable_large_batch_splitting=True)
tf.compat.v1.norm(tensor,ord='euclidean',axis=None,keepdims=None,name=None,keep_dims=None)
tf.compat.v1.not_equal(x,y,name=None)
tf.compat.v1.numpy_function(func,inp,Tout,name=None)
tf.compat.v1.one_hot(indices,depth,on_value=None,off_value=None,axis=None,dtype=None,name=None)
tf.compat.v1.ones(shape,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.ones_initializer(dtype=tf.dtypes.float32)
tf.compat.v1.ones_like(tensor,dtype=None,name=None,optimize=True)
tf.compat.v1.orthogonal_initializer(gain=1.0,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.pad(tensor,paddings,mode='CONSTANT',name=None,constant_values=0)
tf.compat.v1.parallel_stack(values,name='parallel_stack')
tf.compat.v1.parse_example(serialized,features,name=None,example_names=None)
tf.compat.v1.parse_single_example(serialized,features,name=None,example_names=None)
tf.compat.v1.parse_single_sequence_example(serialized,context_features=None,sequence_features=None,example_name=None,name=None)
tf.compat.v1.parse_tensor(serialized,out_type,name=None)
tf.compat.v1.placeholder(dtype,shape=None,name=None)
tf.compat.v1.placeholder_with_default(input,shape,name=None)
tf.compat.v1.polygamma(a,x,name=None)
tf.compat.v1.pow(x,y,name=None)
tf.compat.v1.print(*inputs,**kwargs)
tf.compat.v1.profiler.ProfileOptionBuilder(options=None)
tf.compat.v1.profiler.Profiler(graph=None,op_log=None)
tf.compat.v1.profiler.advise(graph=None,run_meta=None,options=_DEFAULT_ADVISE_OPTIONS)
tf.compat.v1.profiler.profile(graph=None,run_meta=None,op_log=None,cmd='scope',options=_DEFAULT_PROFILE_OPTIONS)
tf.compat.v1.profiler.write_op_log(graph,log_dir,op_log=None,run_meta=None,add_trace=True)
tf.compat.v1.py_func(func,inp,Tout,stateful=True,name=None)
tf.compat.v1.py_function(func,inp,Tout,name=None)
tf.compat.v1.python_io.TFRecordOptions(compression_type=None,flush_mode=None,input_buffer_size=None,output_buffer_size=None,window_bits=None,compression_level=None,compression_method=None,mem_level=None,compression_strategy=None)
tf.compat.v1.python_io.TFRecordWriter(path,options=None)
tf.compat.v1.qr(input,full_matrices=False,name=None)
tf.compat.v1.quantization.dequantize(input,min_range,max_range,mode='MIN_COMBINED',name=None,axis=None,narrow_range=False,dtype=tf.dtypes.float32)
tf.compat.v1.quantization.fake_quant_with_min_max_args(inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.quantization.fake_quant_with_min_max_args_gradient(gradients,inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.quantization.fake_quant_with_min_max_vars(inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.quantization.fake_quant_with_min_max_vars_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.quantization.fake_quant_with_min_max_vars_per_channel(inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.quantization.fake_quant_with_min_max_vars_per_channel_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.compat.v1.quantization.quantize(input,min_range,max_range,T,mode='MIN_COMBINED',round_mode='HALF_AWAY_FROM_ZERO',name=None,narrow_range=False,axis=None,ensure_minimum_range=0.01)
tf.compat.v1.quantization.quantize_and_dequantize(input,input_min,input_max,signed_input=True,num_bits=8,range_given=False,round_mode='HALF_TO_EVEN',name=None,narrow_range=False,axis=None)
tf.compat.v1.quantization.quantize_and_dequantize_v2(input,input_min,input_max,signed_input=True,num_bits=8,range_given=False,round_mode='HALF_TO_EVEN',name=None,narrow_range=False,axis=None)
tf.compat.v1.quantization.quantized_concat(concat_dim,values,input_mins,input_maxes,name=None)
tf.compat.v1.quantize(input,min_range,max_range,T,mode='MIN_COMBINED',round_mode='HALF_AWAY_FROM_ZERO',name=None,narrow_range=False,axis=None,ensure_minimum_range=0.01)
tf.compat.v1.quantize_v2(input,min_range,max_range,T,mode='MIN_COMBINED',name=None,round_mode='HALF_AWAY_FROM_ZERO',narrow_range=False,axis=None,ensure_minimum_range=0.01)
tf.compat.v1.quantized_concat(concat_dim,values,input_mins,input_maxes,name=None)
tf.compat.v1.queue.FIFOQueue(capacity,dtypes,shapes=None,names=None,shared_name=None,name='fifo_queue')
tf.compat.v1.queue.PaddingFIFOQueue(capacity,dtypes,shapes,names=None,shared_name=None,name='padding_fifo_queue')
tf.compat.v1.queue.PriorityQueue(capacity,types,shapes=None,names=None,shared_name=None,name='priority_queue')
tf.compat.v1.queue.QueueBase(dtypes,shapes,names,queue_ref)
tf.compat.v1.queue.RandomShuffleQueue(capacity,min_after_dequeue,dtypes,shapes=None,names=None,seed=None,shared_name=None,name='random_shuffle_queue')
tf.compat.v1.ragged.RaggedTensorValue(values,row_splits)
tf.compat.v1.ragged.boolean_mask(data,mask,name=None)
tf.compat.v1.ragged.constant(pylist,dtype=None,ragged_rank=None,inner_shape=None,name=None,row_splits_dtype=tf.dtypes.int64)
tf.compat.v1.ragged.constant_value(pylist,dtype=None,ragged_rank=None,inner_shape=None,row_splits_dtype='int64')
tf.compat.v1.ragged.cross(inputs,name=None)
tf.compat.v1.ragged.cross_hashed(inputs,num_buckets=0,hash_key=None,name=None)
tf.compat.v1.ragged.map_flat_values(op,*args,**kwargs)
tf.compat.v1.ragged.placeholder(dtype,ragged_rank,value_shape=None,name=None)
tf.compat.v1.ragged.range(starts,limits=None,deltas=1,dtype=None,name=None,row_splits_dtype=tf.dtypes.int64)
tf.compat.v1.ragged.row_splits_to_segment_ids(splits,name=None,out_type=None)
tf.compat.v1.ragged.segment_ids_to_row_splits(segment_ids,num_segments=None,out_type=None,name=None)
tf.compat.v1.ragged.stack(values:typing.List[ragged_tensor.RaggedOrDense],axis=0,name=None)
tf.compat.v1.ragged.stack_dynamic_partitions(data,partitions,num_partitions,name=None)
tf.compat.v1.random.Generator(copy_from=None,state=None,alg=None)
tf.compat.v1.random.all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,name=None)
tf.compat.v1.random.categorical(logits,num_samples,dtype=None,seed=None,name=None)
tf.compat.v1.random.create_rng_state(seed,alg)
tf.compat.v1.random.experimental.Generator(copy_from=None,state=None,alg=None)
tf.compat.v1.random.experimental.create_rng_state(seed,alg)
tf.compat.v1.random.experimental.get_global_generator()
tf.compat.v1.random.experimental.set_global_generator(generator)
tf.compat.v1.random.experimental.stateless_fold_in(seed,data,alg='auto_select')
tf.compat.v1.random.experimental.stateless_split(seed,num=2,alg='auto_select')
tf.compat.v1.random.fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1.0,num_reserved_ids=0,num_shards=1,shard=0,unigrams=(),seed=None,name=None)
tf.compat.v1.random.gamma(shape,alpha,beta=None,dtype=tf.dtypes.float32,seed=None,name=None)
tf.compat.v1.random.get_global_generator()
tf.compat.v1.random.get_seed(op_seed)
tf.compat.v1.random.learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tf.compat.v1.random.log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tf.compat.v1.random.multinomial(logits,num_samples,seed=None,name=None,output_dtype=None)
tf.compat.v1.random.normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)
tf.compat.v1.random.poisson(lam,shape,dtype=tf.dtypes.float32,seed=None,name=None)
tf.compat.v1.random.set_global_generator(generator)
tf.compat.v1.random.set_random_seed(seed)
tf.compat.v1.random.shuffle(value,seed=None,name=None)
tf.compat.v1.random.stateless_binomial(shape,seed,counts,probs,output_dtype=tf.dtypes.int32,name=None)
tf.compat.v1.random.stateless_categorical(logits,num_samples,seed,dtype=tf.dtypes.int64,name=None)
tf.compat.v1.random.stateless_gamma(shape,seed,alpha,beta=None,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.random.stateless_multinomial(logits,num_samples,seed,output_dtype=tf.dtypes.int64,name=None)
tf.compat.v1.random.stateless_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None,alg='auto_select')
tf.compat.v1.random.stateless_parameterized_truncated_normal(shape,seed,means=0.0,stddevs=1.0,minvals=-2.0,maxvals=2.0,name=None)
tf.compat.v1.random.stateless_poisson(shape,seed,lam,dtype=tf.dtypes.int32,name=None)
tf.compat.v1.random.stateless_truncated_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None,alg='auto_select')
tf.compat.v1.random.stateless_uniform(shape,seed,minval=0,maxval=None,dtype=tf.dtypes.float32,name=None,alg='auto_select')
tf.compat.v1.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)
tf.compat.v1.random.uniform(shape,minval=0,maxval=None,dtype=tf.dtypes.float32,seed=None,name=None)
tf.compat.v1.random.uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tf.compat.v1.random_crop(value,size,seed=None,name=None)
tf.compat.v1.random_gamma(shape,alpha,beta=None,dtype=tf.dtypes.float32,seed=None,name=None)
tf.compat.v1.random_normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)
tf.compat.v1.random_normal_initializer(mean=0.0,stddev=1.0,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.random_poisson(lam,shape,dtype=tf.dtypes.float32,seed=None,name=None)
tf.compat.v1.random_shuffle(value,seed=None,name=None)
tf.compat.v1.random_uniform(shape,minval=0,maxval=None,dtype=tf.dtypes.float32,seed=None,name=None)
tf.compat.v1.random_uniform_initializer(minval=0.0,maxval=None,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.range(limit,delta=1,dtype=None,name='range')tf.compat.v1.range(start,limit,delta=1,dtype=None,name='range')
tf.compat.v1.rank(input,name=None)
tf.compat.v1.read_file(filename,name=None)
tf.compat.v1.real(input,name=None)
tf.compat.v1.realdiv(x,y,name=None)
tf.compat.v1.reciprocal(x,name=None)
tf.compat.v1.recompute_grad(f)
tf.compat.v1.reduce_all(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.reduce_any(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.reduce_join(inputs,axis=None,keep_dims=None,separator='',name=None,reduction_indices=None,keepdims=None)
tf.compat.v1.reduce_logsumexp(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.reduce_max(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.reduce_mean(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.reduce_min(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.reduce_prod(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.reduce_sum(input_tensor,axis=None,keepdims=None,name=None,reduction_indices=None,keep_dims=None)
tf.compat.v1.regex_replace(input,pattern,rewrite,replace_global=True,name=None)
tf.compat.v1.register_tensor_conversion_function(base_type,conversion_func,priority=100)
tf.compat.v1.repeat(input,repeats,axis=None,name=None)
tf.compat.v1.report_uninitialized_variables(var_list=None,name='report_uninitialized_variables')
tf.compat.v1.required_space_to_batch_paddings(input_shape,block_shape,base_paddings=None,name=None)
tf.compat.v1.reset_default_graph()
tf.compat.v1.reshape(tensor,shape,name=None)
tf.compat.v1.resource_loader.get_data_files_path()
tf.compat.v1.resource_loader.get_path_to_datafile(path)
tf.compat.v1.resource_loader.get_root_dir_with_all_resources()
tf.compat.v1.resource_loader.load_resource(path)
tf.compat.v1.resource_loader.readahead_file_path(path,readahead='128M')
tf.compat.v1.resource_variables_enabled()
tf.compat.v1.reverse(tensor,axis,name=None)
tf.compat.v1.reverse_sequence(input,seq_lengths,seq_axis=None,batch_axis=None,name=None,seq_dim=None,batch_dim=None)
tf.compat.v1.reverse_v2(tensor,axis,name=None)
tf.compat.v1.rint(x,name=None)
tf.compat.v1.roll(input,shift,axis,name=None)
tf.compat.v1.round(x,name=None)
tf.compat.v1.rsqrt(x,name=None)
tf.compat.v1.saturate_cast(value,dtype,name=None)
tf.compat.v1.saved_model.Asset(path)
tf.compat.v1.saved_model.Builder(export_dir)
tf.compat.v1.saved_model.SaveOptions(namespace_whitelist=None,save_debug_info=False,function_aliases=None,experimental_io_device=None,experimental_variable_policy=None,experimental_custom_gradients=True)
tf.compat.v1.saved_model.build_signature_def(inputs=None,outputs=None,method_name=None)
tf.compat.v1.saved_model.build_tensor_info(tensor)
tf.compat.v1.saved_model.builder.SavedModelBuilder(export_dir)
tf.compat.v1.saved_model.classification_signature_def(examples,classes,scores)
tf.compat.v1.saved_model.contains_saved_model(export_dir)
tf.compat.v1.saved_model.experimental.TrackableResource(device='')
tf.compat.v1.saved_model.experimental.save(obj,export_dir,signatures=None,options=None)
tf.compat.v1.saved_model.get_tensor_from_tensor_info(tensor_info,graph=None,import_scope=None)
tf.compat.v1.saved_model.is_valid_signature(signature_def)
tf.compat.v1.saved_model.load(sess,tags,export_dir,import_scope=None,**saver_kwargs)
tf.compat.v1.saved_model.load_v2(export_dir,tags=None,options=None)
tf.compat.v1.saved_model.loader.load(sess,tags,export_dir,import_scope=None,**saver_kwargs)
tf.compat.v1.saved_model.loader.maybe_saved_model_directory(export_dir)
tf.compat.v1.saved_model.main_op.main_op()
tf.compat.v1.saved_model.main_op.main_op_with_restore(restore_op_name)
tf.compat.v1.saved_model.main_op_with_restore(restore_op_name)
tf.compat.v1.saved_model.maybe_saved_model_directory(export_dir)
tf.compat.v1.saved_model.predict_signature_def(inputs,outputs)
tf.compat.v1.saved_model.regression_signature_def(examples,predictions)
tf.compat.v1.saved_model.save(obj,export_dir,signatures=None,options=None)
tf.compat.v1.saved_model.signature_def_utils.MethodNameUpdater(export_dir)
tf.compat.v1.saved_model.signature_def_utils.build_signature_def(inputs=None,outputs=None,method_name=None)
tf.compat.v1.saved_model.signature_def_utils.classification_signature_def(examples,classes,scores)
tf.compat.v1.saved_model.signature_def_utils.is_valid_signature(signature_def)
tf.compat.v1.saved_model.signature_def_utils.predict_signature_def(inputs,outputs)
tf.compat.v1.saved_model.signature_def_utils.regression_signature_def(examples,predictions)
tf.compat.v1.saved_model.simple_save(session,export_dir,inputs,outputs,legacy_init_op=None)
tf.compat.v1.saved_model.utils.build_tensor_info(tensor)
tf.compat.v1.saved_model.utils.get_tensor_from_tensor_info(tensor_info,graph=None,import_scope=None)
tf.compat.v1.scalar_mul(scalar,x,name=None)
tf.compat.v1.scan(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,infer_shape=True,reverse=False,name=None)
tf.compat.v1.scatter_add(ref,indices,updates,use_locking=False,name=None)
tf.compat.v1.scatter_div(ref,indices,updates,use_locking=False,name=None)
tf.compat.v1.scatter_max(ref,indices,updates,use_locking=False,name=None)
tf.compat.v1.scatter_min(ref,indices,updates,use_locking=False,name=None)
tf.compat.v1.scatter_mul(ref,indices,updates,use_locking=False,name=None)
tf.compat.v1.scatter_nd(indices,updates,shape,name=None)
tf.compat.v1.scatter_nd_add(ref,indices,updates,use_locking=False,name=None)
tf.compat.v1.scatter_nd_sub(ref,indices,updates,use_locking=False,name=None)
tf.compat.v1.scatter_nd_update(ref,indices,updates,use_locking=True,name=None)
tf.compat.v1.scatter_sub(ref,indices,updates,use_locking=False,name=None)
tf.compat.v1.scatter_update(ref,indices,updates,use_locking=True,name=None)
tf.compat.v1.searchsorted(sorted_sequence,values,side='left',out_type=tf.dtypes.int32,name=None)
tf.compat.v1.segment_max(data,segment_ids,name=None)
tf.compat.v1.segment_mean(data,segment_ids,name=None)
tf.compat.v1.segment_min(data,segment_ids,name=None)
tf.compat.v1.segment_prod(data,segment_ids,name=None)
tf.compat.v1.segment_sum(data,segment_ids,name=None)
tf.compat.v1.self_adjoint_eig(tensor,name=None)
tf.compat.v1.self_adjoint_eigvals(tensor,name=None)
tf.compat.v1.sequence_mask(lengths,maxlen=None,dtype=tf.dtypes.bool,name=None)
tf.compat.v1.serialize_many_sparse(sp_input,name=None,out_type=tf.dtypes.string)
tf.compat.v1.serialize_sparse(sp_input,name=None,out_type=tf.dtypes.string)
tf.compat.v1.serialize_tensor(tensor,name=None)
tf.compat.v1.set_random_seed(seed)
tf.compat.v1.setdiff1d(x,y,index_dtype=tf.dtypes.int32,name=None)
tf.compat.v1.sets.difference(a,b,aminusb=True,validate_indices=True)
tf.compat.v1.sets.intersection(a,b,validate_indices=True)
tf.compat.v1.sets.set_difference(a,b,aminusb=True,validate_indices=True)
tf.compat.v1.sets.set_intersection(a,b,validate_indices=True)
tf.compat.v1.sets.set_size(a,validate_indices=True)
tf.compat.v1.sets.set_union(a,b,validate_indices=True)
tf.compat.v1.sets.size(a,validate_indices=True)
tf.compat.v1.sets.union(a,b,validate_indices=True)
tf.compat.v1.shape(input,name=None,out_type=tf.dtypes.int32)
tf.compat.v1.shape_n(input,out_type=tf.dtypes.int32,name=None)
tf.compat.v1.sigmoid(x,name=None)
tf.compat.v1.sign(x,name=None)
tf.compat.v1.signal.dct(input,type=2,n=None,axis=-1,norm=None,name=None)
tf.compat.v1.signal.fft(input,name=None)
tf.compat.v1.signal.fft2d(input,name=None)
tf.compat.v1.signal.fft3d(input,name=None)
tf.compat.v1.signal.fftshift(x,axes=None,name=None)
tf.compat.v1.signal.frame(signal,frame_length,frame_step,pad_end=False,pad_value=0,axis=-1,name=None)
tf.compat.v1.signal.hamming_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.signal.hann_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.signal.idct(input,type=2,n=None,axis=-1,norm=None,name=None)
tf.compat.v1.signal.ifft(input,name=None)
tf.compat.v1.signal.ifft2d(input,name=None)
tf.compat.v1.signal.ifft3d(input,name=None)
tf.compat.v1.signal.ifftshift(x,axes=None,name=None)
tf.compat.v1.signal.inverse_mdct(mdcts,window_fn=tf.signal.vorbis_window,norm=None,name=None)
tf.compat.v1.signal.irfft(input_tensor,fft_length=None,name=None)
tf.compat.v1.signal.irfft2d(input_tensor,fft_length=None,name=None)
tf.compat.v1.signal.irfft3d(input_tensor,fft_length=None,name=None)
tf.compat.v1.signal.kaiser_bessel_derived_window(window_length,beta=12.0,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.signal.kaiser_window(window_length,beta=12.0,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.signal.linear_to_mel_weight_matrix(num_mel_bins=20,num_spectrogram_bins=129,sample_rate=8000,lower_edge_hertz=125.0,upper_edge_hertz=3800.0,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.signal.mdct(signals,frame_length,window_fn=tf.signal.vorbis_window,pad_end=False,norm=None,name=None)
tf.compat.v1.signal.mfccs_from_log_mel_spectrograms(log_mel_spectrograms,name=None)
tf.compat.v1.signal.overlap_and_add(signal,frame_step,name=None)
tf.compat.v1.signal.rfft(input_tensor,fft_length=None,name=None)
tf.compat.v1.signal.rfft2d(input_tensor,fft_length=None,name=None)
tf.compat.v1.signal.rfft3d(input_tensor,fft_length=None,name=None)
tf.compat.v1.signal.vorbis_window(window_length,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.sin(x,name=None)
tf.compat.v1.sinh(x,name=None)
tf.compat.v1.size(input,name=None,out_type=tf.dtypes.int32)
tf.compat.v1.slice(input_,begin,size,name=None)
tf.compat.v1.sort(values,axis=-1,direction='ASCENDING',name=None)
tf.compat.v1.space_to_batch(input,paddings,block_size=None,name=None,block_shape=None)
tf.compat.v1.space_to_batch_nd(input,block_shape,paddings,name=None)
tf.compat.v1.space_to_depth(input,block_size,name=None,data_format='NHWC')
tf.compat.v1.sparse.SparseConditionalAccumulator(dtype,shape=None,shared_name=None,name='sparse_conditional_accumulator',reduction_type='MEAN')
tf.compat.v1.sparse.SparseTensor(indices,values,dense_shape)
tf.compat.v1.sparse.add(a,b,threshold=None,thresh=None)
tf.compat.v1.sparse.bincount(values,weights=None,axis=0,minlength=None,maxlength=None,binary_output=False,name=None)
tf.compat.v1.sparse.concat(axis,sp_inputs,name=None,expand_nonconcat_dim=False,concat_dim=None,expand_nonconcat_dims=None)
tf.compat.v1.sparse.cross(inputs,name=None,separator=None)
tf.compat.v1.sparse.cross_hashed(inputs,num_buckets=0,hash_key=None,name=None)
tf.compat.v1.sparse.expand_dims(sp_input,axis=None,name=None)
tf.compat.v1.sparse.eye(num_rows,num_columns=None,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.sparse.fill_empty_rows(sp_input,default_value,name=None)
tf.compat.v1.sparse.from_dense(tensor,name=None)
tf.compat.v1.sparse.mask(a,mask_indices,name=None)
tf.compat.v1.sparse.matmul(sp_a,b,adjoint_a=False,adjoint_b=False,name=None)
tf.compat.v1.sparse.maximum(sp_a,sp_b,name=None)
tf.compat.v1.sparse.merge(sp_ids,sp_values,vocab_size,name=None,already_sorted=False)
tf.compat.v1.sparse.minimum(sp_a,sp_b,name=None)
tf.compat.v1.sparse.placeholder(dtype,shape=None,name=None)
tf.compat.v1.sparse.reduce_max(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)
tf.compat.v1.sparse.reduce_max_sparse(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)
tf.compat.v1.sparse.reduce_sum(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)
tf.compat.v1.sparse.reduce_sum_sparse(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)
tf.compat.v1.sparse.reorder(sp_input,name=None)
tf.compat.v1.sparse.reset_shape(sp_input,new_shape=None)
tf.compat.v1.sparse.reshape(sp_input,shape,name=None)
tf.compat.v1.sparse.retain(sp_input,to_retain)
tf.compat.v1.sparse.segment_mean(data,indices,segment_ids,name=None,num_segments=None)
tf.compat.v1.sparse.segment_sqrt_n(data,indices,segment_ids,name=None,num_segments=None)
tf.compat.v1.sparse.segment_sum(data,indices,segment_ids,name=None,num_segments=None)
tf.compat.v1.sparse.slice(sp_input,start,size,name=None)
tf.compat.v1.sparse.softmax(sp_input,name=None)
tf.compat.v1.sparse.sparse_dense_matmul(sp_a,b,adjoint_a=False,adjoint_b=False,name=None)
tf.compat.v1.sparse.split(keyword_required=KeywordRequired(),sp_input=None,num_split=None,axis=None,name=None,split_dim=None)
tf.compat.v1.sparse.to_dense(sp_input,default_value=None,validate_indices=True,name=None)
tf.compat.v1.sparse.to_indicator(sp_input,vocab_size,name=None)
tf.compat.v1.sparse.transpose(sp_input,perm=None,name=None)
tf.compat.v1.sparse_add(a,b,threshold=None,thresh=None)
tf.compat.v1.sparse_concat(axis,sp_inputs,name=None,expand_nonconcat_dim=False,concat_dim=None,expand_nonconcat_dims=None)
tf.compat.v1.sparse_fill_empty_rows(sp_input,default_value,name=None)
tf.compat.v1.sparse_mask(a,mask_indices,name=None)
tf.compat.v1.sparse_matmul(a,b,transpose_a=False,transpose_b=False,a_is_sparse=False,b_is_sparse=False,name=None)
tf.compat.v1.sparse_maximum(sp_a,sp_b,name=None)
tf.compat.v1.sparse_merge(sp_ids,sp_values,vocab_size,name=None,already_sorted=False)
tf.compat.v1.sparse_minimum(sp_a,sp_b,name=None)
tf.compat.v1.sparse_placeholder(dtype,shape=None,name=None)
tf.compat.v1.sparse_reduce_max(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)
tf.compat.v1.sparse_reduce_max_sparse(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)
tf.compat.v1.sparse_reduce_sum(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)
tf.compat.v1.sparse_reduce_sum_sparse(sp_input,axis=None,keepdims=None,reduction_axes=None,keep_dims=None)
tf.compat.v1.sparse_reorder(sp_input,name=None)
tf.compat.v1.sparse_reset_shape(sp_input,new_shape=None)
tf.compat.v1.sparse_reshape(sp_input,shape,name=None)
tf.compat.v1.sparse_retain(sp_input,to_retain)
tf.compat.v1.sparse_segment_mean(data,indices,segment_ids,name=None,num_segments=None)
tf.compat.v1.sparse_segment_sqrt_n(data,indices,segment_ids,name=None,num_segments=None)
tf.compat.v1.sparse_segment_sum(data,indices,segment_ids,name=None,num_segments=None)
tf.compat.v1.sparse_slice(sp_input,start,size,name=None)
tf.compat.v1.sparse_softmax(sp_input,name=None)
tf.compat.v1.sparse_split(keyword_required=KeywordRequired(),sp_input=None,num_split=None,axis=None,name=None,split_dim=None)
tf.compat.v1.sparse_tensor_dense_matmul(sp_a,b,adjoint_a=False,adjoint_b=False,name=None)
tf.compat.v1.sparse_tensor_to_dense(sp_input,default_value=None,validate_indices=True,name=None)
tf.compat.v1.sparse_to_dense(sparse_indices,output_shape,sparse_values,default_value=0,validate_indices=True,name=None)
tf.compat.v1.sparse_to_indicator(sp_input,vocab_size,name=None)
tf.compat.v1.sparse_transpose(sp_input,perm=None,name=None)
tf.compat.v1.spectral.dct(input,type=2,n=None,axis=-1,norm=None,name=None)
tf.compat.v1.spectral.fft(input,name=None)
tf.compat.v1.spectral.fft2d(input,name=None)
tf.compat.v1.spectral.fft3d(input,name=None)
tf.compat.v1.spectral.idct(input,type=2,n=None,axis=-1,norm=None,name=None)
tf.compat.v1.spectral.ifft(input,name=None)
tf.compat.v1.spectral.ifft2d(input,name=None)
tf.compat.v1.spectral.ifft3d(input,name=None)
tf.compat.v1.spectral.irfft(input_tensor,fft_length=None,name=None)
tf.compat.v1.spectral.irfft2d(input_tensor,fft_length=None,name=None)
tf.compat.v1.spectral.irfft3d(input_tensor,fft_length=None,name=None)
tf.compat.v1.spectral.rfft(input_tensor,fft_length=None,name=None)
tf.compat.v1.spectral.rfft2d(input_tensor,fft_length=None,name=None)
tf.compat.v1.spectral.rfft3d(input_tensor,fft_length=None,name=None)
tf.compat.v1.split(value,num_or_size_splits,axis=0,num=None,name='split')
tf.compat.v1.sqrt(x,name=None)
tf.compat.v1.square(x,name=None)
tf.compat.v1.squared_difference(x,y,name=None)
tf.compat.v1.squeeze(input,axis=None,name=None,squeeze_dims=None)
tf.compat.v1.stack(values,axis=0,name='stack')
tf.compat.v1.stop_gradient(input,name=None)
tf.compat.v1.strided_slice(input_,begin,end,strides=None,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,var=None,name=None)
tf.compat.v1.string_join(inputs,separator='',name=None)
tf.compat.v1.string_split(source,sep=None,skip_empty=True,delimiter=None,result_type='SparseTensor',name=None)
tf.compat.v1.string_strip(input,name=None)
tf.compat.v1.string_to_hash_bucket(string_tensor=None,num_buckets=None,name=None,input=None)
tf.compat.v1.string_to_hash_bucket_fast(input,num_buckets,name=None)
tf.compat.v1.string_to_hash_bucket_strong(input,num_buckets,key,name=None)
tf.compat.v1.string_to_number(string_tensor=None,out_type=tf.dtypes.float32,name=None,input=None)
tf.compat.v1.strings.as_string(input,precision=-1,scientific=False,shortest=False,width=-1,fill='',name=None)
tf.compat.v1.strings.bytes_split(input,name=None)
tf.compat.v1.strings.format(template,inputs,placeholder='{}',summarize=3,name=None)
tf.compat.v1.strings.join(inputs,separator='',name=None)
tf.compat.v1.strings.length(input,name=None,unit='BYTE')
tf.compat.v1.strings.lower(input,encoding='',name=None)
tf.compat.v1.strings.ngrams(data,ngram_width,separator='',pad_values=None,padding_width=None,preserve_short_sequences=False,name=None)
tf.compat.v1.strings.reduce_join(inputs,axis=None,keep_dims=None,separator='',name=None,reduction_indices=None,keepdims=None)
tf.compat.v1.strings.regex_full_match(input,pattern,name=None)
tf.compat.v1.strings.regex_replace(input,pattern,rewrite,replace_global=True,name=None)
tf.compat.v1.strings.split(input=None,sep=None,maxsplit=-1,result_type='SparseTensor',source=None,name=None)
tf.compat.v1.strings.strip(input,name=None)
tf.compat.v1.strings.substr(input,pos,len,name=None,unit='BYTE')
tf.compat.v1.strings.to_hash_bucket(string_tensor=None,num_buckets=None,name=None,input=None)
tf.compat.v1.strings.to_hash_bucket_fast(input,num_buckets,name=None)
tf.compat.v1.strings.to_hash_bucket_strong(input,num_buckets,key,name=None)
tf.compat.v1.strings.to_number(string_tensor=None,out_type=tf.dtypes.float32,name=None,input=None)
tf.compat.v1.strings.unicode_decode(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)
tf.compat.v1.strings.unicode_decode_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)
tf.compat.v1.strings.unicode_encode(input,output_encoding,errors='replace',replacement_char=65533,name=None)
tf.compat.v1.strings.unicode_script(input,name=None)
tf.compat.v1.strings.unicode_split(input,input_encoding,errors='replace',replacement_char=65533,name=None)
tf.compat.v1.strings.unicode_split_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,name=None)
tf.compat.v1.strings.unicode_transcode(input,input_encoding,output_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)
tf.compat.v1.strings.unsorted_segment_join(inputs,segment_ids,num_segments,separator='',name=None)
tf.compat.v1.strings.upper(input,encoding='',name=None)
tf.compat.v1.substr(input,pos,len,name=None,unit='BYTE')
tf.compat.v1.subtract(x,y,name=None)
tf.compat.v1.summary.FileWriter(logdir,graph=None,max_queue=10,flush_secs=120,graph_def=None,filename_suffix=None,session=None)
tf.compat.v1.summary.all_v2_summary_ops()
tf.compat.v1.summary.audio(name,tensor,sample_rate,max_outputs=3,collections=None,family=None)
tf.compat.v1.summary.get_summary_description(node_def)
tf.compat.v1.summary.histogram(name,values,collections=None,family=None)
tf.compat.v1.summary.image(name,tensor,max_outputs=3,collections=None,family=None)
tf.compat.v1.summary.initialize(graph=None,session=None)
tf.compat.v1.summary.merge(inputs,collections=None,name=None)
tf.compat.v1.summary.merge_all(key=tf.GraphKeys.SUMMARIES,scope=None,name=None)
tf.compat.v1.summary.scalar(name,tensor,collections=None,family=None)
tf.compat.v1.summary.tensor_summary(name,tensor,summary_description=None,collections=None,summary_metadata=None,family=None,display_name=None)
tf.compat.v1.summary.text(name,tensor,collections=None)
tf.compat.v1.svd(tensor,full_matrices=False,compute_uv=True,name=None)
tf.compat.v1.switch_case(branch_index,branch_fns,default=None,name='switch_case')
tf.compat.v1.sysconfig.get_build_info()
tf.compat.v1.sysconfig.get_compile_flags()
tf.compat.v1.sysconfig.get_include()
tf.compat.v1.sysconfig.get_lib()
tf.compat.v1.sysconfig.get_link_flags()
tf.compat.v1.tables_initializer(name='init_all_tables')
tf.compat.v1.tan(x,name=None)
tf.compat.v1.tanh(x,name=None)
tf.compat.v1.tensor_scatter_add(tensor,indices,updates,name=None)
tf.compat.v1.tensor_scatter_nd_add(tensor,indices,updates,name=None)
tf.compat.v1.tensor_scatter_nd_max(tensor,indices,updates,name=None)
tf.compat.v1.tensor_scatter_nd_min(tensor,indices,updates,name=None)
tf.compat.v1.tensor_scatter_nd_sub(tensor,indices,updates,name=None)
tf.compat.v1.tensor_scatter_nd_update(tensor,indices,updates,name=None)
tf.compat.v1.tensor_scatter_sub(tensor,indices,updates,name=None)
tf.compat.v1.tensor_scatter_update(tensor,indices,updates,name=None)
tf.compat.v1.tensordot(a,b,axes,name=None)
tf.compat.v1.test.Benchmark()
tf.compat.v1.test.StubOutForTesting()
tf.compat.v1.test.TestCase(methodName='runTest')
tf.compat.v1.test.TestCase.failureException(*args,**kwargs)
tf.compat.v1.test.assert_equal_graph_def(actual,expected,checkpoint_v2=False,hash_table_shared_name=False)
tf.compat.v1.test.benchmark_config()
tf.compat.v1.test.compute_gradient(x,x_shape,y,y_shape,x_init_value=None,delta=0.001,init_targets=None,extra_feed_dict=None)
tf.compat.v1.test.compute_gradient_error(x,x_shape,y,y_shape,x_init_value=None,delta=0.001,init_targets=None,extra_feed_dict=None)
tf.compat.v1.test.create_local_cluster(num_workers,num_ps,protocol='grpc',worker_config=None,ps_config=None)
tf.compat.v1.test.disable_with_predicate(pred,skip_message)
tf.compat.v1.test.get_temp_dir()
tf.compat.v1.test.gpu_device_name()
tf.compat.v1.test.is_built_with_cuda()
tf.compat.v1.test.is_built_with_gpu_support()
tf.compat.v1.test.is_built_with_rocm()
tf.compat.v1.test.is_built_with_xla()
tf.compat.v1.test.is_gpu_available(cuda_only=False,min_cuda_compute_capability=None)
tf.compat.v1.test.main(argv=None)
tf.compat.v1.test.test_src_dir_path(relative_path)
tf.compat.v1.tile(input,multiples,name=None)
tf.compat.v1.timestamp(name=None)
tf.compat.v1.to_bfloat16(x,name='ToBFloat16')
tf.compat.v1.to_complex128(x,name='ToComplex128')
tf.compat.v1.to_complex64(x,name='ToComplex64')
tf.compat.v1.to_double(x,name='ToDouble')
tf.compat.v1.to_float(x,name='ToFloat')
tf.compat.v1.to_int32(x,name='ToInt32')
tf.compat.v1.to_int64(x,name='ToInt64')
tf.compat.v1.tpu.CrossShardOptimizer(opt,reduction=losses.Reduction.MEAN,name='CrossShardOptimizer',group_assignment=None)
tf.compat.v1.tpu.XLAOptions(use_spmd_for_xla_partitioning=True,enable_xla_dynamic_padder=True)
tf.compat.v1.tpu.batch_parallel(computation:Callable[...,Any],inputs:Optional[List[List[Optional[core_types.Tensor]]]]=None,num_shards:int=1,infeed_queue:Optional[tpu_feed.InfeedQueue]=None,device_assignment:Optional[tf.tpu.experimental.DeviceAssignment]=None,name:Optional[Text]=None,xla_options:Optional[tf.tpu.XLAOptions]=None)tf.tpu.experimental.DeviceAssignmenttf.tpu.XLAOptions
tf.compat.v1.tpu.core(num:int)->Text
tf.compat.v1.tpu.cross_replica_sum(x,group_assignment=None,name=None)
tf.compat.v1.tpu.experimental.AdagradParameters(learning_rate:float,initial_accumulator:float=0.1,use_gradient_accumulation:bool=True,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:Optional[bool]=None,clip_gradient_min:Optional[float]=None,clip_gradient_max:Optional[float]=None)
tf.compat.v1.tpu.experimental.AdamParameters(learning_rate:float,beta1:float=0.9,beta2:float=0.999,epsilon:float=1e-08,lazy_adam:bool=True,sum_inside_sqrt:bool=True,use_gradient_accumulation:bool=True,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:Optional[bool]=None,clip_gradient_min:Optional[float]=None,clip_gradient_max:Optional[float]=None)
tf.compat.v1.tpu.experimental.DeviceAssignment(topology:tf.tpu.experimental.Topology,core_assignment:np.ndarray)tf.tpu.experimental.Topology
tf.compat.v1.tpu.experimental.FtrlParameters(learning_rate:float,learning_rate_power:float=-0.5,initial_accumulator_value:float=0.1,l1_regularization_strength:float=0.0,l2_regularization_strength:float=0.0,use_gradient_accumulation:bool=True,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:Optional[bool]=None,multiply_linear_by_learning_rate:bool=False,beta:float=0,allow_zero_accumulator:bool=False,clip_gradient_min:Optional[float]=None,clip_gradient_max:Optional[float]=None)
tf.compat.v1.tpu.experimental.StochasticGradientDescentParameters(learning_rate:float,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:Optional[bool]=None,clip_gradient_min:Optional[float]=None,clip_gradient_max:Optional[float]=None)
tf.compat.v1.tpu.experimental.TPUSystemMetadata(num_cores,num_hosts,num_of_cores_per_host,topology,devices)
tf.compat.v1.tpu.experimental.Topology(serialized=None,mesh_shape=None,device_coordinates=None)
tf.compat.v1.tpu.experimental.embedding.Adagrad(learning_rate:Union[float,Callable[[],float]]=0.001,initial_accumulator_value:float=0.1,use_gradient_accumulation:bool=True,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:bool=None,slot_variable_creation_fn:Optional[SlotVarCreationFnType]=None,clipvalue:Optional[ClipValueType]=None)
tf.compat.v1.tpu.experimental.embedding.Adam(learning_rate:Union[float,Callable[[],float]]=0.001,beta_1:float=0.9,beta_2:float=0.999,epsilon:float=1e-07,lazy_adam:bool=True,sum_inside_sqrt:bool=True,use_gradient_accumulation:bool=True,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:bool=None,slot_variable_creation_fn:Optional[SlotVarCreationFnType]=None,clipvalue:Optional[ClipValueType]=None)
tf.compat.v1.tpu.experimental.embedding.FTRL(learning_rate:Union[float,Callable[[],float]]=0.001,learning_rate_power:float=-0.5,l1_regularization_strength:float=0.0,l2_regularization_strength:float=0.0,beta:float=0.0,initial_accumulator_value:float=0.1,use_gradient_accumulation:bool=True,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:bool=None,slot_variable_creation_fn:Optional[SlotVarCreationFnType]=None,clipvalue:Optional[ClipValueType]=None,multiply_linear_by_learning_rate:bool=False,allow_zero_accumulator:bool=False)
tf.compat.v1.tpu.experimental.embedding.FeatureConfig(table:tf.tpu.experimental.embedding.TableConfig,max_sequence_length:int=0,validate_weights_and_indices:bool=True,name:Optional[Text]=None)tf.tpu.experimental.embedding.TableConfig
tf.compat.v1.tpu.experimental.embedding.SGD(learning_rate:Union[float,Callable[[],float]]=0.01,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:bool=None,clipvalue:Optional[ClipValueType]=None)
tf.compat.v1.tpu.experimental.embedding.TPUEmbedding(feature_config:Union[tf.tpu.experimental.embedding.FeatureConfig,Iterable],optimizer:Optional[tpu_embedding_v2_utils._Optimizer],pipeline_execution_with_tensor_core:bool=False)tf.tpu.experimental.embedding.FeatureConfig
tf.compat.v1.tpu.experimental.embedding.TableConfig(vocabulary_size:int,dim:int,initializer:Optional[Callable[[Any],None]],optimizer:Optional[_Optimizer]=None,combiner:Text='mean',name:Optional[Text]=None)
tf.compat.v1.tpu.experimental.embedding.serving_embedding_lookup(inputs,weights,tables,feature_config)
tf.compat.v1.tpu.experimental.embedding_column(categorical_column,dimension,combiner='mean',initializer=None,max_sequence_length=0,learning_rate_fn=None,embedding_lookup_device=None,tensor_core_shape=None,use_safe_embedding_lookup=True)
tf.compat.v1.tpu.experimental.initialize_tpu_system(cluster_resolver=None)
tf.compat.v1.tpu.experimental.shared_embedding_columns(categorical_columns,dimension,combiner='mean',initializer=None,shared_embedding_collection_name=None,max_sequence_lengths=None,learning_rate_fn=None,embedding_lookup_device=None,tensor_core_shape=None,use_safe_embedding_lookup=True)
tf.compat.v1.tpu.experimental.shutdown_tpu_system(cluster_resolver=None)
tf.compat.v1.tpu.initialize_system(embedding_config:Optional[embedding_pb2.TPUEmbeddingConfiguration]=None,job:Optional[Text]=None,compilation_failure_closes_chips:bool=True,tpu_cancellation_closes_chips:Optional[bool]=None)->core_types.Tensor
tf.compat.v1.tpu.outside_compilation(computation:Callable[...,Any],*args,**kwargs)->Any
tf.compat.v1.tpu.replicate(computation:Callable[...,Any],inputs:Optional[List[List[core_types.Tensor]]]=None,infeed_queue:Optional[tpu_feed.InfeedQueue]=None,device_assignment:Optional[tf.tpu.experimental.DeviceAssignment]=None,name:Optional[Text]=None,maximum_shapes:Optional[Any]=None,padding_spec:Optional[tf.compat.v1.tpu.PaddingSpec]=None,xla_options:Optional[tf.tpu.XLAOptions]=None)->List[Any]tf.tpu.experimental.DeviceAssignmenttf.compat.v1.tpu.PaddingSpectf.tpu.XLAOptions
tf.compat.v1.tpu.rewrite(computation:Callable[...,Any],inputs:Optional[List[List[Optional[core_types.Tensor]]]]=None,infeed_queue:Optional[tpu_feed.InfeedQueue]=None,device_assignment:Optional[tf.tpu.experimental.DeviceAssignment]=None,name:Optional[Text]=None,xla_options:Optional[tf.tpu.XLAOptions]=None)->Anytf.tpu.experimental.DeviceAssignmenttf.tpu.XLAOptions
tf.compat.v1.tpu.shard(computation:Callable[...,Any],inputs:Optional[List[core_types.Tensor]]=None,num_shards:int=1,input_shard_axes:Optional[List[int]]=None,outputs_from_all_shards:Union[bool,List[bool]]=True,output_shard_axes:Optional[List[int]]=None,infeed_queue:Optional[tpu_feed.InfeedQueue]=None,device_assignment:Optional[tf.tpu.experimental.DeviceAssignment]=None,name:Optional[Text]=None,xla_options:Optional[tf.tpu.XLAOptions]=None)->List[core_types.Tensor]tf.tpu.experimental.DeviceAssignmenttf.tpu.XLAOptions
tf.compat.v1.tpu.shutdown_system(job:Optional[Text]=None)->tf.Operationtf.Operation
tf.compat.v1.trace(x,name=None)
tf.compat.v1.train.AdadeltaOptimizer(learning_rate=0.001,rho=0.95,epsilon=1e-08,use_locking=False,name='Adadelta')
tf.compat.v1.train.AdagradDAOptimizer(learning_rate,global_step,initial_gradient_squared_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='AdagradDA')
tf.compat.v1.train.AdagradOptimizer(learning_rate,initial_accumulator_value=0.1,use_locking=False,name='Adagrad')
tf.compat.v1.train.AdamOptimizer(learning_rate=0.001,beta1=0.9,beta2=0.999,epsilon=1e-08,use_locking=False,name='Adam')
tf.compat.v1.train.Checkpoint(**kwargs)
tf.compat.v1.train.CheckpointManager(checkpoint,directory,max_to_keep,keep_checkpoint_every_n_hours=None,checkpoint_name='ckpt',step_counter=None,checkpoint_interval=None,init_fn=None)
tf.compat.v1.train.CheckpointOptions(experimental_io_device=None)
tf.compat.v1.train.CheckpointSaverHook(checkpoint_dir,save_secs=None,save_steps=None,saver=None,checkpoint_basename='model.ckpt',scaffold=None,listeners=None,save_graph_def=True)
tf.compat.v1.train.ChiefSessionCreator(scaffold=None,master='',config=None,checkpoint_dir=None,checkpoint_filename_with_path=None)
tf.compat.v1.train.ClusterSpec(cluster)
tf.compat.v1.train.Coordinator(clean_stop_exception_types=None)
tf.compat.v1.train.ExponentialMovingAverage(decay,num_updates=None,zero_debias=False,name='ExponentialMovingAverage')
tf.compat.v1.train.FeedFnHook(feed_fn)
tf.compat.v1.train.FinalOpsHook(final_ops,final_ops_feed_dict=None)
tf.compat.v1.train.FtrlOptimizer(learning_rate,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='Ftrl',accum_name=None,linear_name=None,l2_shrinkage_regularization_strength=0.0,beta=None)
tf.compat.v1.train.GlobalStepWaiterHook(wait_until_step)
tf.compat.v1.train.GradientDescentOptimizer(learning_rate,use_locking=False,name='GradientDescent')
tf.compat.v1.train.LoggingTensorHook(tensors,every_n_iter=None,every_n_secs=None,at_end=False,formatter=None)
tf.compat.v1.train.LooperThread(coord,timer_interval_secs,target=None,args=None,kwargs=None)
tf.compat.v1.train.MomentumOptimizer(learning_rate,momentum,use_locking=False,name='Momentum',use_nesterov=False)
tf.compat.v1.train.MonitoredSession(session_creator=None,hooks=None,stop_grace_period_secs=120)
tf.compat.v1.train.MonitoredSession.StepContext(session,run_with_hooks_fn)
tf.compat.v1.train.MonitoredTrainingSession(master='',is_chief=True,checkpoint_dir=None,scaffold=None,hooks=None,chief_only_hooks=None,save_checkpoint_secs=USE_DEFAULT,save_summaries_steps=USE_DEFAULT,save_summaries_secs=USE_DEFAULT,config=None,stop_grace_period_secs=120,log_step_count_steps=100,max_wait_secs=7200,save_checkpoint_steps=USE_DEFAULT,summary_dir=None,save_graph_def=True)
tf.compat.v1.train.NanLossDuringTrainingError(*args,**kwargs)
tf.compat.v1.train.NanTensorHook(loss_tensor,fail_on_nan_loss=True)
tf.compat.v1.train.NewCheckpointReader(filepattern)
tf.compat.v1.train.Optimizer(use_locking,name)
tf.compat.v1.train.ProfilerHook(save_steps=None,save_secs=None,output_dir='',show_dataflow=True,show_memory=False)
tf.compat.v1.train.ProximalAdagradOptimizer(learning_rate,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='ProximalAdagrad')
tf.compat.v1.train.ProximalGradientDescentOptimizer(learning_rate,l1_regularization_strength=0.0,l2_regularization_strength=0.0,use_locking=False,name='ProximalGradientDescent')
tf.compat.v1.train.QueueRunner(queue=None,enqueue_ops=None,close_op=None,cancel_op=None,queue_closed_exception_types=None,queue_runner_def=None,import_scope=None)
tf.compat.v1.train.RMSPropOptimizer(learning_rate,decay=0.9,momentum=0.0,epsilon=1e-10,use_locking=False,centered=False,name='RMSProp')
tf.compat.v1.train.Saver(var_list=None,reshape=False,sharded=False,max_to_keep=5,keep_checkpoint_every_n_hours=10000.0,name=None,restore_sequentially=False,saver_def=None,builder=None,defer_build=False,allow_empty=False,write_version=tf.train.SaverDef.V2,pad_step_number=False,save_relative_paths=False,filename=None)
tf.compat.v1.train.Scaffold(init_op=None,init_feed_dict=None,init_fn=None,ready_op=None,ready_for_local_init_op=None,local_init_op=None,summary_op=None,saver=None,copy_from_scaffold=None,local_init_feed_dict=None)
tf.compat.v1.train.SecondOrStepTimer(every_secs=None,every_steps=None)
tf.compat.v1.train.Server(server_or_cluster_def,job_name=None,task_index=None,protocol=None,config=None,start=True)
tf.compat.v1.train.SessionManager(local_init_op=None,ready_op=None,ready_for_local_init_op=None,graph=None,recovery_wait_secs=30,local_init_run_options=None,local_init_feed_dict=None)
tf.compat.v1.train.SessionRunArgs(fetches,feed_dict=None,options=None)
tf.compat.v1.train.SessionRunContext(original_args,session)
tf.compat.v1.train.SessionRunValues(results,options,run_metadata)
tf.compat.v1.train.SingularMonitoredSession(hooks=None,scaffold=None,master='',config=None,checkpoint_dir=None,stop_grace_period_secs=120,checkpoint_filename_with_path=None)
tf.compat.v1.train.SingularMonitoredSession.StepContext(session,run_with_hooks_fn)
tf.compat.v1.train.StepCounterHook(every_n_steps=100,every_n_secs=None,output_dir=None,summary_writer=None)
tf.compat.v1.train.StopAtStepHook(num_steps=None,last_step=None)
tf.compat.v1.train.SummarySaverHook(save_steps=None,save_secs=None,output_dir=None,summary_writer=None,scaffold=None,summary_op=None)
tf.compat.v1.train.Supervisor(graph=None,ready_op=USE_DEFAULT,ready_for_local_init_op=USE_DEFAULT,is_chief=True,init_op=USE_DEFAULT,init_feed_dict=None,local_init_op=USE_DEFAULT,logdir=None,summary_op=USE_DEFAULT,saver=USE_DEFAULT,global_step=USE_DEFAULT,save_summaries_secs=120,save_model_secs=600,recovery_wait_secs=30,stop_grace_secs=120,checkpoint_basename='model.ckpt',session_manager=None,summary_writer=USE_DEFAULT,init_fn=None,local_init_run_options=None)
tf.compat.v1.train.SyncReplicasOptimizer(opt,replicas_to_aggregate,total_num_replicas=None,variable_averages=None,variables_to_average=None,use_locking=False,name='sync_replicas')
tf.compat.v1.train.VocabInfo(new_vocab,new_vocab_size,num_oov_buckets,old_vocab,old_vocab_size=-1,backup_initializer=None,axis=0)
tf.compat.v1.train.WorkerSessionCreator(scaffold=None,master='',config=None,max_wait_secs=(30*60))
tf.compat.v1.train.add_queue_runner(qr,collection=tf.GraphKeys.QUEUE_RUNNERS)
tf.compat.v1.train.assert_global_step(global_step_tensor)
tf.compat.v1.train.basic_train_loop(supervisor,train_step_fn,args=None,kwargs=None,master='')
tf.compat.v1.train.batch(tensors,batch_size,num_threads=1,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tf.compat.v1.train.batch_join(tensors_list,batch_size,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tf.compat.v1.train.checkpoint_exists(checkpoint_prefix)
tf.compat.v1.train.checkpoints_iterator(checkpoint_dir,min_interval_secs=0,timeout=None,timeout_fn=None)
tf.compat.v1.train.cosine_decay(learning_rate,global_step,decay_steps,alpha=0.0,name=None)
tf.compat.v1.train.cosine_decay_restarts(learning_rate,global_step,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name=None)
tf.compat.v1.train.create_global_step(graph=None)
tf.compat.v1.train.do_quantize_training_on_graphdef(input_graph,num_bits)
tf.compat.v1.train.experimental.DynamicLossScale(initial_loss_scale=(2**15),increment_period=2000,multiplier=2.0)
tf.compat.v1.train.experimental.FixedLossScale(loss_scale_value)
tf.compat.v1.train.experimental.LossScale()
tf.compat.v1.train.experimental.MixedPrecisionLossScaleOptimizer(opt,loss_scale)
tf.compat.v1.train.experimental.disable_mixed_precision_graph_rewrite()
tf.compat.v1.train.experimental.enable_mixed_precision_graph_rewrite(opt,loss_scale='dynamic')
tf.compat.v1.train.exponential_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
tf.compat.v1.train.export_meta_graph(filename=None,meta_info_def=None,graph_def=None,saver_def=None,collection_list=None,as_text=False,graph=None,export_scope=None,clear_devices=False,clear_extraneous_savers=False,strip_default_attrs=False,save_debug_info=False,**kwargs)
tf.compat.v1.train.generate_checkpoint_state_proto(save_dir,model_checkpoint_path,all_model_checkpoint_paths=None,all_model_checkpoint_timestamps=None,last_preserved_timestamp=None)
tf.compat.v1.train.get_checkpoint_mtimes(checkpoint_prefixes)
tf.compat.v1.train.get_checkpoint_state(checkpoint_dir,latest_filename=None)
tf.compat.v1.train.get_global_step(graph=None)
tf.compat.v1.train.get_or_create_global_step(graph=None)
tf.compat.v1.train.global_step(sess,global_step_tensor)
tf.compat.v1.train.import_meta_graph(meta_graph_or_file,clear_devices=False,import_scope=None,**kwargs)
tf.compat.v1.train.init_from_checkpoint(ckpt_dir_or_file,assignment_map)
tf.compat.v1.train.input_producer(input_tensor,element_shape=None,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,summary_name=None,name=None,cancel_op=None)
tf.compat.v1.train.inverse_time_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
tf.compat.v1.train.latest_checkpoint(checkpoint_dir,latest_filename=None)
tf.compat.v1.train.limit_epochs(tensor,num_epochs=None,name=None)
tf.compat.v1.train.linear_cosine_decay(learning_rate,global_step,decay_steps,num_periods=0.5,alpha=0.0,beta=0.001,name=None)
tf.compat.v1.train.list_variables(ckpt_dir_or_file)
tf.compat.v1.train.load_checkpoint(ckpt_dir_or_file)
tf.compat.v1.train.load_variable(ckpt_dir_or_file,name)
tf.compat.v1.train.match_filenames_once(pattern,name=None)
tf.compat.v1.train.maybe_batch(tensors,keep_input,batch_size,num_threads=1,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tf.compat.v1.train.maybe_batch_join(tensors_list,keep_input,batch_size,capacity=32,enqueue_many=False,shapes=None,dynamic_pad=False,allow_smaller_final_batch=False,shared_name=None,name=None)
tf.compat.v1.train.maybe_shuffle_batch(tensors,batch_size,capacity,min_after_dequeue,keep_input,num_threads=1,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tf.compat.v1.train.maybe_shuffle_batch_join(tensors_list,batch_size,capacity,min_after_dequeue,keep_input,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tf.compat.v1.train.natural_exp_decay(learning_rate,global_step,decay_steps,decay_rate,staircase=False,name=None)
tf.compat.v1.train.noisy_linear_cosine_decay(learning_rate,global_step,decay_steps,initial_variance=1.0,variance_decay=0.55,num_periods=0.5,alpha=0.0,beta=0.001,name=None)
tf.compat.v1.train.piecewise_constant(x,boundaries,values,name=None)
tf.compat.v1.train.piecewise_constant_decay(x,boundaries,values,name=None)
tf.compat.v1.train.polynomial_decay(learning_rate,global_step,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name=None)
tf.compat.v1.train.queue_runner.QueueRunner(queue=None,enqueue_ops=None,close_op=None,cancel_op=None,queue_closed_exception_types=None,queue_runner_def=None,import_scope=None)
tf.compat.v1.train.queue_runner.add_queue_runner(qr,collection=tf.GraphKeys.QUEUE_RUNNERS)
tf.compat.v1.train.queue_runner.start_queue_runners(sess=None,coord=None,daemon=True,start=True,collection=tf.GraphKeys.QUEUE_RUNNERS)
tf.compat.v1.train.range_input_producer(limit,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None)
tf.compat.v1.train.remove_checkpoint(checkpoint_prefix,checkpoint_format_version=tf.train.SaverDef.V2,meta_graph_suffix='meta')
tf.compat.v1.train.replica_device_setter(ps_tasks=0,ps_device='/job:ps',worker_device='/job:worker',merge_devices=True,cluster=None,ps_ops=None,ps_strategy=None)
tf.compat.v1.train.sdca_fprint(input,name=None)
tf.compat.v1.train.sdca_optimizer(sparse_example_indices,sparse_feature_indices,sparse_feature_values,dense_features,example_weights,example_labels,sparse_indices,sparse_weights,dense_weights,example_state_data,loss_type,l1,l2,num_loss_partitions,num_inner_iterations,adaptative=True,name=None)
tf.compat.v1.train.sdca_shrink_l1(weights,l1,l2,name=None)
tf.compat.v1.train.shuffle_batch(tensors,batch_size,capacity,min_after_dequeue,num_threads=1,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tf.compat.v1.train.shuffle_batch_join(tensors_list,batch_size,capacity,min_after_dequeue,seed=None,enqueue_many=False,shapes=None,allow_smaller_final_batch=False,shared_name=None,name=None)
tf.compat.v1.train.slice_input_producer(tensor_list,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None)
tf.compat.v1.train.start_queue_runners(sess=None,coord=None,daemon=True,start=True,collection=tf.GraphKeys.QUEUE_RUNNERS)
tf.compat.v1.train.string_input_producer(string_tensor,num_epochs=None,shuffle=True,seed=None,capacity=32,shared_name=None,name=None,cancel_op=None)
tf.compat.v1.train.summary_iterator(path)
tf.compat.v1.train.update_checkpoint_state(save_dir,model_checkpoint_path,all_model_checkpoint_paths=None,latest_filename=None,all_model_checkpoint_timestamps=None,last_preserved_timestamp=None)
tf.compat.v1.train.warm_start(ckpt_to_initialize_from,vars_to_warm_start='.*',var_name_to_vocab_info=None,var_name_to_prev_var_name=None)
tf.compat.v1.train.write_graph(graph_or_graph_def,logdir,name,as_text=True)
tf.compat.v1.trainable_variables(scope=None)
tf.compat.v1.transpose(a,perm=None,name='transpose',conjugate=False)
tf.compat.v1.truediv(x,y,name=None)
tf.compat.v1.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)
tf.compat.v1.truncated_normal_initializer(mean=0.0,stddev=1.0,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.truncatediv(x,y,name=None)
tf.compat.v1.truncatemod(x,y,name=None)
tf.compat.v1.tuple(tensors,name=None,control_inputs=None)
tf.compat.v1.type_spec_from_value(value)->tf.TypeSpectf.TypeSpec
tf.compat.v1.uniform_unit_scaling_initializer(factor=1.0,seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.unique(x,out_idx=tf.dtypes.int32,name=None)
tf.compat.v1.unique_with_counts(x,out_idx=tf.dtypes.int32,name=None)
tf.compat.v1.unravel_index(indices,dims,name=None)
tf.compat.v1.unsorted_segment_max(data,segment_ids,num_segments,name=None)
tf.compat.v1.unsorted_segment_mean(data,segment_ids,num_segments,name=None)
tf.compat.v1.unsorted_segment_min(data,segment_ids,num_segments,name=None)
tf.compat.v1.unsorted_segment_prod(data,segment_ids,num_segments,name=None)
tf.compat.v1.unsorted_segment_sqrt_n(data,segment_ids,num_segments,name=None)
tf.compat.v1.unsorted_segment_sum(data,segment_ids,num_segments,name=None)
tf.compat.v1.unstack(value,num=None,axis=0,name='unstack')
tf.compat.v1.user_ops.my_fact()
tf.compat.v1.variable_axis_size_partitioner(max_shard_bytes,axis=0,bytes_per_string_element=16,max_shards=None)
tf.compat.v1.variable_scope(name_or_scope,default_name=None,values=None,initializer=None,regularizer=None,caching_device=None,partitioner=None,custom_getter=None,reuse=None,dtype=None,use_resource=None,constraint=None,auxiliary_name_scope=True)
tf.compat.v1.variables_initializer(var_list,name='init')
tf.compat.v1.variance_scaling_initializer(scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None,dtype=tf.dtypes.float32)
tf.compat.v1.vectorized_map(fn,elems,fallback_to_while_loop=True)
tf.compat.v1.verify_tensor_all_finite(t=None,msg=None,name=None,x=None,message=None)
tf.compat.v1.where(condition,x=None,y=None,name=None)
tf.compat.v1.where_v2(condition,x=None,y=None,name=None)
tf.compat.v1.while_loop(cond,body,loop_vars,shape_invariants=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None,maximum_iterations=None,return_same_structure=False)
tf.compat.v1.wrap_function(fn,signature,name=None)
tf.compat.v1.write_file(filename,contents,name=None)
tf.compat.v1.xla.experimental.compile(computation,inputs=None)
tf.compat.v1.zeros(shape,dtype=tf.dtypes.float32,name=None)
tf.compat.v1.zeros_initializer(dtype=tf.dtypes.float32)
tf.compat.v1.zeros_like(tensor,dtype=None,name=None,optimize=True)
tf.compat.v1.zeta(x,q,name=None)
tf.complex(real,imag,name=None)
tf.concat(values,axis,name='concat')
tf.cond(pred,true_fn=None,false_fn=None,name=None)
tf.config.LogicalDevice(name,device_type)
tf.config.LogicalDeviceConfiguration(memory_limit=None,experimental_priority=None)
tf.config.PhysicalDevice(name,device_type)
tf.config.experimental.ClusterDeviceFilters()
tf.config.experimental.VirtualDeviceConfiguration(memory_limit=None,experimental_priority=None)
tf.config.experimental.disable_mlir_bridge()
tf.config.experimental.disable_mlir_graph_optimization()
tf.config.experimental.enable_mlir_bridge()
tf.config.experimental.enable_mlir_graph_optimization()
tf.config.experimental.enable_tensor_float_32_execution(enabled)
tf.config.experimental.get_device_details(device)
tf.config.experimental.get_device_policy()
tf.config.experimental.get_memory_growth(device)
tf.config.experimental.get_memory_info(device)
tf.config.experimental.get_memory_usage(device)
tf.config.experimental.get_synchronous_execution()
tf.config.experimental.get_virtual_device_configuration(device)
tf.config.experimental.get_visible_devices(device_type=None)
tf.config.experimental.list_logical_devices(device_type=None)
tf.config.experimental.list_physical_devices(device_type=None)
tf.config.experimental.reset_memory_stats(device)
tf.config.experimental.set_device_policy(device_policy)
tf.config.experimental.set_memory_growth(device,enable)
tf.config.experimental.set_synchronous_execution(enable)
tf.config.experimental.set_virtual_device_configuration(device,logical_devices)
tf.config.experimental.set_visible_devices(devices,device_type=None)
tf.config.experimental.tensor_float_32_execution_enabled()
tf.config.experimental_connect_to_cluster(cluster_spec_or_resolver,job_name='localhost',task_index=0,protocol=None,make_master_device_default=True,cluster_device_filters=None)
tf.config.experimental_connect_to_host(remote_host=None,job_name='worker')
tf.config.experimental_functions_run_eagerly()
tf.config.experimental_run_functions_eagerly(run_eagerly)
tf.config.functions_run_eagerly()
tf.config.get_logical_device_configuration(device)
tf.config.get_soft_device_placement()
tf.config.get_visible_devices(device_type=None)
tf.config.list_logical_devices(device_type=None)
tf.config.list_physical_devices(device_type=None)
tf.config.optimizer.get_experimental_options()
tf.config.optimizer.get_jit()->str
tf.config.optimizer.set_experimental_options(options)
tf.config.optimizer.set_jit(enabled:Union[bool,str])
tf.config.run_functions_eagerly(run_eagerly)
tf.config.set_logical_device_configuration(device,logical_devices)
tf.config.set_soft_device_placement(enabled)
tf.config.set_visible_devices(devices,device_type=None)
tf.config.threading.get_inter_op_parallelism_threads()
tf.config.threading.get_intra_op_parallelism_threads()
tf.config.threading.set_inter_op_parallelism_threads(num_threads)
tf.config.threading.set_intra_op_parallelism_threads(num_threads)
tf.constant(value,dtype=None,shape=None,name='Const')
tf.constant_initializer(value=0)
tf.control_dependencies(control_inputs)
tf.convert_to_tensor(value,dtype=None,dtype_hint=None,name=None)
tf.cos(x,name=None)
tf.cosh(x,name=None)
tf.cumsum(x,axis=0,exclusive=False,reverse=False,name=None)
tf.custom_gradient(f=None)
tf.data.Dataset(variant_tensor)
tf.data.DatasetSpec(element_spec,dataset_shape=())
tf.data.FixedLengthRecordDataset(filenames,record_bytes,header_bytes=None,footer_bytes=None,buffer_size=None,compression_type=None,num_parallel_reads=None,name=None)
tf.data.IteratorSpec(element_spec)
tf.data.Options()
tf.data.TFRecordDataset(filenames,compression_type=None,buffer_size=None,num_parallel_reads=None,name=None)
tf.data.TextLineDataset(filenames,compression_type=None,buffer_size=None,num_parallel_reads=None,name=None)
tf.data.ThreadingOptions()
tf.data.experimental.AutotuneOptions()
tf.data.experimental.CheckpointInputPipelineHook(estimator,external_state_policy=None)
tf.data.experimental.Counter(start=0,step=1,dtype=tf.dtypes.int64)
tf.data.experimental.CsvDataset(filenames,record_defaults,compression_type=None,buffer_size=None,header=False,field_delim=',',use_quote_delim=True,na_value='',select_cols=None,exclude_cols=None)
tf.data.experimental.DatasetInitializer(dataset)
tf.data.experimental.DistributeOptions()
tf.data.experimental.OptimizationOptions()
tf.data.experimental.RandomDataset(seed=None,name=None)
tf.data.experimental.Reducer(init_func,reduce_func,finalize_func)
tf.data.experimental.SqlDataset(driver_name,data_source_name,query,output_types)
tf.data.experimental.TFRecordWriter(filename,compression_type=None)
tf.data.experimental.ThreadingOptions()
tf.data.experimental.assert_cardinality(expected_cardinality)
tf.data.experimental.bucket_by_sequence_length(element_length_func,bucket_boundaries,bucket_batch_sizes,padded_shapes=None,padding_values=None,pad_to_bucket_boundary=False,no_padding=False,drop_remainder=False)
tf.data.experimental.cardinality(dataset)
tf.data.experimental.choose_from_datasets(datasets,choice_dataset,stop_on_empty_dataset=False)
tf.data.experimental.copy_to_device(target_device,source_device='/cpu:0')
tf.data.experimental.dense_to_ragged_batch(batch_size,drop_remainder=False,row_splits_dtype=tf.dtypes.int64)
tf.data.experimental.dense_to_sparse_batch(batch_size,row_shape)
tf.data.experimental.enable_debug_mode()
tf.data.experimental.enumerate_dataset(start=0)
tf.data.experimental.from_variant(variant,structure)
tf.data.experimental.get_next_as_optional(iterator)
tf.data.experimental.get_single_element(dataset)
tf.data.experimental.get_structure(dataset_or_iterator)
tf.data.experimental.group_by_reducer(key_func,reducer)
tf.data.experimental.group_by_window(key_func,reduce_func,window_size=None,window_size_func=None)
tf.data.experimental.ignore_errors(log_warning=False)
tf.data.experimental.index_table_from_dataset(dataset=None,num_oov_buckets=0,vocab_size=None,default_value=-1,hasher_spec=lookup_ops.FastHashSpec,key_dtype=tf.dtypes.string,name=None)
tf.data.experimental.load(path,element_spec=None,compression=None,reader_func=None)
tf.data.experimental.make_batched_features_dataset(file_pattern,batch_size,features,reader=None,label_key=None,reader_args=None,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,reader_num_threads=None,parser_num_threads=None,sloppy_ordering=False,drop_final_batch=False)
tf.data.experimental.make_csv_dataset(file_pattern,batch_size,column_names=None,column_defaults=None,label_name=None,select_columns=None,field_delim=',',use_quote_delim=True,na_value='',header=True,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,num_parallel_reads=None,sloppy=False,num_rows_for_inference=100,compression_type=None,ignore_errors=False)
tf.data.experimental.make_saveable_from_iterator(iterator,external_state_policy=None)
tf.data.experimental.map_and_batch(map_func,batch_size,num_parallel_batches=None,drop_remainder=False,num_parallel_calls=None)
tf.data.experimental.parallel_interleave(map_func,cycle_length,block_length=1,sloppy=False,buffer_output_elements=None,prefetch_input_elements=None)
tf.data.experimental.parse_example_dataset(features,num_parallel_calls=1,deterministic=None)
tf.data.experimental.prefetch_to_device(device,buffer_size=None)
tf.data.experimental.rejection_resample(class_func,target_dist,initial_dist=None,seed=None)
tf.data.experimental.sample_from_datasets(datasets,weights=None,seed=None,stop_on_empty_dataset=False)
tf.data.experimental.save(dataset,path,compression=None,shard_func=None,checkpoint_args=None)
tf.data.experimental.scan(initial_state,scan_func)
tf.data.experimental.service.DispatchServer(config=None,start=True)
tf.data.experimental.service.DispatcherConfig(port=0,protocol=None,work_dir=None,fault_tolerant_mode=False,worker_addresses=None,job_gc_check_interval_ms=None,job_gc_timeout_ms=None)
tf.data.experimental.service.WorkerConfig(dispatcher_address,worker_address=None,port=0,protocol=None,heartbeat_interval_ms=None,dispatcher_timeout_ms=None)
tf.data.experimental.service.WorkerServer(config,start=True)
tf.data.experimental.service.distribute(processing_mode,service,job_name=None,consumer_index=None,num_consumers=None,max_outstanding_requests=None,data_transfer_protocol=None,compression='AUTO',target_workers='AUTO')
tf.data.experimental.service.from_dataset_id(processing_mode,service,dataset_id,element_spec=None,job_name=None,consumer_index=None,num_consumers=None,max_outstanding_requests=None,data_transfer_protocol=None,target_workers='AUTO')
tf.data.experimental.service.register_dataset(service,dataset,compression='AUTO')
tf.data.experimental.shuffle_and_repeat(buffer_size,count=None,seed=None)
tf.data.experimental.snapshot(path,compression='AUTO',reader_func=None,shard_func=None)
tf.data.experimental.table_from_dataset(dataset=None,num_oov_buckets=0,vocab_size=None,default_value=None,hasher_spec=lookup_ops.FastHashSpec,key_dtype=tf.dtypes.string,name=None)
tf.data.experimental.take_while(predicate)
tf.data.experimental.to_variant(dataset)
tf.data.experimental.unbatch()
tf.data.experimental.unique()
tf.debugging.Assert(condition,data,summarize=None,name=None)
tf.debugging.assert_all_finite(x,message,name=None)
tf.debugging.assert_equal(x,y,message=None,summarize=None,name=None)
tf.debugging.assert_greater(x,y,message=None,summarize=None,name=None)
tf.debugging.assert_greater_equal(x,y,message=None,summarize=None,name=None)
tf.debugging.assert_integer(x,message=None,name=None)
tf.debugging.assert_less(x,y,message=None,summarize=None,name=None)
tf.debugging.assert_less_equal(x,y,message=None,summarize=None,name=None)
tf.debugging.assert_near(x,y,rtol=None,atol=None,message=None,summarize=None,name=None)
tf.debugging.assert_negative(x,message=None,summarize=None,name=None)
tf.debugging.assert_non_negative(x,message=None,summarize=None,name=None)
tf.debugging.assert_non_positive(x,message=None,summarize=None,name=None)
tf.debugging.assert_none_equal(x,y,summarize=None,message=None,name=None)
tf.debugging.assert_positive(x,message=None,summarize=None,name=None)
tf.debugging.assert_proper_iterable(values)
tf.debugging.assert_rank(x,rank,message=None,name=None)
tf.debugging.assert_rank_at_least(x,rank,message=None,name=None)
tf.debugging.assert_rank_in(x,ranks,message=None,name=None)
tf.debugging.assert_same_float_dtype(tensors=None,dtype=None)
tf.debugging.assert_scalar(tensor,message=None,name=None)
tf.debugging.assert_shapes(shapes,data=None,summarize=None,message=None,name=None)
tf.debugging.assert_type(tensor,tf_type,message=None,name=None)
tf.debugging.check_numerics(tensor,message,name=None)
tf.debugging.disable_check_numerics()
tf.debugging.disable_traceback_filtering()
tf.debugging.enable_check_numerics(stack_height_limit=30,path_length_limit=50)
tf.debugging.enable_traceback_filtering()
tf.debugging.experimental.disable_dump_debug_info()
tf.debugging.experimental.enable_dump_debug_info(dump_root,tensor_debug_mode=DEFAULT_TENSOR_DEBUG_MODE,circular_buffer_size=1000,op_regex=None,tensor_dtypes=None)
tf.debugging.get_log_device_placement()
tf.debugging.is_numeric_tensor(tensor)
tf.debugging.is_traceback_filtering_enabled()
tf.debugging.set_log_device_placement(enabled)
tf.device(device_name)
tf.distribute.CrossDeviceOps()
tf.distribute.DistributedValues(values)
tf.distribute.HierarchicalCopyAllReduce(num_packs=1)
tf.distribute.InputContext(num_input_pipelines=1,input_pipeline_id=0,num_replicas_in_sync=1)
tf.distribute.InputOptions(experimental_fetch_to_device=None,experimental_replication_mode=tf.distribute.InputReplicationMode.PER_WORKER,experimental_place_dataset_on_device=False,experimental_per_replica_buffer_size=1)
tf.distribute.MirroredStrategy(devices=None,cross_device_ops=None)
tf.distribute.MultiWorkerMirroredStrategy(cluster_resolver=None,communication_options=None)
tf.distribute.NcclAllReduce(num_packs=1)
tf.distribute.OneDeviceStrategy(device)
tf.distribute.ReductionToOneDevice(reduce_to_device=None,accumulation_fn=None)
tf.distribute.ReplicaContext(strategy,replica_id_in_sync_group)
tf.distribute.RunOptions(experimental_enable_dynamic_batch_size=True,experimental_bucketizing_dynamic_shape=False,experimental_xla_options=None)
tf.distribute.Server(server_or_cluster_def,job_name=None,task_index=None,protocol=None,config=None,start=True)
tf.distribute.Strategy(extended)
tf.distribute.StrategyExtended(container_strategy)
tf.distribute.TPUStrategy(tpu_cluster_resolver=None,experimental_device_assignment=None)
tf.distribute.cluster_resolver.GCEClusterResolver(project,zone,instance_group,port,task_type='worker',task_id=0,rpc_layer='grpc',credentials='default',service=None)
tf.distribute.cluster_resolver.KubernetesClusterResolver(job_to_label_mapping=None,tf_server_port=8470,rpc_layer='grpc',override_client=None)
tf.distribute.cluster_resolver.SimpleClusterResolver(cluster_spec,master='',task_type=None,task_id=None,environment='',num_accelerators=None,rpc_layer=None)
tf.distribute.cluster_resolver.SlurmClusterResolver(jobs=None,port_base=8888,gpus_per_node=None,gpus_per_task=None,tasks_per_node=None,auto_set_gpu=True,rpc_layer='grpc')
tf.distribute.cluster_resolver.TFConfigClusterResolver(task_type=None,task_id=None,rpc_layer=None,environment=None)
tf.distribute.cluster_resolver.TPUClusterResolver(tpu=None,zone=None,project=None,job_name='worker',coordinator_name=None,coordinator_address=None,credentials='default',service=None,discovery_url=None)
tf.distribute.cluster_resolver.UnionResolver(*args,**kwargs)
tf.distribute.experimental.CentralStorageStrategy(compute_devices=None,parameter_device=None)
tf.distribute.experimental.CollectiveHints(bytes_per_pack=0,timeout_seconds=None)
tf.distribute.experimental.CommunicationOptions(bytes_per_pack=0,timeout_seconds=None,implementation=tf.distribute.experimental.CollectiveCommunication.AUTO)
tf.distribute.experimental.MultiWorkerMirroredStrategy(communication=tf.distribute.experimental.CollectiveCommunication.AUTO,cluster_resolver=None)
tf.distribute.experimental.ParameterServerStrategy(cluster_resolver,variable_partitioner=None)
tf.distribute.experimental.TPUStrategy(tpu_cluster_resolver=None,device_assignment=None)
tf.distribute.experimental.ValueContext(replica_id_in_sync_group=0,num_replicas_in_sync=1)
tf.distribute.experimental.coordinator.ClusterCoordinator(strategy)
tf.distribute.experimental.coordinator.PerWorkerValues(values)
tf.distribute.experimental.partitioners.FixedShardsPartitioner(num_shards)
tf.distribute.experimental.partitioners.MaxSizePartitioner(max_shard_bytes,max_shards=None,bytes_per_string=16)
tf.distribute.experimental.partitioners.MinSizePartitioner(min_shard_bytes=(256<<10),max_shards=1,bytes_per_string=16)
tf.distribute.experimental_set_strategy(strategy)
tf.distribute.get_replica_context()
tf.distribute.get_strategy()
tf.distribute.has_strategy()
tf.distribute.in_cross_replica_context()
tf.divide(x,y,name=None)
tf.dtypes.DType()
tf.dtypes.as_dtype(type_value)
tf.dtypes.cast(x,dtype,name=None)
tf.dtypes.complex(real,imag,name=None)
tf.dtypes.saturate_cast(value,dtype,name=None)
tf.dynamic_partition(data,partitions,num_partitions,name=None)
tf.dynamic_stitch(indices,data,name=None)
tf.edit_distance(hypothesis,truth,normalize=True,name='edit_distance')
tf.eig(tensor,name=None)
tf.eigvals(tensor,name=None)
tf.einsum(equation,*inputs,**kwargs)
tf.ensure_shape(x,shape,name=None)
tf.equal(x,y,name=None)
tf.errors.AbortedError(node_def,op,message,*args)
tf.errors.AlreadyExistsError(node_def,op,message,*args)
tf.errors.CancelledError(node_def,op,message,*args)
tf.errors.DataLossError(node_def,op,message,*args)
tf.errors.DeadlineExceededError(node_def,op,message,*args)
tf.errors.FailedPreconditionError(node_def,op,message,*args)
tf.errors.InternalError(node_def,op,message,*args)
tf.errors.InvalidArgumentError(node_def,op,message,*args)
tf.errors.NotFoundError(node_def,op,message,*args)
tf.errors.OpError(node_def,op,message,error_code,*args)
tf.errors.OperatorNotAllowedInGraphError(*args,**kwargs)
tf.errors.OutOfRangeError(node_def,op,message,*args)
tf.errors.PermissionDeniedError(node_def,op,message,*args)
tf.errors.ResourceExhaustedError(node_def,op,message,*args)
tf.errors.UnauthenticatedError(node_def,op,message,*args)
tf.errors.UnavailableError(node_def,op,message,*args)
tf.errors.UnimplementedError(node_def,op,message,*args)
tf.errors.UnknownError(node_def,op,message,*args)
tf.estimator.BaselineClassifier(model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Ftrl',config=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE)
tf.estimator.BaselineEstimator(head,model_dir=None,optimizer='Ftrl',config=None)
tf.estimator.BaselineRegressor(model_dir=None,label_dimension=1,weight_column=None,optimizer='Ftrl',config=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE)
tf.estimator.BestExporter(name='best_exporter',serving_input_receiver_fn=None,event_file_pattern='eval/*.tfevents.*',compare_fn=_loss_smaller,assets_extra=None,as_text=False,exports_to_keep=5)
tf.estimator.BinaryClassHead(weight_column=None,thresholds=None,label_vocabulary=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,name=None)
tf.estimator.BoostedTreesClassifier(feature_columns,n_batches_per_layer,model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,n_trees=100,max_depth=6,learning_rate=0.1,l1_regularization=0.0,l2_regularization=0.0,tree_complexity=0.0,min_node_weight=0.0,config=None,center_bias=False,pruning_mode='none',quantile_sketch_epsilon=0.01,train_in_memory=False)
tf.estimator.BoostedTreesEstimator(feature_columns,n_batches_per_layer,head,model_dir=None,weight_column=None,n_trees=100,max_depth=6,learning_rate=0.1,l1_regularization=0.0,l2_regularization=0.0,tree_complexity=0.0,min_node_weight=0.0,config=None,center_bias=False,pruning_mode='none',quantile_sketch_epsilon=0.01)
tf.estimator.BoostedTreesRegressor(feature_columns,n_batches_per_layer,model_dir=None,label_dimension=1,weight_column=None,n_trees=100,max_depth=6,learning_rate=0.1,l1_regularization=0.0,l2_regularization=0.0,tree_complexity=0.0,min_node_weight=0.0,config=None,center_bias=False,pruning_mode='none',quantile_sketch_epsilon=0.01,train_in_memory=False)
tf.estimator.CheckpointSaverHook(checkpoint_dir,save_secs=None,save_steps=None,saver=None,checkpoint_basename='model.ckpt',scaffold=None,listeners=None,save_graph_def=True)
tf.estimator.DNNClassifier(hidden_units,feature_columns,model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Adagrad',activation_fn=tf.nn.relu,dropout=None,config=None,warm_start_from=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,batch_norm=False)
tf.estimator.DNNEstimator(head,hidden_units,feature_columns,model_dir=None,optimizer='Adagrad',activation_fn=tf.nn.relu,dropout=None,config=None,warm_start_from=None,batch_norm=False)
tf.estimator.DNNLinearCombinedClassifier(model_dir=None,linear_feature_columns=None,linear_optimizer='Ftrl',dnn_feature_columns=None,dnn_optimizer='Adagrad',dnn_hidden_units=None,dnn_activation_fn=tf.nn.relu,dnn_dropout=None,n_classes=2,weight_column=None,label_vocabulary=None,config=None,warm_start_from=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,batch_norm=False,linear_sparse_combiner='sum')
tf.estimator.DNNLinearCombinedEstimator(head,model_dir=None,linear_feature_columns=None,linear_optimizer='Ftrl',dnn_feature_columns=None,dnn_optimizer='Adagrad',dnn_hidden_units=None,dnn_activation_fn=tf.nn.relu,dnn_dropout=None,config=None,batch_norm=False,linear_sparse_combiner='sum')
tf.estimator.DNNLinearCombinedRegressor(model_dir=None,linear_feature_columns=None,linear_optimizer='Ftrl',dnn_feature_columns=None,dnn_optimizer='Adagrad',dnn_hidden_units=None,dnn_activation_fn=tf.nn.relu,dnn_dropout=None,label_dimension=1,weight_column=None,config=None,warm_start_from=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,batch_norm=False,linear_sparse_combiner='sum')
tf.estimator.DNNRegressor(hidden_units,feature_columns,model_dir=None,label_dimension=1,weight_column=None,optimizer='Adagrad',activation_fn=tf.nn.relu,dropout=None,config=None,warm_start_from=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,batch_norm=False)
tf.estimator.Estimator(model_fn,model_dir=None,config=None,params=None,warm_start_from=None)
tf.estimator.EstimatorSpec(mode,predictions=None,loss=None,train_op=None,eval_metric_ops=None,export_outputs=None,training_chief_hooks=None,training_hooks=None,scaffold=None,evaluation_hooks=None,prediction_hooks=None)
tf.estimator.EvalSpec(input_fn,steps=100,name=None,hooks=None,exporters=None,start_delay_secs=120,throttle_secs=600)
tf.estimator.FeedFnHook(feed_fn)
tf.estimator.FinalExporter(name,serving_input_receiver_fn,assets_extra=None,as_text=False)
tf.estimator.FinalOpsHook(final_ops,final_ops_feed_dict=None)
tf.estimator.GlobalStepWaiterHook(wait_until_step)
tf.estimator.LatestExporter(name,serving_input_receiver_fn,assets_extra=None,as_text=False,exports_to_keep=5)
tf.estimator.LinearClassifier(feature_columns,model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Ftrl',config=None,warm_start_from=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,sparse_combiner='sum')
tf.estimator.LinearEstimator(head,feature_columns,model_dir=None,optimizer='Ftrl',config=None,sparse_combiner='sum',warm_start_from=None)
tf.estimator.LinearRegressor(feature_columns,model_dir=None,label_dimension=1,weight_column=None,optimizer='Ftrl',config=None,warm_start_from=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,sparse_combiner='sum')
tf.estimator.LoggingTensorHook(tensors,every_n_iter=None,every_n_secs=None,at_end=False,formatter=None)
tf.estimator.LogisticRegressionHead(weight_column=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,name=None)
tf.estimator.MultiClassHead(n_classes,weight_column=None,label_vocabulary=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,name=None)
tf.estimator.MultiHead(heads,head_weights=None)
tf.estimator.MultiLabelHead(n_classes,weight_column=None,thresholds=None,label_vocabulary=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,classes_for_class_based_metrics=None,name=None)
tf.estimator.NanLossDuringTrainingError(*args,**kwargs)
tf.estimator.NanTensorHook(loss_tensor,fail_on_nan_loss=True)
tf.estimator.PoissonRegressionHead(label_dimension=1,weight_column=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,compute_full_loss=True,name=None)
tf.estimator.ProfilerHook(save_steps=None,save_secs=None,output_dir='',show_dataflow=True,show_memory=False)
tf.estimator.RegressionHead(label_dimension=1,weight_column=None,loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,loss_fn=None,inverse_link_fn=None,name=None)
tf.estimator.RunConfig(model_dir=None,tf_random_seed=None,save_summary_steps=100,save_checkpoints_steps=_USE_DEFAULT,save_checkpoints_secs=_USE_DEFAULT,session_config=None,keep_checkpoint_max=5,keep_checkpoint_every_n_hours=10000,log_step_count_steps=100,train_distribute=None,device_fn=None,protocol=None,eval_distribute=None,experimental_distribute=None,experimental_max_worker_delay_secs=None,session_creation_timeout_secs=7200,checkpoint_save_graph_def=True)
tf.estimator.SecondOrStepTimer(every_secs=None,every_steps=None)
tf.estimator.SessionRunArgs(fetches,feed_dict=None,options=None)
tf.estimator.SessionRunContext(original_args,session)
tf.estimator.SessionRunValues(results,options,run_metadata)
tf.estimator.StepCounterHook(every_n_steps=100,every_n_secs=None,output_dir=None,summary_writer=None)
tf.estimator.StopAtStepHook(num_steps=None,last_step=None)
tf.estimator.SummarySaverHook(save_steps=None,save_secs=None,output_dir=None,summary_writer=None,scaffold=None,summary_op=None)
tf.estimator.TrainSpec(input_fn,max_steps=None,hooks=None,saving_listeners=None)
tf.estimator.VocabInfo(new_vocab,new_vocab_size,num_oov_buckets,old_vocab,old_vocab_size=-1,backup_initializer=None,axis=0)
tf.estimator.WarmStartSettings(ckpt_to_initialize_from,vars_to_warm_start='.*',var_name_to_vocab_info=None,var_name_to_prev_var_name=None)
tf.estimator.add_metrics(estimator,metric_fn)
tf.estimator.classifier_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.int64,label_default=None,weight_column=None)
tf.estimator.experimental.InMemoryEvaluatorHook(estimator,input_fn,steps=None,hooks=None,name=None,every_n_iter=100)
tf.estimator.experimental.LinearSDCA(example_id_column,num_loss_partitions=1,num_table_shards=None,symmetric_l1_regularization=0.0,symmetric_l2_regularization=1.0,adaptive=False)
tf.estimator.experimental.RNNClassifier(sequence_feature_columns,context_feature_columns=None,units=None,cell_type=USE_DEFAULT,rnn_cell_fn=None,return_sequences=False,model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Adagrad',loss_reduction=tf.compat.v2.keras.losses.Reduction.SUM_OVER_BATCH_SIZE,sequence_mask='sequence_mask',config=None)
tf.estimator.experimental.RNNEstimator(head,sequence_feature_columns,context_feature_columns=None,units=None,cell_type=USE_DEFAULT,rnn_cell_fn=None,return_sequences=False,model_dir=None,optimizer='Adagrad',config=None)
tf.estimator.experimental.build_raw_supervised_input_receiver_fn(features,labels,default_batch_size=None)
tf.estimator.experimental.call_logit_fn(logit_fn,features,mode,params,config)
tf.estimator.experimental.make_early_stopping_hook(estimator,should_stop_fn,run_every_secs=60,run_every_steps=None)
tf.estimator.experimental.make_stop_at_checkpoint_step_hook(estimator,last_step,wait_after_file_check_secs=30)
tf.estimator.experimental.stop_if_higher_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)
tf.estimator.experimental.stop_if_lower_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)
tf.estimator.experimental.stop_if_no_decrease_hook(estimator,metric_name,max_steps_without_decrease,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)
tf.estimator.experimental.stop_if_no_increase_hook(estimator,metric_name,max_steps_without_increase,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)
tf.estimator.export.ClassificationOutput(scores=None,classes=None)
tf.estimator.export.EvalOutput(loss=None,predictions=None,metrics=None)
tf.estimator.export.PredictOutput(outputs)
tf.estimator.export.RegressionOutput(value)
tf.estimator.export.ServingInputReceiver(features,receiver_tensors,receiver_tensors_alternatives=None)
tf.estimator.export.TensorServingInputReceiver(features,receiver_tensors,receiver_tensors_alternatives=None)
tf.estimator.export.build_parsing_serving_input_receiver_fn(feature_spec,default_batch_size=None)
tf.estimator.export.build_raw_serving_input_receiver_fn(features,default_batch_size=None)
tf.estimator.regressor_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.float32,label_default=None,label_dimension=1,weight_column=None)
tf.estimator.train_and_evaluate(estimator,train_spec,eval_spec)
tf.executing_eagerly()
tf.exp(x,name=None)
tf.expand_dims(input,axis,name=None)
tf.experimental.BatchableExtensionType(*args,**kwargs)
tf.experimental.ExtensionType(*args,**kwargs)
tf.experimental.async_clear_error()
tf.experimental.dispatch_for_api(api,*signatures)
tf.experimental.dispatch_for_binary_elementwise_apis(x_type,y_type)
tf.experimental.dispatch_for_unary_elementwise_apis(x_type)
tf.experimental.dlpack.from_dlpack(dlcapsule)
tf.experimental.dlpack.to_dlpack(tf_tensor)
tf.experimental.numpy.abs(x)
tf.experimental.numpy.absolute(x)
tf.experimental.numpy.add(x1,x2)
tf.experimental.numpy.all(a,axis=None,keepdims=None)
tf.experimental.numpy.allclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
tf.experimental.numpy.amax(a,axis=None,out=None,keepdims=None)
tf.experimental.numpy.amin(a,axis=None,out=None,keepdims=None)
tf.experimental.numpy.angle(z,deg=False)
tf.experimental.numpy.any(a,axis=None,keepdims=None)
tf.experimental.numpy.append(arr,values,axis=None)
tf.experimental.numpy.arange(start,stop=None,step=1,dtype=None)
tf.experimental.numpy.arccos(x)
tf.experimental.numpy.arccosh(x)
tf.experimental.numpy.arcsin(x)
tf.experimental.numpy.arcsinh(x)
tf.experimental.numpy.arctan(x)
tf.experimental.numpy.arctan2(x1,x2)
tf.experimental.numpy.arctanh(x)
tf.experimental.numpy.argmax(a,axis=None)
tf.experimental.numpy.argmin(a,axis=None)
tf.experimental.numpy.argsort(a,axis=-1,kind='quicksort',order=None)
tf.experimental.numpy.around(a,decimals=0)
tf.experimental.numpy.array(val,dtype=None,copy=True,ndmin=0)
tf.experimental.numpy.array_equal(a1,a2)
tf.experimental.numpy.asanyarray(a,dtype=None)
tf.experimental.numpy.asarray(a,dtype=None)
tf.experimental.numpy.ascontiguousarray(a,dtype=None)
tf.experimental.numpy.atleast_1d(*arys)
tf.experimental.numpy.atleast_2d(*arys)
tf.experimental.numpy.atleast_3d(*arys)
tf.experimental.numpy.average(a,axis=None,weights=None,returned=False)
tf.experimental.numpy.bitwise_and(x1,x2)
tf.experimental.numpy.bitwise_not(x)
tf.experimental.numpy.bitwise_or(x1,x2)
tf.experimental.numpy.bitwise_xor(x1,x2)
tf.experimental.numpy.bool_(*args,**kwargs)
tf.experimental.numpy.broadcast_arrays(*args,**kwargs)
tf.experimental.numpy.broadcast_to(array,shape)
tf.experimental.numpy.cbrt(x)
tf.experimental.numpy.ceil(x)
tf.experimental.numpy.clip(a,a_min,a_max)
tf.experimental.numpy.complex128(*args,**kwargs)
tf.experimental.numpy.complex64(*args,**kwargs)
tf.experimental.numpy.complex_(*args,**kwargs)
tf.experimental.numpy.compress(condition,a,axis=None)
tf.experimental.numpy.concatenate(arys,axis=0)
tf.experimental.numpy.conj(x)
tf.experimental.numpy.conjugate(x)
tf.experimental.numpy.copy(a)
tf.experimental.numpy.cos(x)
tf.experimental.numpy.cosh(x)
tf.experimental.numpy.count_nonzero(a,axis=None)
tf.experimental.numpy.cross(a,b,axisa=-1,axisb=-1,axisc=-1,axis=None)
tf.experimental.numpy.cumprod(a,axis=None,dtype=None)
tf.experimental.numpy.cumsum(a,axis=None,dtype=None)
tf.experimental.numpy.deg2rad(x)
tf.experimental.numpy.diag(v,k=0)
tf.experimental.numpy.diag_indices(n,ndim=2)
tf.experimental.numpy.diagflat(v,k=0)
tf.experimental.numpy.diagonal(a,offset=0,axis1=0,axis2=1)
tf.experimental.numpy.diff(a,n=1,axis=-1)
tf.experimental.numpy.divide(x1,x2)
tf.experimental.numpy.divmod(x1,x2)
tf.experimental.numpy.dot(a,b)
tf.experimental.numpy.dsplit(ary,indices_or_sections)
tf.experimental.numpy.dstack(tup)
tf.experimental.numpy.einsum(subscripts,*operands,**kwargs)
tf.experimental.numpy.empty(shape,dtype=float)
tf.experimental.numpy.empty_like(a,dtype=None)
tf.experimental.numpy.equal(x1,x2)
tf.experimental.numpy.exp(x)
tf.experimental.numpy.exp2(x)
tf.experimental.numpy.expand_dims(a,axis)
tf.experimental.numpy.experimental_enable_numpy_behavior(prefer_float32=False)
tf.experimental.numpy.expm1(x)
tf.experimental.numpy.eye(N,M=None,k=0,dtype=float)
tf.experimental.numpy.fabs(x)
tf.experimental.numpy.finfo(dtype)
tf.experimental.numpy.fix(x)
tf.experimental.numpy.flip(m,axis=None)
tf.experimental.numpy.fliplr(m)
tf.experimental.numpy.flipud(m)
tf.experimental.numpy.float16(*args,**kwargs)
tf.experimental.numpy.float32(*args,**kwargs)
tf.experimental.numpy.float64(*args,**kwargs)
tf.experimental.numpy.float_(*args,**kwargs)
tf.experimental.numpy.float_power(x1,x2)
tf.experimental.numpy.floor(x)
tf.experimental.numpy.floor_divide(x1,x2)
tf.experimental.numpy.full(shape,fill_value,dtype=None)
tf.experimental.numpy.full_like(a,fill_value,dtype=None,order='K',subok=True,shape=None)
tf.experimental.numpy.gcd(x1,x2)
tf.experimental.numpy.geomspace(start,stop,num=50,endpoint=True,dtype=None,axis=0)
tf.experimental.numpy.greater(x1,x2)
tf.experimental.numpy.greater_equal(x1,x2)
tf.experimental.numpy.heaviside(x1,x2)
tf.experimental.numpy.hsplit(ary,indices_or_sections)
tf.experimental.numpy.hstack(tup)
tf.experimental.numpy.hypot(x1,x2)
tf.experimental.numpy.identity(n,dtype=float)
tf.experimental.numpy.iinfo(int_type)
tf.experimental.numpy.imag(val)
tf.experimental.numpy.inner(a,b)
tf.experimental.numpy.int16(*args,**kwargs)
tf.experimental.numpy.int32(*args,**kwargs)
tf.experimental.numpy.int64(*args,**kwargs)
tf.experimental.numpy.int8(*args,**kwargs)
tf.experimental.numpy.int_(*args,**kwargs)
tf.experimental.numpy.isclose(a,b,rtol=1e-05,atol=1e-08,equal_nan=False)
tf.experimental.numpy.iscomplex(x)
tf.experimental.numpy.iscomplexobj(x)
tf.experimental.numpy.isfinite(x)
tf.experimental.numpy.isinf(x)
tf.experimental.numpy.isnan(x)
tf.experimental.numpy.isneginf(x)
tf.experimental.numpy.isposinf(x)
tf.experimental.numpy.isreal(x)
tf.experimental.numpy.isrealobj(x)
tf.experimental.numpy.isscalar(num)
tf.experimental.numpy.issubdtype(arg1,arg2)
tf.experimental.numpy.ix_(*args)
tf.experimental.numpy.kron(a,b)
tf.experimental.numpy.lcm(x1,x2)
tf.experimental.numpy.less(x1,x2)
tf.experimental.numpy.less_equal(x1,x2)
tf.experimental.numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=float,axis=0)
tf.experimental.numpy.log(x)
tf.experimental.numpy.log10(x)
tf.experimental.numpy.log1p(x)
tf.experimental.numpy.log2(x)
tf.experimental.numpy.logaddexp(x1,x2)
tf.experimental.numpy.logaddexp2(x1,x2)
tf.experimental.numpy.logical_and(x1,x2)
tf.experimental.numpy.logical_not(x)
tf.experimental.numpy.logical_or(x1,x2)
tf.experimental.numpy.logical_xor(x1,x2)
tf.experimental.numpy.logspace(start,stop,num=50,endpoint=True,base=10.0,dtype=None,axis=0)
tf.experimental.numpy.matmul(x1,x2)
tf.experimental.numpy.max(a,axis=None,keepdims=None)
tf.experimental.numpy.maximum(x1,x2)
tf.experimental.numpy.mean(a,axis=None,dtype=None,out=None,keepdims=None)
tf.experimental.numpy.meshgrid(*xi,**kwargs)
tf.experimental.numpy.min(a,axis=None,keepdims=None)
tf.experimental.numpy.minimum(x1,x2)
tf.experimental.numpy.mod(x1,x2)
tf.experimental.numpy.moveaxis(a,source,destination)
tf.experimental.numpy.multiply(x1,x2)
tf.experimental.numpy.nanmean(a,axis=None,dtype=None,keepdims=None)
tf.experimental.numpy.nanprod(a,axis=None,dtype=None,keepdims=False)
tf.experimental.numpy.nansum(a,axis=None,dtype=None,keepdims=False)
tf.experimental.numpy.ndarray(op,value_index,dtype)
tf.experimental.numpy.ndim(a)
tf.experimental.numpy.negative(x)
tf.experimental.numpy.nextafter(x1,x2)
tf.experimental.numpy.nonzero(a)
tf.experimental.numpy.not_equal(x1,x2)
tf.experimental.numpy.object_(*args,**kwargs)
tf.experimental.numpy.ones(shape,dtype=float)
tf.experimental.numpy.ones_like(a,dtype=None)
tf.experimental.numpy.outer(a,b)
tf.experimental.numpy.pad(array,pad_width,mode,**kwargs)
tf.experimental.numpy.polyval(p,x)
tf.experimental.numpy.positive(x)
tf.experimental.numpy.power(x1,x2)
tf.experimental.numpy.prod(a,axis=None,dtype=None,keepdims=None)
tf.experimental.numpy.promote_types(type1,type2)
tf.experimental.numpy.ptp(a,axis=None,keepdims=None)
tf.experimental.numpy.rad2deg(x)
tf.experimental.numpy.random.poisson(lam=1.0,size=None)
tf.experimental.numpy.random.rand(*size)
tf.experimental.numpy.random.randint(low,high=None,size=None,dtype=tf.experimental.numpy.int64)
tf.experimental.numpy.random.randn(*args)
tf.experimental.numpy.random.random(size=None)
tf.experimental.numpy.random.seed(s)
tf.experimental.numpy.random.standard_normal(size=None)
tf.experimental.numpy.random.uniform(low=0.0,high=1.0,size=None)
tf.experimental.numpy.ravel(a)
tf.experimental.numpy.real(val)
tf.experimental.numpy.reciprocal(x)
tf.experimental.numpy.remainder(x1,x2)
tf.experimental.numpy.repeat(a,repeats,axis=None)
tf.experimental.numpy.reshape(a,newshape,order='C')
tf.experimental.numpy.result_type(*arrays_and_dtypes)
tf.experimental.numpy.roll(a,shift,axis=None)
tf.experimental.numpy.rot90(m,k=1,axes=(0,1))
tf.experimental.numpy.round(a,decimals=0)
tf.experimental.numpy.select(condlist,choicelist,default=0)
tf.experimental.numpy.shape(a)
tf.experimental.numpy.sign(x,out=None,where=None,**kwargs)
tf.experimental.numpy.signbit(x)
tf.experimental.numpy.sin(x)
tf.experimental.numpy.sinc(x)
tf.experimental.numpy.sinh(x)
tf.experimental.numpy.size(x,axis=None)
tf.experimental.numpy.sort(a,axis=-1,kind='quicksort',order=None)
tf.experimental.numpy.split(ary,indices_or_sections,axis=0)
tf.experimental.numpy.sqrt(x)
tf.experimental.numpy.square(x)
tf.experimental.numpy.squeeze(a,axis=None)
tf.experimental.numpy.stack(arrays,axis=0)
tf.experimental.numpy.std(a,axis=None,keepdims=None)
tf.experimental.numpy.string_(*args,**kwargs)
tf.experimental.numpy.subtract(x1,x2)
tf.experimental.numpy.sum(a,axis=None,dtype=None,keepdims=None)
tf.experimental.numpy.swapaxes(a,axis1,axis2)
tf.experimental.numpy.take(a,indices,axis=None,out=None,mode='clip')
tf.experimental.numpy.take_along_axis(arr,indices,axis)
tf.experimental.numpy.tan(x)
tf.experimental.numpy.tanh(x)
tf.experimental.numpy.tensordot(a,b,axes=2)
tf.experimental.numpy.tile(a,reps)
tf.experimental.numpy.trace(a,offset=0,axis1=0,axis2=1,dtype=None)
tf.experimental.numpy.transpose(a,axes=None)
tf.experimental.numpy.tri(N,M=None,k=0,dtype=None)
tf.experimental.numpy.tril(m,k=0)
tf.experimental.numpy.triu(m,k=0)
tf.experimental.numpy.true_divide(x1,x2)
tf.experimental.numpy.uint16(*args,**kwargs)
tf.experimental.numpy.uint32(*args,**kwargs)
tf.experimental.numpy.uint64(*args,**kwargs)
tf.experimental.numpy.uint8(*args,**kwargs)
tf.experimental.numpy.unicode_(*args,**kwargs)
tf.experimental.numpy.vander(x,N=None,increasing=False)
tf.experimental.numpy.var(a,axis=None,dtype=None,out=None,ddof=0,keepdims=None)
tf.experimental.numpy.vdot(a,b)
tf.experimental.numpy.vsplit(ary,indices_or_sections)
tf.experimental.numpy.vstack(tup)
tf.experimental.numpy.where(condition,x=None,y=None)
tf.experimental.numpy.zeros(shape,dtype=float)
tf.experimental.numpy.zeros_like(a,dtype=None)
tf.experimental.register_filesystem_plugin(plugin_location)
tf.experimental.tensorrt.ConversionParams(max_workspace_size_bytes=DEFAULT_TRT_MAX_WORKSPACE_SIZE_BYTES,precision_mode=TrtPrecisionMode.FP32,minimum_segment_size=3,maximum_cached_engines=1,use_calibration=True,allow_build_at_runtime=True)
tf.experimental.tensorrt.Converter(input_saved_model_dir=None,input_saved_model_tags=None,input_saved_model_signature_key=None,use_dynamic_shape=None,dynamic_shape_profile_strategy=None,conversion_params=None)
tf.experimental.unregister_dispatch_for(dispatch_target)
tf.extract_volume_patches(input,ksizes,strides,padding,name=None)
tf.eye(num_rows,num_columns=None,batch_shape=None,dtype=tf.dtypes.float32,name=None)
tf.feature_column.bucketized_column(source_column,boundaries)
tf.feature_column.categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)
tf.feature_column.categorical_column_with_identity(key,num_buckets,default_value=None)
tf.feature_column.categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,dtype=tf.dtypes.string,default_value=None,num_oov_buckets=0,file_format=None)
tf.feature_column.categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)
tf.feature_column.crossed_column(keys,hash_bucket_size,hash_key=None)
tf.feature_column.embedding_column(categorical_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True,use_safe_embedding_lookup=True)
tf.feature_column.indicator_column(categorical_column)
tf.feature_column.make_parse_example_spec(feature_columns)
tf.feature_column.numeric_column(key,shape=(1,),default_value=None,dtype=tf.dtypes.float32,normalizer_fn=None)
tf.feature_column.sequence_categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)
tf.feature_column.sequence_categorical_column_with_identity(key,num_buckets,default_value=None)
tf.feature_column.sequence_categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,num_oov_buckets=0,default_value=None,dtype=tf.dtypes.string)
tf.feature_column.sequence_categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)
tf.feature_column.sequence_numeric_column(key,shape=(1,),default_value=0.0,dtype=tf.dtypes.float32,normalizer_fn=None)
tf.feature_column.shared_embeddings(categorical_columns,dimension,combiner='mean',initializer=None,shared_embedding_collection_name=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True,use_safe_embedding_lookup=True)
tf.feature_column.weighted_categorical_column(categorical_column,weight_feature_key,dtype=tf.dtypes.float32)
tf.fill(dims,value,name=None)
tf.fingerprint(data,method='farmhash64',name=None)
tf.floor(x,name=None)
tf.foldl(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)
tf.foldr(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)
tf.function(func=None,input_signature=None,autograph=True,jit_compile=None,experimental_implements=None,experimental_autograph_options=None,experimental_relax_shapes=False,experimental_compile=None,experimental_follow_type_hints=None)->tf.types.experimental.GenericFunctiontf.types.experimental.GenericFunction
tf.gather(params,indices,validate_indices=None,axis=None,batch_dims=0,name=None)
tf.gather_nd(params,indices,batch_dims=0,name=None)
tf.get_current_name_scope()
tf.get_logger()
tf.get_static_value(tensor,partial=False)
tf.grad_pass_through(f)
tf.gradients(ys,xs,grad_ys=None,name='gradients',gate_gradients=False,aggregation_method=None,stop_gradients=None,unconnected_gradients=tf.UnconnectedGradients.NONE)
tf.graph_util.import_graph_def(graph_def,input_map=None,return_elements=None,name=None,op_dict=None,producer_op_list=None)
tf.greater(x,y,name=None)
tf.greater_equal(x,y,name=None)
tf.group(*inputs,**kwargs)
tf.guarantee_const(input,name=None)
tf.hessians(ys,xs,gate_gradients=False,aggregation_method=None,name='hessians')
tf.histogram_fixed_width(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)
tf.histogram_fixed_width_bins(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)
tf.identity(input,name=None)
tf.identity_n(input,name=None)
tf.image.adjust_brightness(image,delta)
tf.image.adjust_contrast(images,contrast_factor)
tf.image.adjust_gamma(image,gamma=1,gain=1)
tf.image.adjust_hue(image,delta,name=None)
tf.image.adjust_jpeg_quality(image,jpeg_quality,name=None)
tf.image.adjust_saturation(image,saturation_factor,name=None)
tf.image.central_crop(image,central_fraction)
tf.image.combined_non_max_suppression(boxes,scores,max_output_size_per_class,max_total_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_per_class=False,clip_boxes=True,name=None)
tf.image.convert_image_dtype(image,dtype,saturate=False,name=None)
tf.image.crop_and_resize(image,boxes,box_indices,crop_size,method='bilinear',extrapolation_value=0.0,name=None)
tf.image.crop_to_bounding_box(image,offset_height,offset_width,target_height,target_width)
tf.image.decode_and_crop_jpeg(contents,crop_window,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)
tf.image.decode_bmp(contents,channels=0,name=None)
tf.image.decode_gif(contents,name=None)
tf.image.decode_image(contents,channels=None,dtype=tf.dtypes.uint8,name=None,expand_animations=True)
tf.image.decode_jpeg(contents,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)
tf.image.decode_png(contents,channels=0,dtype=tf.dtypes.uint8,name=None)
tf.image.draw_bounding_boxes(images,boxes,colors,name=None)
tf.image.encode_jpeg(image,format='',quality=95,progressive=False,optimize_size=False,chroma_downsampling=True,density_unit='in',x_density=300,y_density=300,xmp_metadata='',name=None)
tf.image.encode_png(image,compression=-1,name=None)
tf.image.extract_glimpse(input,size,offsets,centered=True,normalized=True,noise='uniform',name=None)
tf.image.extract_jpeg_shape(contents,output_type=tf.dtypes.int32,name=None)
tf.image.extract_patches(images,sizes,strides,rates,padding,name=None)
tf.image.flip_left_right(image)
tf.image.flip_up_down(image)
tf.image.generate_bounding_box_proposals(scores,bbox_deltas,image_info,anchors,nms_threshold=0.7,pre_nms_topn=6000,min_size=16,post_nms_topn=300,name=None)
tf.image.grayscale_to_rgb(images,name=None)
tf.image.hsv_to_rgb(images,name=None)
tf.image.image_gradients(image)
tf.image.is_jpeg(contents,name=None)
tf.image.non_max_suppression(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),name=None)
tf.image.non_max_suppression_overlaps(overlaps,scores,max_output_size,overlap_threshold=0.5,score_threshold=float('-inf'),name=None)
tf.image.non_max_suppression_padded(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_to_max_output_size=False,name=None,sorted_input=False,canonicalized_coordinates=False,tile_size=512)
tf.image.non_max_suppression_with_scores(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),soft_nms_sigma=0.0,name=None)
tf.image.pad_to_bounding_box(image,offset_height,offset_width,target_height,target_width)
tf.image.per_image_standardization(image)
tf.image.psnr(a,b,max_val,name=None)
tf.image.random_brightness(image,max_delta,seed=None)
tf.image.random_contrast(image,lower,upper,seed=None)
tf.image.random_crop(value,size,seed=None,name=None)
tf.image.random_flip_left_right(image,seed=None)
tf.image.random_flip_up_down(image,seed=None)
tf.image.random_hue(image,max_delta,seed=None)
tf.image.random_jpeg_quality(image,min_jpeg_quality,max_jpeg_quality,seed=None)
tf.image.random_saturation(image,lower,upper,seed=None)
tf.image.resize(images,size,method=ResizeMethod.BILINEAR,preserve_aspect_ratio=False,antialias=False,name=None)
tf.image.resize_with_crop_or_pad(image,target_height,target_width)
tf.image.resize_with_pad(image,target_height,target_width,method=ResizeMethod.BILINEAR,antialias=False)
tf.image.rgb_to_grayscale(images,name=None)
tf.image.rgb_to_hsv(images,name=None)
tf.image.rgb_to_yiq(images)
tf.image.rgb_to_yuv(images)
tf.image.rot90(image,k=1,name=None)
tf.image.sample_distorted_bounding_box(image_size,bounding_boxes,seed=0,min_object_covered=0.1,aspect_ratio_range=None,area_range=None,max_attempts=None,use_image_if_no_bounding_boxes=None,name=None)
tf.image.sobel_edges(image)
tf.image.ssim(img1,img2,max_val,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)
tf.image.ssim_multiscale(img1,img2,max_val,power_factors=_MSSSIM_WEIGHTS,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)
tf.image.stateless_random_brightness(image,max_delta,seed)
tf.image.stateless_random_contrast(image,lower,upper,seed)
tf.image.stateless_random_crop(value,size,seed,name=None)
tf.image.stateless_random_flip_left_right(image,seed)
tf.image.stateless_random_flip_up_down(image,seed)
tf.image.stateless_random_hue(image,max_delta,seed)
tf.image.stateless_random_jpeg_quality(image,min_jpeg_quality,max_jpeg_quality,seed)
tf.image.stateless_random_saturation(image,lower,upper,seed=None)
tf.image.stateless_sample_distorted_bounding_box(image_size,bounding_boxes,seed,min_object_covered=0.1,aspect_ratio_range=None,area_range=None,max_attempts=None,use_image_if_no_bounding_boxes=None,name=None)
tf.image.total_variation(images,name=None)
tf.image.transpose(image,name=None)
tf.image.yiq_to_rgb(images)
tf.image.yuv_to_rgb(images)
tf.import_graph_def(graph_def,input_map=None,return_elements=None,name=None,op_dict=None,producer_op_list=None)
tf.initializers.Constant(value=0)
tf.initializers.GlorotNormal(seed=None)
tf.initializers.GlorotUniform(seed=None)
tf.initializers.HeNormal(seed=None)
tf.initializers.HeUniform(seed=None)
tf.initializers.Identity(gain=1.0)
tf.initializers.LecunNormal(seed=None)
tf.initializers.LecunUniform(seed=None)
tf.initializers.Orthogonal(gain=1.0,seed=None)
tf.initializers.RandomNormal(mean=0.0,stddev=0.05,seed=None)
tf.initializers.RandomUniform(minval=-0.05,maxval=0.05,seed=None)
tf.initializers.TruncatedNormal(mean=0.0,stddev=0.05,seed=None)
tf.initializers.VarianceScaling(scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None)
tf.initializers.constant(value=0)
tf.initializers.deserialize(config,custom_objects=None)
tf.initializers.get(identifier)
tf.initializers.glorot_normal(seed=None)
tf.initializers.glorot_uniform(seed=None)
tf.initializers.he_normal(seed=None)
tf.initializers.he_uniform(seed=None)
tf.initializers.identity(gain=1.0)
tf.initializers.lecun_normal(seed=None)
tf.initializers.lecun_uniform(seed=None)
tf.initializers.orthogonal(gain=1.0,seed=None)
tf.initializers.random_normal(mean=0.0,stddev=0.05,seed=None)
tf.initializers.random_uniform(minval=-0.05,maxval=0.05,seed=None)
tf.initializers.serialize(initializer)
tf.initializers.truncated_normal(mean=0.0,stddev=0.05,seed=None)
tf.initializers.variance_scaling(scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None)
tf.inside_function()
tf.io.FixedLenFeature(shape,dtype,default_value=None)
tf.io.FixedLenSequenceFeature(shape,dtype,allow_missing=False,default_value=None)
tf.io.RaggedFeature(dtype,value_key=None,partitions=(),row_splits_dtype=tf.dtypes.int32,validate=False)
tf.io.RaggedFeature.RowLengths(key)
tf.io.RaggedFeature.RowLimits(key)
tf.io.RaggedFeature.RowSplits(key)
tf.io.RaggedFeature.RowStarts(key)
tf.io.RaggedFeature.UniformRowLength(length)
tf.io.RaggedFeature.ValueRowIds(key)
tf.io.SparseFeature(index_key,value_key,dtype,size,already_sorted=False)
tf.io.TFRecordOptions(compression_type=None,flush_mode=None,input_buffer_size=None,output_buffer_size=None,window_bits=None,compression_level=None,compression_method=None,mem_level=None,compression_strategy=None)
tf.io.TFRecordWriter(path,options=None)
tf.io.VarLenFeature(dtype)
tf.io.decode_and_crop_jpeg(contents,crop_window,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)
tf.io.decode_base64(input,name=None)
tf.io.decode_bmp(contents,channels=0,name=None)
tf.io.decode_compressed(bytes,compression_type='',name=None)
tf.io.decode_csv(records,record_defaults,field_delim=',',use_quote_delim=True,na_value='',select_cols=None,name=None)
tf.io.decode_gif(contents,name=None)
tf.io.decode_image(contents,channels=None,dtype=tf.dtypes.uint8,name=None,expand_animations=True)
tf.io.decode_jpeg(contents,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)
tf.io.decode_json_example(json_examples,name=None)
tf.io.decode_png(contents,channels=0,dtype=tf.dtypes.uint8,name=None)
tf.io.decode_proto(bytes,message_type,field_names,output_types,descriptor_source='local://',message_format='binary',sanitize=False,name=None)
tf.io.decode_raw(input_bytes,out_type,little_endian=True,fixed_length=None,name=None)
tf.io.deserialize_many_sparse(serialized_sparse,dtype,rank=None,name=None)
tf.io.encode_base64(input,pad=False,name=None)
tf.io.encode_jpeg(image,format='',quality=95,progressive=False,optimize_size=False,chroma_downsampling=True,density_unit='in',x_density=300,y_density=300,xmp_metadata='',name=None)
tf.io.encode_png(image,compression=-1,name=None)
tf.io.encode_proto(sizes,values,field_names,message_type,descriptor_source='local://',name=None)
tf.io.extract_jpeg_shape(contents,output_type=tf.dtypes.int32,name=None)
tf.io.gfile.GFile(name,mode='r')
tf.io.gfile.copy(src,dst,overwrite=False)
tf.io.gfile.exists(path)
tf.io.gfile.glob(pattern)
tf.io.gfile.isdir(path)
tf.io.gfile.join(path,*paths)
tf.io.gfile.listdir(path)
tf.io.gfile.makedirs(path)
tf.io.gfile.mkdir(path)
tf.io.gfile.remove(path)
tf.io.gfile.rename(src,dst,overwrite=False)
tf.io.gfile.rmtree(path)
tf.io.gfile.stat(path)
tf.io.gfile.walk(top,topdown=True,onerror=None)
tf.io.is_jpeg(contents,name=None)
tf.io.match_filenames_once(pattern,name=None)
tf.io.matching_files(pattern,name=None)
tf.io.parse_example(serialized,features,example_names=None,name=None)
tf.io.parse_sequence_example(serialized,context_features=None,sequence_features=None,example_names=None,name=None)
tf.io.parse_single_example(serialized,features,example_names=None,name=None)
tf.io.parse_single_sequence_example(serialized,context_features=None,sequence_features=None,example_name=None,name=None)
tf.io.parse_tensor(serialized,out_type,name=None)
tf.io.read_file(filename,name=None)
tf.io.serialize_many_sparse(sp_input,out_type=tf.dtypes.string,name=None)
tf.io.serialize_sparse(sp_input,out_type=tf.dtypes.string,name=None)
tf.io.serialize_tensor(tensor,name=None)
tf.io.write_file(filename,contents,name=None)
tf.io.write_graph(graph_or_graph_def,logdir,name,as_text=True)
tf.is_tensor(x)
tf.keras.Input(shape=None,batch_size=None,name=None,dtype=None,sparse=None,tensor=None,ragged=None,type_spec=None,**kwargs)
tf.keras.Model(*args,**kwargs)
tf.keras.Sequential(layers=None,name=None)
tf.keras.activations.deserialize(name,custom_objects=None)
tf.keras.activations.elu(x,alpha=1.0)
tf.keras.activations.exponential(x)
tf.keras.activations.gelu(x,approximate=False)
tf.keras.activations.get(identifier)
tf.keras.activations.hard_sigmoid(x)
tf.keras.activations.linear(x)
tf.keras.activations.relu(x,alpha=0.0,max_value=None,threshold=0.0)
tf.keras.activations.selu(x)
tf.keras.activations.serialize(activation)
tf.keras.activations.sigmoid(x)
tf.keras.activations.softmax(x,axis=-1)
tf.keras.activations.softplus(x)
tf.keras.activations.softsign(x)
tf.keras.activations.swish(x)
tf.keras.activations.tanh(x)
tf.keras.applications.DenseNet121(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.keras.applications.DenseNet169(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.keras.applications.DenseNet201(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.keras.applications.EfficientNetB0(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.EfficientNetB1(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.EfficientNetB2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.EfficientNetB3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.EfficientNetB4(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.EfficientNetB5(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.EfficientNetB6(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.EfficientNetB7(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.InceptionResNetV2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.InceptionV3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.MobileNet(input_shape=None,alpha=1.0,depth_multiplier=1,dropout=0.001,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.MobileNetV2(input_shape=None,alpha=1.0,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.MobileNetV3Large(input_shape=None,alpha=1.0,minimalistic=False,include_top=True,weights='imagenet',input_tensor=None,classes=1000,pooling=None,dropout_rate=0.2,classifier_activation='softmax',include_preprocessing=True)
tf.keras.applications.MobileNetV3Small(input_shape=None,alpha=1.0,minimalistic=False,include_top=True,weights='imagenet',input_tensor=None,classes=1000,pooling=None,dropout_rate=0.2,classifier_activation='softmax',include_preprocessing=True)
tf.keras.applications.NASNetLarge(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
tf.keras.applications.NASNetMobile(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
tf.keras.applications.ResNet101(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.keras.applications.ResNet101V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.ResNet152(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.keras.applications.ResNet152V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.ResNet50(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.keras.applications.ResNet50V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.VGG16(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.VGG19(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.Xception(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.densenet.DenseNet121(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.keras.applications.densenet.DenseNet169(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.keras.applications.densenet.DenseNet201(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000)
tf.keras.applications.densenet.decode_predictions(preds,top=5)
tf.keras.applications.densenet.preprocess_input(x,data_format=None)
tf.keras.applications.efficientnet.EfficientNetB0(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.efficientnet.EfficientNetB1(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.efficientnet.EfficientNetB2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.efficientnet.EfficientNetB3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.efficientnet.EfficientNetB4(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.efficientnet.EfficientNetB5(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.efficientnet.EfficientNetB6(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.efficientnet.EfficientNetB7(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.efficientnet.decode_predictions(preds,top=5)
tf.keras.applications.efficientnet.preprocess_input(x,data_format=None)
tf.keras.applications.imagenet_utils.decode_predictions(preds,top=5)
tf.keras.applications.imagenet_utils.preprocess_input(x,data_format=None,mode='caffe')
tf.keras.applications.inception_resnet_v2.InceptionResNetV2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.inception_resnet_v2.decode_predictions(preds,top=5)
tf.keras.applications.inception_resnet_v2.preprocess_input(x,data_format=None)
tf.keras.applications.inception_v3.InceptionV3(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.inception_v3.decode_predictions(preds,top=5)
tf.keras.applications.inception_v3.preprocess_input(x,data_format=None)
tf.keras.applications.mobilenet.MobileNet(input_shape=None,alpha=1.0,depth_multiplier=1,dropout=0.001,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.mobilenet.decode_predictions(preds,top=5)
tf.keras.applications.mobilenet.preprocess_input(x,data_format=None)
tf.keras.applications.mobilenet_v2.MobileNetV2(input_shape=None,alpha=1.0,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000,classifier_activation='softmax',**kwargs)
tf.keras.applications.mobilenet_v2.decode_predictions(preds,top=5)
tf.keras.applications.mobilenet_v2.preprocess_input(x,data_format=None)
tf.keras.applications.mobilenet_v3.decode_predictions(preds,top=5)
tf.keras.applications.mobilenet_v3.preprocess_input(x,data_format=None)
tf.keras.applications.nasnet.NASNetLarge(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
tf.keras.applications.nasnet.NASNetMobile(input_shape=None,include_top=True,weights='imagenet',input_tensor=None,pooling=None,classes=1000)
tf.keras.applications.nasnet.decode_predictions(preds,top=5)
tf.keras.applications.nasnet.preprocess_input(x,data_format=None)
tf.keras.applications.resnet.ResNet101(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.keras.applications.resnet.ResNet152(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.keras.applications.resnet.ResNet50(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.keras.applications.resnet.decode_predictions(preds,top=5)
tf.keras.applications.resnet.preprocess_input(x,data_format=None)
tf.keras.applications.resnet50.ResNet50(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,**kwargs)
tf.keras.applications.resnet50.decode_predictions(preds,top=5)
tf.keras.applications.resnet50.preprocess_input(x,data_format=None)
tf.keras.applications.resnet_v2.ResNet101V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.resnet_v2.ResNet152V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.resnet_v2.ResNet50V2(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.resnet_v2.decode_predictions(preds,top=5)
tf.keras.applications.resnet_v2.preprocess_input(x,data_format=None)
tf.keras.applications.vgg16.VGG16(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.vgg16.decode_predictions(preds,top=5)
tf.keras.applications.vgg16.preprocess_input(x,data_format=None)
tf.keras.applications.vgg19.VGG19(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.vgg19.decode_predictions(preds,top=5)
tf.keras.applications.vgg19.preprocess_input(x,data_format=None)
tf.keras.applications.xception.Xception(include_top=True,weights='imagenet',input_tensor=None,input_shape=None,pooling=None,classes=1000,classifier_activation='softmax')
tf.keras.applications.xception.decode_predictions(preds,top=5)
tf.keras.applications.xception.preprocess_input(x,data_format=None)
tf.keras.backend.clear_session()
tf.keras.backend.epsilon()
tf.keras.backend.floatx()
tf.keras.backend.get_uid(prefix='')
tf.keras.backend.image_data_format()
tf.keras.backend.is_keras_tensor(x)
tf.keras.backend.reset_uids()
tf.keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False)
tf.keras.backend.set_epsilon(value)
tf.keras.backend.set_floatx(value)
tf.keras.backend.set_image_data_format(data_format)
tf.keras.callbacks.BaseLogger(stateful_metrics=None)
tf.keras.callbacks.CSVLogger(filename,separator=',',append=False)
tf.keras.callbacks.Callback()
tf.keras.callbacks.CallbackList(callbacks=None,add_history=False,add_progbar=False,model=None,**params)
tf.keras.callbacks.EarlyStopping(monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False)
tf.keras.callbacks.History()
tf.keras.callbacks.LambdaCallback(on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)
tf.keras.callbacks.LearningRateScheduler(schedule,verbose=0)
tf.keras.callbacks.ModelCheckpoint(filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',save_freq='epoch',options=None,**kwargs)
tf.keras.callbacks.ProgbarLogger(count_mode='samples',stateful_metrics=None)
tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0,**kwargs)
tf.keras.callbacks.RemoteMonitor(root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)
tf.keras.callbacks.TensorBoard(log_dir='logs',histogram_freq=0,write_graph=True,write_images=False,write_steps_per_second=False,update_freq='epoch',profile_batch=0,embeddings_freq=0,embeddings_metadata=None,**kwargs)
tf.keras.callbacks.TerminateOnNaN()
tf.keras.callbacks.experimental.BackupAndRestore(backup_dir)
tf.keras.constraints.MaxNorm(max_value=2,axis=0)
tf.keras.constraints.MinMaxNorm(min_value=0.0,max_value=1.0,rate=1.0,axis=0)
tf.keras.constraints.UnitNorm(axis=0)
tf.keras.constraints.deserialize(config,custom_objects=None)
tf.keras.constraints.get(identifier)
tf.keras.constraints.max_norm(max_value=2,axis=0)
tf.keras.constraints.min_max_norm(min_value=0.0,max_value=1.0,rate=1.0,axis=0)
tf.keras.constraints.serialize(constraint)
tf.keras.constraints.unit_norm(axis=0)
tf.keras.datasets.boston_housing.load_data(path='boston_housing.npz',test_split=0.2,seed=113)
tf.keras.datasets.cifar10.load_data()
tf.keras.datasets.cifar100.load_data(label_mode='fine')
tf.keras.datasets.fashion_mnist.load_data()
tf.keras.datasets.imdb.get_word_index(path='imdb_word_index.json')
tf.keras.datasets.imdb.load_data(path='imdb.npz',num_words=None,skip_top=0,maxlen=None,seed=113,start_char=1,oov_char=2,index_from=3,**kwargs)
tf.keras.datasets.mnist.load_data(path='mnist.npz')
tf.keras.datasets.reuters.get_word_index(path='reuters_word_index.json')
tf.keras.datasets.reuters.load_data(path='reuters.npz',num_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3,**kwargs)
tf.keras.estimator.model_to_estimator(keras_model=None,keras_model_path=None,custom_objects=None,model_dir=None,config=None,checkpoint_format='checkpoint',metric_names_map=None,export_outputs=None)
tf.keras.experimental.CosineDecay(initial_learning_rate,decay_steps,alpha=0.0,name=None)
tf.keras.experimental.CosineDecayRestarts(initial_learning_rate,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name=None)
tf.keras.experimental.LinearModel(units=1,activation=None,use_bias=True,kernel_initializer='zeros',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,**kwargs)
tf.keras.experimental.PeepholeLSTMCell(units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.keras.experimental.SequenceFeatures(feature_columns,trainable=True,name=None,**kwargs)
tf.keras.experimental.SidecarEvaluator(model,data,checkpoint_dir,steps=None,max_evaluations=None,callbacks=None)
tf.keras.experimental.WideDeepModel(linear_model,dnn_model,activation=None,**kwargs)
tf.keras.initializers.Constant(value=0)
tf.keras.initializers.GlorotNormal(seed=None)
tf.keras.initializers.GlorotUniform(seed=None)
tf.keras.initializers.HeNormal(seed=None)
tf.keras.initializers.HeUniform(seed=None)
tf.keras.initializers.Identity(gain=1.0)
tf.keras.initializers.LecunNormal(seed=None)
tf.keras.initializers.LecunUniform(seed=None)
tf.keras.initializers.Orthogonal(gain=1.0,seed=None)
tf.keras.initializers.RandomNormal(mean=0.0,stddev=0.05,seed=None)
tf.keras.initializers.RandomUniform(minval=-0.05,maxval=0.05,seed=None)
tf.keras.initializers.TruncatedNormal(mean=0.0,stddev=0.05,seed=None)
tf.keras.initializers.VarianceScaling(scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None)
tf.keras.initializers.constant(value=0)
tf.keras.initializers.deserialize(config,custom_objects=None)
tf.keras.initializers.get(identifier)
tf.keras.initializers.glorot_normal(seed=None)
tf.keras.initializers.glorot_uniform(seed=None)
tf.keras.initializers.he_normal(seed=None)
tf.keras.initializers.he_uniform(seed=None)
tf.keras.initializers.identity(gain=1.0)
tf.keras.initializers.lecun_normal(seed=None)
tf.keras.initializers.lecun_uniform(seed=None)
tf.keras.initializers.orthogonal(gain=1.0,seed=None)
tf.keras.initializers.random_normal(mean=0.0,stddev=0.05,seed=None)
tf.keras.initializers.random_uniform(minval=-0.05,maxval=0.05,seed=None)
tf.keras.initializers.serialize(initializer)
tf.keras.initializers.truncated_normal(mean=0.0,stddev=0.05,seed=None)
tf.keras.initializers.variance_scaling(scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None)
tf.keras.layers.AbstractRNNCell(trainable=True,name=None,dtype=None,dynamic=False,**kwargs)
tf.keras.layers.Activation(activation,**kwargs)
tf.keras.layers.ActivityRegularization(l1=0.0,l2=0.0,**kwargs)
tf.keras.layers.Add(**kwargs)
tf.keras.layers.AdditiveAttention(use_scale=True,**kwargs)
tf.keras.layers.AlphaDropout(rate,noise_shape=None,seed=None,**kwargs)
tf.keras.layers.Attention(use_scale=False,**kwargs)
tf.keras.layers.Average(**kwargs)
tf.keras.layers.AveragePooling1D(pool_size=2,strides=None,padding='valid',data_format='channels_last',**kwargs)
tf.keras.layers.AveragePooling2D(pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.keras.layers.AveragePooling3D(pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.keras.layers.AvgPool1D(pool_size=2,strides=None,padding='valid',data_format='channels_last',**kwargs)
tf.keras.layers.AvgPool2D(pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.keras.layers.AvgPool3D(pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.keras.layers.BatchNormalization(axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
tf.keras.layers.Bidirectional(layer,merge_mode='concat',weights=None,backward_layer=None,**kwargs)
tf.keras.layers.CategoryEncoding(num_tokens=None,output_mode='multi_hot',sparse=False,**kwargs)
tf.keras.layers.CenterCrop(height,width,**kwargs)
tf.keras.layers.Concatenate(axis=-1,**kwargs)
tf.keras.layers.Conv1D(filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Conv1DTranspose(filters,kernel_size,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Conv2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Conv2DTranspose(filters,kernel_size,strides=(1,1),padding='valid',output_padding=None,data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Conv3D(filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Conv3DTranspose(filters,kernel_size,strides=(1,1,1),padding='valid',output_padding=None,data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.ConvLSTM1D(filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.keras.layers.ConvLSTM2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.keras.layers.ConvLSTM3D(filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,return_state=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.keras.layers.Convolution1D(filters,kernel_size,strides=1,padding='valid',data_format='channels_last',dilation_rate=1,groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Convolution1DTranspose(filters,kernel_size,strides=1,padding='valid',output_padding=None,data_format=None,dilation_rate=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Convolution2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Convolution2DTranspose(filters,kernel_size,strides=(1,1),padding='valid',output_padding=None,data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Convolution3D(filters,kernel_size,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1),groups=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Convolution3DTranspose(filters,kernel_size,strides=(1,1,1),padding='valid',output_padding=None,data_format=None,dilation_rate=(1,1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Cropping1D(cropping=(1,1),**kwargs)
tf.keras.layers.Cropping2D(cropping=((0,0),(0,0)),data_format=None,**kwargs)
tf.keras.layers.Cropping3D(cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)
tf.keras.layers.Dense(units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.DenseFeatures(feature_columns,trainable=True,name=None,**kwargs)
tf.keras.layers.DepthwiseConv1D(kernel_size,strides=1,padding='valid',depth_multiplier=1,data_format=None,dilation_rate=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.DepthwiseConv2D(kernel_size,strides=(1,1),padding='valid',depth_multiplier=1,data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Discretization(bin_boundaries=None,num_bins=None,epsilon=0.01,**kwargs)
tf.keras.layers.Dot(axes,normalize=False,**kwargs)
tf.keras.layers.Dropout(rate,noise_shape=None,seed=None,**kwargs)
tf.keras.layers.ELU(alpha=1.0,**kwargs)
tf.keras.layers.Embedding(input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,activity_regularizer=None,embeddings_constraint=None,mask_zero=False,input_length=None,**kwargs)
tf.keras.layers.Flatten(data_format=None,**kwargs)
tf.keras.layers.GRU(units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,time_major=False,reset_after=True,**kwargs)
tf.keras.layers.GRUCell(units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,reset_after=True,**kwargs)
tf.keras.layers.GaussianDropout(rate,seed=None,**kwargs)
tf.keras.layers.GaussianNoise(stddev,seed=None,**kwargs)
tf.keras.layers.GlobalAveragePooling1D(data_format='channels_last',**kwargs)
tf.keras.layers.GlobalAveragePooling2D(data_format=None,keepdims=False,**kwargs)
tf.keras.layers.GlobalAveragePooling3D(data_format=None,keepdims=False,**kwargs)
tf.keras.layers.GlobalAvgPool1D(data_format='channels_last',**kwargs)
tf.keras.layers.GlobalAvgPool2D(data_format=None,keepdims=False,**kwargs)
tf.keras.layers.GlobalAvgPool3D(data_format=None,keepdims=False,**kwargs)
tf.keras.layers.GlobalMaxPool1D(data_format='channels_last',keepdims=False,**kwargs)
tf.keras.layers.GlobalMaxPool2D(data_format=None,keepdims=False,**kwargs)
tf.keras.layers.GlobalMaxPool3D(data_format=None,keepdims=False,**kwargs)
tf.keras.layers.GlobalMaxPooling1D(data_format='channels_last',keepdims=False,**kwargs)
tf.keras.layers.GlobalMaxPooling2D(data_format=None,keepdims=False,**kwargs)
tf.keras.layers.GlobalMaxPooling3D(data_format=None,keepdims=False,**kwargs)
tf.keras.layers.Hashing(num_bins,mask_value=None,salt=None,**kwargs)
tf.keras.layers.Input(shape=None,batch_size=None,name=None,dtype=None,sparse=None,tensor=None,ragged=None,type_spec=None,**kwargs)
tf.keras.layers.InputLayer(input_shape=None,batch_size=None,dtype=None,input_tensor=None,sparse=None,name=None,ragged=None,type_spec=None,**kwargs)
tf.keras.layers.InputSpec(dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None,allow_last_axis_squeeze=False,name=None)
tf.keras.layers.IntegerLookup(max_tokens=None,num_oov_indices=1,mask_token=None,oov_token=-1,vocabulary=None,idf_weights=None,invert=False,output_mode='int',sparse=False,pad_to_max_tokens=False,**kwargs)
tf.keras.layers.LSTM(units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,time_major=False,unroll=False,**kwargs)
tf.keras.layers.LSTMCell(units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.keras.layers.Lambda(function,output_shape=None,mask=None,arguments=None,**kwargs)
tf.keras.layers.Layer(trainable=True,name=None,dtype=None,dynamic=False,**kwargs)
tf.keras.layers.LayerNormalization(axis=-1,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
tf.keras.layers.LeakyReLU(alpha=0.3,**kwargs)
tf.keras.layers.LocallyConnected1D(filters,kernel_size,strides=1,padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,implementation=1,**kwargs)
tf.keras.layers.LocallyConnected2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,implementation=1,**kwargs)
tf.keras.layers.Masking(mask_value=0.0,**kwargs)
tf.keras.layers.MaxPool1D(pool_size=2,strides=None,padding='valid',data_format='channels_last',**kwargs)
tf.keras.layers.MaxPool2D(pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.keras.layers.MaxPool3D(pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.keras.layers.MaxPooling1D(pool_size=2,strides=None,padding='valid',data_format='channels_last',**kwargs)
tf.keras.layers.MaxPooling2D(pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.keras.layers.MaxPooling3D(pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)
tf.keras.layers.Maximum(**kwargs)
tf.keras.layers.Minimum(**kwargs)
tf.keras.layers.MultiHeadAttention(num_heads,key_dim,value_dim=None,dropout=0.0,use_bias=True,output_shape=None,attention_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.Multiply(**kwargs)
tf.keras.layers.Normalization(axis=-1,mean=None,variance=None,**kwargs)
tf.keras.layers.PReLU(alpha_initializer='zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)
tf.keras.layers.Permute(dims,**kwargs)
tf.keras.layers.RNN(cell,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,time_major=False,**kwargs)
tf.keras.layers.RandomContrast(factor,seed=None,**kwargs)
tf.keras.layers.RandomCrop(height,width,seed=None,**kwargs)
tf.keras.layers.RandomFlip(mode=HORIZONTAL_AND_VERTICAL,seed=None,**kwargs)
tf.keras.layers.RandomHeight(factor,interpolation='bilinear',seed=None,**kwargs)
tf.keras.layers.RandomRotation(factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.keras.layers.RandomTranslation(height_factor,width_factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.keras.layers.RandomWidth(factor,interpolation='bilinear',seed=None,**kwargs)
tf.keras.layers.RandomZoom(height_factor,width_factor=None,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.keras.layers.ReLU(max_value=None,negative_slope=0.0,threshold=0.0,**kwargs)
tf.keras.layers.RepeatVector(n,**kwargs)
tf.keras.layers.Rescaling(scale,offset=0.0,**kwargs)
tf.keras.layers.Reshape(target_shape,**kwargs)
tf.keras.layers.Resizing(height,width,interpolation='bilinear',crop_to_aspect_ratio=False,**kwargs)
tf.keras.layers.SeparableConv1D(filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.SeparableConv2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.SeparableConvolution1D(filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.SeparableConvolution2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.SimpleRNN(units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)
tf.keras.layers.SimpleRNNCell(units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)
tf.keras.layers.Softmax(axis=-1,**kwargs)
tf.keras.layers.SpatialDropout1D(rate,**kwargs)
tf.keras.layers.SpatialDropout2D(rate,data_format=None,**kwargs)
tf.keras.layers.SpatialDropout3D(rate,data_format=None,**kwargs)
tf.keras.layers.StackedRNNCells(cells,**kwargs)
tf.keras.layers.StringLookup(max_tokens=None,num_oov_indices=1,mask_token=None,oov_token='[UNK]',vocabulary=None,idf_weights=None,encoding=None,invert=False,output_mode='int',sparse=False,pad_to_max_tokens=False,**kwargs)
tf.keras.layers.Subtract(**kwargs)
tf.keras.layers.TextVectorization(max_tokens=None,standardize='lower_and_strip_punctuation',split='whitespace',ngrams=None,output_mode='int',output_sequence_length=None,pad_to_max_tokens=False,vocabulary=None,idf_weights=None,sparse=False,ragged=False,**kwargs)
tf.keras.layers.ThresholdedReLU(theta=1.0,**kwargs)
tf.keras.layers.TimeDistributed(layer,**kwargs)
tf.keras.layers.UpSampling1D(size=2,**kwargs)
tf.keras.layers.UpSampling2D(size=(2,2),data_format=None,interpolation='nearest',**kwargs)
tf.keras.layers.UpSampling3D(size=(2,2,2),data_format=None,**kwargs)
tf.keras.layers.Wrapper(layer,**kwargs)
tf.keras.layers.ZeroPadding1D(padding=1,**kwargs)
tf.keras.layers.ZeroPadding2D(padding=(1,1),data_format=None,**kwargs)
tf.keras.layers.ZeroPadding3D(padding=(1,1,1),data_format=None,**kwargs)
tf.keras.layers.add(inputs,**kwargs)
tf.keras.layers.average(inputs,**kwargs)
tf.keras.layers.concatenate(inputs,axis=-1,**kwargs)
tf.keras.layers.deserialize(config,custom_objects=None)
tf.keras.layers.dot(inputs,axes,normalize=False,**kwargs)
tf.keras.layers.experimental.EinsumDense(equation,output_shape,activation=None,bias_axes=None,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)
tf.keras.layers.experimental.RandomFourierFeatures(output_dim,kernel_initializer='gaussian',scale=None,trainable=False,name=None,**kwargs)
tf.keras.layers.experimental.SyncBatchNormalization(axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,**kwargs)
tf.keras.layers.experimental.preprocessing.CategoryCrossing(depth=None,name=None,separator='_X_',**kwargs)
tf.keras.layers.experimental.preprocessing.CategoryEncoding(num_tokens=None,output_mode='multi_hot',sparse=False,**kwargs)
tf.keras.layers.experimental.preprocessing.CenterCrop(height,width,**kwargs)
tf.keras.layers.experimental.preprocessing.Discretization(bin_boundaries=None,num_bins=None,epsilon=0.01,**kwargs)
tf.keras.layers.experimental.preprocessing.Hashing(num_bins,mask_value=None,salt=None,**kwargs)
tf.keras.layers.experimental.preprocessing.IntegerLookup(max_tokens=None,num_oov_indices=1,mask_token=None,oov_token=-1,vocabulary=None,idf_weights=None,invert=False,output_mode='int',sparse=False,pad_to_max_tokens=False,**kwargs)
tf.keras.layers.experimental.preprocessing.Normalization(axis=-1,mean=None,variance=None,**kwargs)
tf.keras.layers.experimental.preprocessing.PreprocessingLayer(**kwargs)
tf.keras.layers.experimental.preprocessing.RandomContrast(factor,seed=None,**kwargs)
tf.keras.layers.experimental.preprocessing.RandomCrop(height,width,seed=None,**kwargs)
tf.keras.layers.experimental.preprocessing.RandomFlip(mode=HORIZONTAL_AND_VERTICAL,seed=None,**kwargs)
tf.keras.layers.experimental.preprocessing.RandomHeight(factor,interpolation='bilinear',seed=None,**kwargs)
tf.keras.layers.experimental.preprocessing.RandomRotation(factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.keras.layers.experimental.preprocessing.RandomTranslation(height_factor,width_factor,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.keras.layers.experimental.preprocessing.RandomWidth(factor,interpolation='bilinear',seed=None,**kwargs)
tf.keras.layers.experimental.preprocessing.RandomZoom(height_factor,width_factor=None,fill_mode='reflect',interpolation='bilinear',seed=None,fill_value=0.0,**kwargs)
tf.keras.layers.experimental.preprocessing.Rescaling(scale,offset=0.0,**kwargs)
tf.keras.layers.experimental.preprocessing.Resizing(height,width,interpolation='bilinear',crop_to_aspect_ratio=False,**kwargs)
tf.keras.layers.experimental.preprocessing.StringLookup(max_tokens=None,num_oov_indices=1,mask_token=None,oov_token='[UNK]',vocabulary=None,idf_weights=None,encoding=None,invert=False,output_mode='int',sparse=False,pad_to_max_tokens=False,**kwargs)
tf.keras.layers.experimental.preprocessing.TextVectorization(max_tokens=None,standardize='lower_and_strip_punctuation',split='whitespace',ngrams=None,output_mode='int',output_sequence_length=None,pad_to_max_tokens=False,vocabulary=None,idf_weights=None,sparse=False,ragged=False,**kwargs)
tf.keras.layers.maximum(inputs,**kwargs)
tf.keras.layers.minimum(inputs,**kwargs)
tf.keras.layers.multiply(inputs,**kwargs)
tf.keras.layers.serialize(layer)
tf.keras.layers.subtract(inputs,**kwargs)
tf.keras.losses.BinaryCrossentropy(from_logits=False,label_smoothing=0.0,axis=-1,reduction=losses_utils.ReductionV2.AUTO,name='binary_crossentropy')
tf.keras.losses.CategoricalCrossentropy(from_logits=False,label_smoothing=0.0,axis=-1,reduction=losses_utils.ReductionV2.AUTO,name='categorical_crossentropy')
tf.keras.losses.CategoricalHinge(reduction=losses_utils.ReductionV2.AUTO,name='categorical_hinge')
tf.keras.losses.CosineSimilarity(axis=-1,reduction=losses_utils.ReductionV2.AUTO,name='cosine_similarity')
tf.keras.losses.Hinge(reduction=losses_utils.ReductionV2.AUTO,name='hinge')
tf.keras.losses.Huber(delta=1.0,reduction=losses_utils.ReductionV2.AUTO,name='huber_loss')
tf.keras.losses.KLD(y_true,y_pred)
tf.keras.losses.KLDivergence(reduction=losses_utils.ReductionV2.AUTO,name='kl_divergence')
tf.keras.losses.LogCosh(reduction=losses_utils.ReductionV2.AUTO,name='log_cosh')
tf.keras.losses.Loss(reduction=losses_utils.ReductionV2.AUTO,name=None)
tf.keras.losses.MAE(y_true,y_pred)
tf.keras.losses.MAPE(y_true,y_pred)
tf.keras.losses.MSE(y_true,y_pred)
tf.keras.losses.MSLE(y_true,y_pred)
tf.keras.losses.MeanAbsoluteError(reduction=losses_utils.ReductionV2.AUTO,name='mean_absolute_error')
tf.keras.losses.MeanAbsolutePercentageError(reduction=losses_utils.ReductionV2.AUTO,name='mean_absolute_percentage_error')
tf.keras.losses.MeanSquaredError(reduction=losses_utils.ReductionV2.AUTO,name='mean_squared_error')
tf.keras.losses.MeanSquaredLogarithmicError(reduction=losses_utils.ReductionV2.AUTO,name='mean_squared_logarithmic_error')
tf.keras.losses.Poisson(reduction=losses_utils.ReductionV2.AUTO,name='poisson')
tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False,reduction=losses_utils.ReductionV2.AUTO,name='sparse_categorical_crossentropy')
tf.keras.losses.SquaredHinge(reduction=losses_utils.ReductionV2.AUTO,name='squared_hinge')
tf.keras.losses.binary_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.keras.losses.categorical_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.keras.losses.categorical_hinge(y_true,y_pred)
tf.keras.losses.cosine_similarity(y_true,y_pred,axis=-1)
tf.keras.losses.deserialize(name,custom_objects=None)
tf.keras.losses.get(identifier)
tf.keras.losses.hinge(y_true,y_pred)
tf.keras.losses.huber(y_true,y_pred,delta=1.0)
tf.keras.losses.kl_divergence(y_true,y_pred)
tf.keras.losses.kld(y_true,y_pred)
tf.keras.losses.kullback_leibler_divergence(y_true,y_pred)
tf.keras.losses.log_cosh(y_true,y_pred)
tf.keras.losses.logcosh(y_true,y_pred)
tf.keras.losses.mae(y_true,y_pred)
tf.keras.losses.mape(y_true,y_pred)
tf.keras.losses.mean_absolute_error(y_true,y_pred)
tf.keras.losses.mean_absolute_percentage_error(y_true,y_pred)
tf.keras.losses.mean_squared_error(y_true,y_pred)
tf.keras.losses.mean_squared_logarithmic_error(y_true,y_pred)
tf.keras.losses.mse(y_true,y_pred)
tf.keras.losses.msle(y_true,y_pred)
tf.keras.losses.poisson(y_true,y_pred)
tf.keras.losses.serialize(loss)
tf.keras.losses.sparse_categorical_crossentropy(y_true,y_pred,from_logits=False,axis=-1)
tf.keras.losses.squared_hinge(y_true,y_pred)
tf.keras.metrics.AUC(num_thresholds=200,curve='ROC',summation_method='interpolation',name=None,dtype=None,thresholds=None,multi_label=False,num_labels=None,label_weights=None,from_logits=False)
tf.keras.metrics.Accuracy(name='accuracy',dtype=None)
tf.keras.metrics.BinaryAccuracy(name='binary_accuracy',dtype=None,threshold=0.5)
tf.keras.metrics.BinaryCrossentropy(name='binary_crossentropy',dtype=None,from_logits=False,label_smoothing=0)
tf.keras.metrics.CategoricalAccuracy(name='categorical_accuracy',dtype=None)
tf.keras.metrics.CategoricalCrossentropy(name='categorical_crossentropy',dtype=None,from_logits=False,label_smoothing=0)
tf.keras.metrics.CategoricalHinge(name='categorical_hinge',dtype=None)
tf.keras.metrics.CosineSimilarity(name='cosine_similarity',dtype=None,axis=-1)
tf.keras.metrics.FalseNegatives(thresholds=None,name=None,dtype=None)
tf.keras.metrics.FalsePositives(thresholds=None,name=None,dtype=None)
tf.keras.metrics.Hinge(name='hinge',dtype=None)
tf.keras.metrics.KLD(y_true,y_pred)
tf.keras.metrics.KLDivergence(name='kullback_leibler_divergence',dtype=None)
tf.keras.metrics.LogCoshError(name='logcosh',dtype=None)
tf.keras.metrics.MAE(y_true,y_pred)
tf.keras.metrics.MAPE(y_true,y_pred)
tf.keras.metrics.MSE(y_true,y_pred)
tf.keras.metrics.MSLE(y_true,y_pred)
tf.keras.metrics.Mean(name='mean',dtype=None)
tf.keras.metrics.MeanAbsoluteError(name='mean_absolute_error',dtype=None)
tf.keras.metrics.MeanAbsolutePercentageError(name='mean_absolute_percentage_error',dtype=None)
tf.keras.metrics.MeanIoU(num_classes,name=None,dtype=None)
tf.keras.metrics.MeanMetricWrapper(fn,name=None,dtype=None,**kwargs)
tf.keras.metrics.MeanRelativeError(normalizer,name=None,dtype=None)
tf.keras.metrics.MeanSquaredError(name='mean_squared_error',dtype=None)
tf.keras.metrics.MeanSquaredLogarithmicError(name='mean_squared_logarithmic_error',dtype=None)
tf.keras.metrics.MeanTensor(name='mean_tensor',dtype=None,shape=None)
tf.keras.metrics.Metric(name=None,dtype=None,**kwargs)
tf.keras.metrics.Poisson(name='poisson',dtype=None)
tf.keras.metrics.Precision(thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
tf.keras.metrics.PrecisionAtRecall(recall,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.keras.metrics.Recall(thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
tf.keras.metrics.RecallAtPrecision(precision,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.keras.metrics.RootMeanSquaredError(name='root_mean_squared_error',dtype=None)
tf.keras.metrics.SensitivityAtSpecificity(specificity,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.keras.metrics.SparseCategoricalAccuracy(name='sparse_categorical_accuracy',dtype=None)
tf.keras.metrics.SparseCategoricalCrossentropy(name='sparse_categorical_crossentropy',dtype=None,from_logits=False,axis=-1)
tf.keras.metrics.SparseTopKCategoricalAccuracy(k=5,name='sparse_top_k_categorical_accuracy',dtype=None)
tf.keras.metrics.SpecificityAtSensitivity(sensitivity,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.keras.metrics.SquaredHinge(name='squared_hinge',dtype=None)
tf.keras.metrics.Sum(name='sum',dtype=None)
tf.keras.metrics.TopKCategoricalAccuracy(k=5,name='top_k_categorical_accuracy',dtype=None)
tf.keras.metrics.TrueNegatives(thresholds=None,name=None,dtype=None)
tf.keras.metrics.TruePositives(thresholds=None,name=None,dtype=None)
tf.keras.metrics.binary_accuracy(y_true,y_pred,threshold=0.5)
tf.keras.metrics.binary_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.keras.metrics.categorical_accuracy(y_true,y_pred)
tf.keras.metrics.categorical_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.keras.metrics.deserialize(config,custom_objects=None)
tf.keras.metrics.get(identifier)
tf.keras.metrics.hinge(y_true,y_pred)
tf.keras.metrics.kl_divergence(y_true,y_pred)
tf.keras.metrics.kld(y_true,y_pred)
tf.keras.metrics.kullback_leibler_divergence(y_true,y_pred)
tf.keras.metrics.log_cosh(y_true,y_pred)
tf.keras.metrics.logcosh(y_true,y_pred)
tf.keras.metrics.mae(y_true,y_pred)
tf.keras.metrics.mape(y_true,y_pred)
tf.keras.metrics.mean_absolute_error(y_true,y_pred)
tf.keras.metrics.mean_absolute_percentage_error(y_true,y_pred)
tf.keras.metrics.mean_squared_error(y_true,y_pred)
tf.keras.metrics.mean_squared_logarithmic_error(y_true,y_pred)
tf.keras.metrics.mse(y_true,y_pred)
tf.keras.metrics.msle(y_true,y_pred)
tf.keras.metrics.poisson(y_true,y_pred)
tf.keras.metrics.serialize(metric)
tf.keras.metrics.sparse_categorical_accuracy(y_true,y_pred)
tf.keras.metrics.sparse_categorical_crossentropy(y_true,y_pred,from_logits=False,axis=-1)
tf.keras.metrics.sparse_top_k_categorical_accuracy(y_true,y_pred,k=5)
tf.keras.metrics.squared_hinge(y_true,y_pred)
tf.keras.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)
tf.keras.mixed_precision.LossScaleOptimizer(inner_optimizer,dynamic=True,initial_scale=None,dynamic_growth_steps=None)
tf.keras.mixed_precision.Policy(name)
tf.keras.mixed_precision.experimental.LossScaleOptimizer(optimizer,loss_scale)
tf.keras.mixed_precision.experimental.Policy(name,loss_scale='auto')
tf.keras.mixed_precision.experimental.get_layer_policy(layer)
tf.keras.mixed_precision.experimental.global_policy()
tf.keras.mixed_precision.experimental.set_policy(policy)
tf.keras.mixed_precision.global_policy()
tf.keras.mixed_precision.set_global_policy(policy)
tf.keras.models.Model(*args,**kwargs)
tf.keras.models.Sequential(layers=None,name=None)
tf.keras.models.clone_model(model,input_tensors=None,clone_function=None)
tf.keras.models.load_model(filepath,custom_objects=None,compile=True,options=None)
tf.keras.models.model_from_config(config,custom_objects=None)
tf.keras.models.model_from_json(json_string,custom_objects=None)
tf.keras.models.model_from_yaml(yaml_string,custom_objects=None)
tf.keras.models.save_model(model,filepath,overwrite=True,include_optimizer=True,save_format=None,signatures=None,options=None,save_traces=True)
tf.keras.optimizers.Adadelta(learning_rate=0.001,rho=0.95,epsilon=1e-07,name='Adadelta',**kwargs)
tf.keras.optimizers.Adagrad(learning_rate=0.001,initial_accumulator_value=0.1,epsilon=1e-07,name='Adagrad',**kwargs)
tf.keras.optimizers.Adam(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,name='Adam',**kwargs)
tf.keras.optimizers.Adamax(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Adamax',**kwargs)
tf.keras.optimizers.Ftrl(learning_rate=0.001,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,name='Ftrl',l2_shrinkage_regularization_strength=0.0,beta=0.0,**kwargs)
tf.keras.optimizers.Nadam(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Nadam',**kwargs)
tf.keras.optimizers.Optimizer(name,gradient_aggregator=None,gradient_transformers=None,**kwargs)
tf.keras.optimizers.RMSprop(learning_rate=0.001,rho=0.9,momentum=0.0,epsilon=1e-07,centered=False,name='RMSprop',**kwargs)
tf.keras.optimizers.SGD(learning_rate=0.01,momentum=0.0,nesterov=False,name='SGD',**kwargs)
tf.keras.optimizers.deserialize(config,custom_objects=None)
tf.keras.optimizers.get(identifier)
tf.keras.optimizers.schedules.CosineDecay(initial_learning_rate,decay_steps,alpha=0.0,name=None)
tf.keras.optimizers.schedules.CosineDecayRestarts(initial_learning_rate,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name=None)
tf.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)
tf.keras.optimizers.schedules.InverseTimeDecay(initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)
tf.keras.optimizers.schedules.PiecewiseConstantDecay(boundaries,values,name=None)
tf.keras.optimizers.schedules.PolynomialDecay(initial_learning_rate,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name=None)
tf.keras.optimizers.schedules.deserialize(config,custom_objects=None)
tf.keras.optimizers.schedules.serialize(learning_rate_schedule)
tf.keras.optimizers.serialize(optimizer)
tf.keras.preprocessing.image.DirectoryIterator(directory,image_data_generator,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',follow_links=False,subset=None,interpolation='nearest',dtype=None)
tf.keras.preprocessing.image.ImageDataGenerator(featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,zca_epsilon=1e-06,rotation_range=0,width_shift_range=0.0,height_shift_range=0.0,brightness_range=None,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,preprocessing_function=None,data_format=None,validation_split=0.0,dtype=None)
tf.keras.preprocessing.image.Iterator(n,batch_size,shuffle,seed)
tf.keras.preprocessing.image.NumpyArrayIterator(x,y,image_data_generator,batch_size=32,shuffle=False,sample_weight=None,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',subset=None,dtype=None)
tf.keras.preprocessing.image.apply_affine_transform(x,theta=0,tx=0,ty=0,shear=0,zx=1,zy=1,row_axis=0,col_axis=1,channel_axis=2,fill_mode='nearest',cval=0.0,order=1)
tf.keras.preprocessing.image.apply_brightness_shift(x,brightness)
tf.keras.preprocessing.image.apply_channel_shift(x,intensity,channel_axis=0)
tf.keras.preprocessing.image.array_to_img(x,data_format=None,scale=True,dtype=None)
tf.keras.preprocessing.image.img_to_array(img,data_format=None,dtype=None)
tf.keras.preprocessing.image.load_img(path,grayscale=False,color_mode='rgb',target_size=None,interpolation='nearest')
tf.keras.preprocessing.image.random_brightness(x,brightness_range)
tf.keras.preprocessing.image.random_channel_shift(x,intensity_range,channel_axis=0)
tf.keras.preprocessing.image.random_rotation(x,rg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
tf.keras.preprocessing.image.random_shear(x,intensity,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
tf.keras.preprocessing.image.random_shift(x,wrg,hrg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
tf.keras.preprocessing.image.random_zoom(x,zoom_range,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)
tf.keras.preprocessing.image.save_img(path,x,data_format=None,file_format=None,scale=True,**kwargs)
tf.keras.preprocessing.image.smart_resize(x,size,interpolation='bilinear')
tf.keras.preprocessing.image_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,color_mode='rgb',batch_size=32,image_size=(256,256),shuffle=True,seed=None,validation_split=None,subset=None,interpolation='bilinear',follow_links=False,crop_to_aspect_ratio=False,**kwargs)
tf.keras.preprocessing.sequence.TimeseriesGenerator(data,targets,length,sampling_rate=1,stride=1,start_index=0,end_index=None,shuffle=False,reverse=False,batch_size=128)
tf.keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)
tf.keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)
tf.keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None,seed=None)
tf.keras.preprocessing.text.Tokenizer(num_words=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='',char_level=False,oov_token=None,document_count=0,**kwargs)
tf.keras.preprocessing.text.hashing_trick(text,n,hash_function=None,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
tf.keras.preprocessing.text.one_hot(input_text,n,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
tf.keras.preprocessing.text.text_to_word_sequence(input_text,filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split='')
tf.keras.preprocessing.text.tokenizer_from_json(json_string)
tf.keras.preprocessing.text_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,batch_size=32,max_length=None,shuffle=True,seed=None,validation_split=None,subset=None,follow_links=False)
tf.keras.preprocessing.timeseries_dataset_from_array(data,targets,sequence_length,sequence_stride=1,sampling_rate=1,batch_size=128,shuffle=False,seed=None,start_index=None,end_index=None)
tf.keras.regularizers.L1(l1=0.01,**kwargs)
tf.keras.regularizers.L1L2(l1=0.0,l2=0.0)
tf.keras.regularizers.L2(l2=0.01,**kwargs)
tf.keras.regularizers.deserialize(config,custom_objects=None)
tf.keras.regularizers.get(identifier)
tf.keras.regularizers.l1(l1=0.01,**kwargs)
tf.keras.regularizers.l1_l2(l1=0.01,l2=0.01)
tf.keras.regularizers.l2(l2=0.01,**kwargs)
tf.keras.regularizers.serialize(regularizer)
tf.keras.utils.CustomObjectScope(*args)
tf.keras.utils.GeneratorEnqueuer(generator,use_multiprocessing=False,random_seed=None)
tf.keras.utils.OrderedEnqueuer(sequence,use_multiprocessing=False,shuffle=False)
tf.keras.utils.Progbar(target,width=30,verbose=1,interval=0.05,stateful_metrics=None,unit_name='step')
tf.keras.utils.SequenceEnqueuer(sequence,use_multiprocessing=False)
tf.keras.utils.array_to_img(x,data_format=None,scale=True,dtype=None)
tf.keras.utils.custom_object_scope(*args)
tf.keras.utils.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')
tf.keras.utils.experimental.DatasetCreator(dataset_fn,input_options=None)
tf.keras.utils.get_custom_objects()
tf.keras.utils.get_file(fname=None,origin=None,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None)
tf.keras.utils.get_registered_name(obj)
tf.keras.utils.get_registered_object(name,custom_objects=None,module_objects=None)
tf.keras.utils.get_source_inputs(tensor,layer=None,node_index=None)
tf.keras.utils.image_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,color_mode='rgb',batch_size=32,image_size=(256,256),shuffle=True,seed=None,validation_split=None,subset=None,interpolation='bilinear',follow_links=False,crop_to_aspect_ratio=False,**kwargs)
tf.keras.utils.img_to_array(img,data_format=None,dtype=None)
tf.keras.utils.load_img(path,grayscale=False,color_mode='rgb',target_size=None,interpolation='nearest')
tf.keras.utils.model_to_dot(model,show_shapes=False,show_dtype=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96,subgraph=False,layer_range=None,show_layer_activations=False)
tf.keras.utils.normalize(x,axis=-1,order=2)
tf.keras.utils.pack_x_y_sample_weight(x,y=None,sample_weight=None)
tf.keras.utils.plot_model(model,to_file='model.png',show_shapes=False,show_dtype=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96,layer_range=None,show_layer_activations=False)
tf.keras.utils.register_keras_serializable(package='Custom',name=None)
tf.keras.utils.save_img(path,x,data_format=None,file_format=None,scale=True,**kwargs)
tf.keras.utils.serialize_keras_object(instance)
tf.keras.utils.set_random_seed(seed)
tf.keras.utils.text_dataset_from_directory(directory,labels='inferred',label_mode='int',class_names=None,batch_size=32,max_length=None,shuffle=True,seed=None,validation_split=None,subset=None,follow_links=False)
tf.keras.utils.timeseries_dataset_from_array(data,targets,sequence_length,sequence_stride=1,sampling_rate=1,batch_size=128,shuffle=False,seed=None,start_index=None,end_index=None)
tf.keras.utils.to_categorical(y,num_classes=None,dtype='float32')
tf.keras.utils.unpack_x_y_sample_weight(data)
tf.less(x,y,name=None)
tf.less_equal(x,y,name=None)
tf.linalg.LinearOperator(dtype,graph_parents=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None,parameters=None)
tf.linalg.LinearOperatorAdjoint(operator,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)
tf.linalg.LinearOperatorBlockDiag(operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name=None)
tf.linalg.LinearOperatorBlockLowerTriangular(operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorBlockLowerTriangular')
tf.linalg.LinearOperatorCirculant(spectrum,input_output_dtype=tf.dtypes.complex64,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name='LinearOperatorCirculant')
tf.linalg.LinearOperatorCirculant2D(spectrum,input_output_dtype=tf.dtypes.complex64,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name='LinearOperatorCirculant2D')
tf.linalg.LinearOperatorCirculant3D(spectrum,input_output_dtype=tf.dtypes.complex64,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name='LinearOperatorCirculant3D')
tf.linalg.LinearOperatorComposition(operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)
tf.linalg.LinearOperatorDiag(diag,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorDiag')
tf.linalg.LinearOperatorFullMatrix(matrix,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorFullMatrix')
tf.linalg.LinearOperatorHouseholder(reflection_axis,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorHouseholder')
tf.linalg.LinearOperatorIdentity(num_rows,batch_shape=None,dtype=None,is_non_singular=True,is_self_adjoint=True,is_positive_definite=True,is_square=True,assert_proper_shapes=False,name='LinearOperatorIdentity')
tf.linalg.LinearOperatorInversion(operator,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)
tf.linalg.LinearOperatorKronecker(operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)
tf.linalg.LinearOperatorLowRankUpdate(base_operator,u,diag_update=None,v=None,is_diag_update_positive=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorLowRankUpdate')
tf.linalg.LinearOperatorLowerTriangular(tril,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorLowerTriangular')
tf.linalg.LinearOperatorPermutation(perm,dtype=tf.dtypes.float32,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorPermutation')
tf.linalg.LinearOperatorScaledIdentity(num_rows,multiplier,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,assert_proper_shapes=False,name='LinearOperatorScaledIdentity')
tf.linalg.LinearOperatorToeplitz(col,row,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorToeplitz')
tf.linalg.LinearOperatorTridiag(diagonals,diagonals_format=_COMPACT,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorTridiag')
tf.linalg.LinearOperatorZeros(num_rows,num_columns=None,batch_shape=None,dtype=None,is_non_singular=False,is_self_adjoint=True,is_positive_definite=False,is_square=True,assert_proper_shapes=False,name='LinearOperatorZeros')
tf.linalg.adjoint(matrix,name=None)
tf.linalg.band_part(input,num_lower,num_upper,name=None)
tf.linalg.banded_triangular_solve(bands,rhs,lower=True,adjoint=False,name=None)
tf.linalg.cholesky(input,name=None)
tf.linalg.cholesky_solve(chol,rhs,name=None)
tf.linalg.cross(a,b,name=None)
tf.linalg.det(input,name=None)
tf.linalg.diag(diagonal,name='diag',k=0,num_rows=-1,num_cols=-1,padding_value=0,align='RIGHT_LEFT')
tf.linalg.diag_part(input,name='diag_part',k=0,padding_value=0,align='RIGHT_LEFT')
tf.linalg.eig(tensor,name=None)
tf.linalg.eigh(tensor,name=None)
tf.linalg.eigh_tridiagonal(alpha,beta,eigvals_only=True,select='a',select_range=None,tol=None,name=None)
tf.linalg.eigvals(tensor,name=None)
tf.linalg.eigvalsh(tensor,name=None)
tf.linalg.einsum(equation,*inputs,**kwargs)
tf.linalg.experimental.conjugate_gradient(operator,rhs,preconditioner=None,x=None,tol=1e-05,max_iter=20,name='conjugate_gradient')
tf.linalg.expm(input,name=None)
tf.linalg.eye(num_rows,num_columns=None,batch_shape=None,dtype=tf.dtypes.float32,name=None)
tf.linalg.global_norm(t_list,name=None)
tf.linalg.inv(input,adjoint=False,name=None)
tf.linalg.l2_normalize(x,axis=None,epsilon=1e-12,name=None,dim=None)
tf.linalg.logdet(matrix,name=None)
tf.linalg.logm(input,name=None)
tf.linalg.lstsq(matrix,rhs,l2_regularizer=0.0,fast=True,name=None)
tf.linalg.lu(input,output_idx_type=tf.dtypes.int32,name=None)
tf.linalg.lu_matrix_inverse(lower_upper,perm,validate_args=False,name=None)
tf.linalg.lu_reconstruct(lower_upper,perm,validate_args=False,name=None)
tf.linalg.lu_solve(lower_upper,perm,rhs,validate_args=False,name=None)
tf.linalg.matmul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,a_is_sparse=False,b_is_sparse=False,output_type=None,name=None)
tf.linalg.matrix_rank(a,tol=None,validate_args=False,name=None)
tf.linalg.matrix_transpose(a,name='matrix_transpose',conjugate=False)
tf.linalg.matvec(a,b,transpose_a=False,adjoint_a=False,a_is_sparse=False,b_is_sparse=False,name=None)
tf.linalg.norm(tensor,ord='euclidean',axis=None,keepdims=None,name=None)
tf.linalg.normalize(tensor,ord='euclidean',axis=None,name=None)
tf.linalg.pinv(a,rcond=None,validate_args=False,name=None)
tf.linalg.qr(input,full_matrices=False,name=None)
tf.linalg.set_diag(input,diagonal,name='set_diag',k=0,align='RIGHT_LEFT')
tf.linalg.slogdet(input,name=None)
tf.linalg.solve(matrix,rhs,adjoint=False,name=None)
tf.linalg.sqrtm(input,name=None)
tf.linalg.svd(tensor,full_matrices=False,compute_uv=True,name=None)
tf.linalg.tensor_diag(diagonal,name=None)
tf.linalg.tensor_diag_part(input,name=None)
tf.linalg.tensordot(a,b,axes,name=None)
tf.linalg.trace(x,name=None)
tf.linalg.triangular_solve(matrix,rhs,lower=True,adjoint=False,name=None)
tf.linalg.tridiagonal_matmul(diagonals,rhs,diagonals_format='compact',name=None)
tf.linalg.tridiagonal_solve(diagonals,rhs,diagonals_format='compact',transpose_rhs=False,conjugate_rhs=False,name=None,partial_pivoting=True,perturb_singular=False)
tf.linspace(start,stop,num,name=None,axis=0)
tf.lite.Interpreter(model_path=None,model_content=None,experimental_delegates=None,num_threads=None,experimental_op_resolver_type=tf.lite.experimental.OpResolverType.AUTO,experimental_preserve_all_tensors=False)
tf.lite.RepresentativeDataset(input_gen)
tf.lite.TFLiteConverter(funcs,trackable_obj=None)
tf.lite.TargetSpec(supported_ops=None,supported_types=None,experimental_select_user_tf_ops=None,experimental_supported_backends=None)
tf.lite.experimental.QuantizationDebugOptions(layer_debug_metrics:Optional[Mapping[str,Callable[[np.ndarray],float]]]=None,model_debug_metrics:Optional[Mapping[str,Callable[[Sequence[np.ndarray],Sequence[np.ndarray]],float]]]=None,layer_direct_compare_metrics:Optional[Mapping[str,Callable[[Sequence[np.ndarray],Sequence[np.ndarray],float,int],float]]]=None,denylisted_ops:Optional[List[str]]=None,denylisted_nodes:Optional[List[str]]=None,fully_quantize:bool=False)->None
tf.lite.experimental.QuantizationDebugger(quant_debug_model_path:Optional[str]=None,quant_debug_model_content:Optional[bytes]=None,float_model_path:Optional[str]=None,float_model_content:Optional[bytes]=None,debug_dataset:Optional[Callable[[],Iterable[Sequence[np.ndarray]]]]=None,debug_options:Optional[tf.lite.experimental.QuantizationDebugOptions]=None,converter:Optional[TFLiteConverter]=None)->Nonetf.lite.experimental.QuantizationDebugOptions
tf.lite.experimental.authoring.compatible(target=None,converter_target_spec=None,**kwargs)
tf.lite.experimental.load_delegate(library,options=None)
tf.load_library(library_location)
tf.load_op_library(library_filename)
tf.logical_and(x,y,name=None)
tf.logical_not(x,name=None)
tf.logical_or(x,y,name=None)
tf.lookup.KeyValueTensorInitializer(keys,values,key_dtype=None,value_dtype=None,name=None)
tf.lookup.StaticHashTable(initializer,default_value,name=None,experimental_is_anonymous=False)
tf.lookup.StaticVocabularyTable(initializer,num_oov_buckets,lookup_key_dtype=None,name=None)
tf.lookup.TextFileInitializer(filename,key_dtype,key_index,value_dtype,value_index,vocab_size=None,delimiter='\t',name=None,value_index_offset=0)
tf.lookup.experimental.DenseHashTable(key_dtype,value_dtype,default_value,empty_key,deleted_key,initial_num_buckets=None,name='MutableDenseHashTable',checkpoint=True)
tf.lookup.experimental.MutableHashTable(key_dtype,value_dtype,default_value,name='MutableHashTable',checkpoint=True)
tf.losses.BinaryCrossentropy(from_logits=False,label_smoothing=0.0,axis=-1,reduction=losses_utils.ReductionV2.AUTO,name='binary_crossentropy')
tf.losses.CategoricalCrossentropy(from_logits=False,label_smoothing=0.0,axis=-1,reduction=losses_utils.ReductionV2.AUTO,name='categorical_crossentropy')
tf.losses.CategoricalHinge(reduction=losses_utils.ReductionV2.AUTO,name='categorical_hinge')
tf.losses.CosineSimilarity(axis=-1,reduction=losses_utils.ReductionV2.AUTO,name='cosine_similarity')
tf.losses.Hinge(reduction=losses_utils.ReductionV2.AUTO,name='hinge')
tf.losses.Huber(delta=1.0,reduction=losses_utils.ReductionV2.AUTO,name='huber_loss')
tf.losses.KLD(y_true,y_pred)
tf.losses.KLDivergence(reduction=losses_utils.ReductionV2.AUTO,name='kl_divergence')
tf.losses.LogCosh(reduction=losses_utils.ReductionV2.AUTO,name='log_cosh')
tf.losses.Loss(reduction=losses_utils.ReductionV2.AUTO,name=None)
tf.losses.MAE(y_true,y_pred)
tf.losses.MAPE(y_true,y_pred)
tf.losses.MSE(y_true,y_pred)
tf.losses.MSLE(y_true,y_pred)
tf.losses.MeanAbsoluteError(reduction=losses_utils.ReductionV2.AUTO,name='mean_absolute_error')
tf.losses.MeanAbsolutePercentageError(reduction=losses_utils.ReductionV2.AUTO,name='mean_absolute_percentage_error')
tf.losses.MeanSquaredError(reduction=losses_utils.ReductionV2.AUTO,name='mean_squared_error')
tf.losses.MeanSquaredLogarithmicError(reduction=losses_utils.ReductionV2.AUTO,name='mean_squared_logarithmic_error')
tf.losses.Poisson(reduction=losses_utils.ReductionV2.AUTO,name='poisson')
tf.losses.SparseCategoricalCrossentropy(from_logits=False,reduction=losses_utils.ReductionV2.AUTO,name='sparse_categorical_crossentropy')
tf.losses.SquaredHinge(reduction=losses_utils.ReductionV2.AUTO,name='squared_hinge')
tf.losses.binary_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.losses.categorical_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.losses.categorical_hinge(y_true,y_pred)
tf.losses.cosine_similarity(y_true,y_pred,axis=-1)
tf.losses.deserialize(name,custom_objects=None)
tf.losses.get(identifier)
tf.losses.hinge(y_true,y_pred)
tf.losses.huber(y_true,y_pred,delta=1.0)
tf.losses.kl_divergence(y_true,y_pred)
tf.losses.kld(y_true,y_pred)
tf.losses.kullback_leibler_divergence(y_true,y_pred)
tf.losses.log_cosh(y_true,y_pred)
tf.losses.logcosh(y_true,y_pred)
tf.losses.mae(y_true,y_pred)
tf.losses.mape(y_true,y_pred)
tf.losses.mean_absolute_error(y_true,y_pred)
tf.losses.mean_absolute_percentage_error(y_true,y_pred)
tf.losses.mean_squared_error(y_true,y_pred)
tf.losses.mean_squared_logarithmic_error(y_true,y_pred)
tf.losses.mse(y_true,y_pred)
tf.losses.msle(y_true,y_pred)
tf.losses.poisson(y_true,y_pred)
tf.losses.serialize(loss)
tf.losses.sparse_categorical_crossentropy(y_true,y_pred,from_logits=False,axis=-1)
tf.losses.squared_hinge(y_true,y_pred)
tf.make_ndarray(tensor)
tf.make_tensor_proto(values,dtype=None,shape=None,verify_shape=False,allow_broadcast=False)
tf.map_fn(fn,elems,dtype=None,parallel_iterations=None,back_prop=True,swap_memory=False,infer_shape=True,name=None,fn_output_signature=None)
tf.math.abs(x,name=None)
tf.math.accumulate_n(inputs,shape=None,tensor_dtype=None,name=None)
tf.math.acos(x,name=None)
tf.math.acosh(x,name=None)
tf.math.add(x,y,name=None)
tf.math.add_n(inputs,name=None)
tf.math.angle(input,name=None)
tf.math.argmax(input,axis=None,output_type=tf.dtypes.int64,name=None)
tf.math.argmin(input,axis=None,output_type=tf.dtypes.int64,name=None)
tf.math.asin(x,name=None)
tf.math.asinh(x,name=None)
tf.math.atan(x,name=None)
tf.math.atan2(y,x,name=None)
tf.math.atanh(x,name=None)
tf.math.bessel_i0(x,name=None)
tf.math.bessel_i0e(x,name=None)
tf.math.bessel_i1(x,name=None)
tf.math.bessel_i1e(x,name=None)
tf.math.betainc(a,b,x,name=None)
tf.math.bincount(arr,weights=None,minlength=None,maxlength=None,dtype=tf.dtypes.int32,name=None,axis=None,binary_output=False)
tf.math.ceil(x,name=None)
tf.math.confusion_matrix(labels,predictions,num_classes=None,weights=None,dtype=tf.dtypes.int32,name=None)
tf.math.conj(x,name=None)
tf.math.cos(x,name=None)
tf.math.cosh(x,name=None)
tf.math.count_nonzero(input,axis=None,keepdims=None,dtype=tf.dtypes.int64,name=None)
tf.math.cumprod(x,axis=0,exclusive=False,reverse=False,name=None)
tf.math.cumsum(x,axis=0,exclusive=False,reverse=False,name=None)
tf.math.cumulative_logsumexp(x,axis=0,exclusive=False,reverse=False,name=None)
tf.math.digamma(x,name=None)
tf.math.divide(x,y,name=None)
tf.math.divide_no_nan(x,y,name=None)
tf.math.equal(x,y,name=None)
tf.math.erf(x,name=None)
tf.math.erfc(x,name=None)
tf.math.erfcinv(x,name=None)
tf.math.erfinv(x,name=None)
tf.math.exp(x,name=None)
tf.math.expm1(x,name=None)
tf.math.floor(x,name=None)
tf.math.floordiv(x,y,name=None)
tf.math.floormod(x,y,name=None)
tf.math.greater(x,y,name=None)
tf.math.greater_equal(x,y,name=None)
tf.math.igamma(a,x,name=None)
tf.math.igammac(a,x,name=None)
tf.math.imag(input,name=None)
tf.math.in_top_k(targets,predictions,k,name=None)
tf.math.invert_permutation(x,name=None)
tf.math.is_finite(x,name=None)
tf.math.is_inf(x,name=None)
tf.math.is_nan(x,name=None)
tf.math.is_non_decreasing(x,name=None)
tf.math.is_strictly_increasing(x,name=None)
tf.math.l2_normalize(x,axis=None,epsilon=1e-12,name=None,dim=None)
tf.math.lbeta(x,name=None)
tf.math.less(x,y,name=None)
tf.math.less_equal(x,y,name=None)
tf.math.lgamma(x,name=None)
tf.math.log(x,name=None)
tf.math.log1p(x,name=None)
tf.math.log_sigmoid(x,name=None)
tf.math.log_softmax(logits,axis=None,name=None)
tf.math.logical_and(x,y,name=None)
tf.math.logical_not(x,name=None)
tf.math.logical_or(x,y,name=None)
tf.math.logical_xor(x,y,name='LogicalXor')
tf.math.maximum(x,y,name=None)
tf.math.minimum(x,y,name=None)
tf.math.mod(x,y,name=None)
tf.math.multiply(x,y,name=None)
tf.math.multiply_no_nan(x,y,name=None)
tf.math.ndtri(x,name=None)
tf.math.negative(x,name=None)
tf.math.nextafter(x1,x2,name=None)
tf.math.not_equal(x,y,name=None)
tf.math.polygamma(a,x,name=None)
tf.math.polyval(coeffs,x,name=None)
tf.math.pow(x,y,name=None)
tf.math.real(input,name=None)
tf.math.reciprocal(x,name=None)
tf.math.reciprocal_no_nan(x,name=None)
tf.math.reduce_all(input_tensor,axis=None,keepdims=False,name=None)
tf.math.reduce_any(input_tensor,axis=None,keepdims=False,name=None)
tf.math.reduce_euclidean_norm(input_tensor,axis=None,keepdims=False,name=None)
tf.math.reduce_logsumexp(input_tensor,axis=None,keepdims=False,name=None)
tf.math.reduce_max(input_tensor,axis=None,keepdims=False,name=None)
tf.math.reduce_mean(input_tensor,axis=None,keepdims=False,name=None)
tf.math.reduce_min(input_tensor,axis=None,keepdims=False,name=None)
tf.math.reduce_prod(input_tensor,axis=None,keepdims=False,name=None)
tf.math.reduce_std(input_tensor,axis=None,keepdims=False,name=None)
tf.math.reduce_sum(input_tensor,axis=None,keepdims=False,name=None)
tf.math.reduce_variance(input_tensor,axis=None,keepdims=False,name=None)
tf.math.rint(x,name=None)
tf.math.round(x,name=None)
tf.math.rsqrt(x,name=None)
tf.math.scalar_mul(scalar,x,name=None)
tf.math.segment_max(data,segment_ids,name=None)
tf.math.segment_mean(data,segment_ids,name=None)
tf.math.segment_min(data,segment_ids,name=None)
tf.math.segment_prod(data,segment_ids,name=None)
tf.math.segment_sum(data,segment_ids,name=None)
tf.math.sigmoid(x,name=None)
tf.math.sign(x,name=None)
tf.math.sin(x,name=None)
tf.math.sinh(x,name=None)
tf.math.sobol_sample(dim,num_results,skip=0,dtype=tf.dtypes.float32,name=None)
tf.math.softmax(logits,axis=None,name=None)
tf.math.softplus(features,name=None)
tf.math.softsign(features,name=None)
tf.math.special.bessel_i0(x,name=None)
tf.math.special.bessel_i0e(x,name=None)
tf.math.special.bessel_i1(x,name=None)
tf.math.special.bessel_i1e(x,name=None)
tf.math.special.bessel_j0(x,name=None)
tf.math.special.bessel_j1(x,name=None)
tf.math.special.bessel_k0(x,name=None)
tf.math.special.bessel_k0e(x,name=None)
tf.math.special.bessel_k1(x,name=None)
tf.math.special.bessel_k1e(x,name=None)
tf.math.special.bessel_y0(x,name=None)
tf.math.special.bessel_y1(x,name=None)
tf.math.special.dawsn(x,name=None)
tf.math.special.expint(x,name=None)
tf.math.special.fresnel_cos(x,name=None)
tf.math.special.fresnel_sin(x,name=None)
tf.math.special.spence(x,name=None)
tf.math.sqrt(x,name=None)
tf.math.square(x,name=None)
tf.math.squared_difference(x,y,name=None)
tf.math.subtract(x,y,name=None)
tf.math.tan(x,name=None)
tf.math.tanh(x,name=None)
tf.math.top_k(input,k=1,sorted=True,name=None)
tf.math.truediv(x,y,name=None)
tf.math.unsorted_segment_max(data,segment_ids,num_segments,name=None)
tf.math.unsorted_segment_mean(data,segment_ids,num_segments,name=None)
tf.math.unsorted_segment_min(data,segment_ids,num_segments,name=None)
tf.math.unsorted_segment_prod(data,segment_ids,num_segments,name=None)
tf.math.unsorted_segment_sqrt_n(data,segment_ids,num_segments,name=None)
tf.math.unsorted_segment_sum(data,segment_ids,num_segments,name=None)
tf.math.xdivy(x,y,name=None)
tf.math.xlog1py(x,y,name=None)
tf.math.xlogy(x,y,name=None)
tf.math.zero_fraction(value,name=None)
tf.math.zeta(x,q,name=None)
tf.matmul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,a_is_sparse=False,b_is_sparse=False,output_type=None,name=None)
tf.matrix_square_root(input,name=None)
tf.maximum(x,y,name=None)
tf.meshgrid(*args,**kwargs)
tf.metrics.AUC(num_thresholds=200,curve='ROC',summation_method='interpolation',name=None,dtype=None,thresholds=None,multi_label=False,num_labels=None,label_weights=None,from_logits=False)
tf.metrics.Accuracy(name='accuracy',dtype=None)
tf.metrics.BinaryAccuracy(name='binary_accuracy',dtype=None,threshold=0.5)
tf.metrics.BinaryCrossentropy(name='binary_crossentropy',dtype=None,from_logits=False,label_smoothing=0)
tf.metrics.CategoricalAccuracy(name='categorical_accuracy',dtype=None)
tf.metrics.CategoricalCrossentropy(name='categorical_crossentropy',dtype=None,from_logits=False,label_smoothing=0)
tf.metrics.CategoricalHinge(name='categorical_hinge',dtype=None)
tf.metrics.CosineSimilarity(name='cosine_similarity',dtype=None,axis=-1)
tf.metrics.FalseNegatives(thresholds=None,name=None,dtype=None)
tf.metrics.FalsePositives(thresholds=None,name=None,dtype=None)
tf.metrics.Hinge(name='hinge',dtype=None)
tf.metrics.KLD(y_true,y_pred)
tf.metrics.KLDivergence(name='kullback_leibler_divergence',dtype=None)
tf.metrics.LogCoshError(name='logcosh',dtype=None)
tf.metrics.MAE(y_true,y_pred)
tf.metrics.MAPE(y_true,y_pred)
tf.metrics.MSE(y_true,y_pred)
tf.metrics.MSLE(y_true,y_pred)
tf.metrics.Mean(name='mean',dtype=None)
tf.metrics.MeanAbsoluteError(name='mean_absolute_error',dtype=None)
tf.metrics.MeanAbsolutePercentageError(name='mean_absolute_percentage_error',dtype=None)
tf.metrics.MeanIoU(num_classes,name=None,dtype=None)
tf.metrics.MeanMetricWrapper(fn,name=None,dtype=None,**kwargs)
tf.metrics.MeanRelativeError(normalizer,name=None,dtype=None)
tf.metrics.MeanSquaredError(name='mean_squared_error',dtype=None)
tf.metrics.MeanSquaredLogarithmicError(name='mean_squared_logarithmic_error',dtype=None)
tf.metrics.MeanTensor(name='mean_tensor',dtype=None,shape=None)
tf.metrics.Metric(name=None,dtype=None,**kwargs)
tf.metrics.Poisson(name='poisson',dtype=None)
tf.metrics.Precision(thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
tf.metrics.PrecisionAtRecall(recall,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.metrics.Recall(thresholds=None,top_k=None,class_id=None,name=None,dtype=None)
tf.metrics.RecallAtPrecision(precision,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.metrics.RootMeanSquaredError(name='root_mean_squared_error',dtype=None)
tf.metrics.SensitivityAtSpecificity(specificity,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.metrics.SparseCategoricalAccuracy(name='sparse_categorical_accuracy',dtype=None)
tf.metrics.SparseCategoricalCrossentropy(name='sparse_categorical_crossentropy',dtype=None,from_logits=False,axis=-1)
tf.metrics.SparseTopKCategoricalAccuracy(k=5,name='sparse_top_k_categorical_accuracy',dtype=None)
tf.metrics.SpecificityAtSensitivity(sensitivity,num_thresholds=200,class_id=None,name=None,dtype=None)
tf.metrics.SquaredHinge(name='squared_hinge',dtype=None)
tf.metrics.Sum(name='sum',dtype=None)
tf.metrics.TopKCategoricalAccuracy(k=5,name='top_k_categorical_accuracy',dtype=None)
tf.metrics.TrueNegatives(thresholds=None,name=None,dtype=None)
tf.metrics.TruePositives(thresholds=None,name=None,dtype=None)
tf.metrics.binary_accuracy(y_true,y_pred,threshold=0.5)
tf.metrics.binary_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.metrics.categorical_accuracy(y_true,y_pred)
tf.metrics.categorical_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0.0,axis=-1)
tf.metrics.deserialize(config,custom_objects=None)
tf.metrics.get(identifier)
tf.metrics.hinge(y_true,y_pred)
tf.metrics.kl_divergence(y_true,y_pred)
tf.metrics.kld(y_true,y_pred)
tf.metrics.kullback_leibler_divergence(y_true,y_pred)
tf.metrics.log_cosh(y_true,y_pred)
tf.metrics.logcosh(y_true,y_pred)
tf.metrics.mae(y_true,y_pred)
tf.metrics.mape(y_true,y_pred)
tf.metrics.mean_absolute_error(y_true,y_pred)
tf.metrics.mean_absolute_percentage_error(y_true,y_pred)
tf.metrics.mean_squared_error(y_true,y_pred)
tf.metrics.mean_squared_logarithmic_error(y_true,y_pred)
tf.metrics.mse(y_true,y_pred)
tf.metrics.msle(y_true,y_pred)
tf.metrics.poisson(y_true,y_pred)
tf.metrics.serialize(metric)
tf.metrics.sparse_categorical_accuracy(y_true,y_pred)
tf.metrics.sparse_categorical_crossentropy(y_true,y_pred,from_logits=False,axis=-1)
tf.metrics.sparse_top_k_categorical_accuracy(y_true,y_pred,k=5)
tf.metrics.squared_hinge(y_true,y_pred)
tf.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)
tf.minimum(x,y,name=None)
tf.mixed_precision.experimental.DynamicLossScale(initial_loss_scale=(2**15),increment_period=2000,multiplier=2.0)
tf.mixed_precision.experimental.FixedLossScale(loss_scale_value)
tf.mixed_precision.experimental.LossScale()
tf.mlir.experimental.convert_function(concrete_function,pass_pipeline='tf-standard-pipeline',show_debug_info=False)
tf.mlir.experimental.convert_graph_def(graph_def,pass_pipeline='tf-standard-pipeline',show_debug_info=False)
tf.multiply(x,y,name=None)
tf.name_scope(name)
tf.negative(x,name=None)
tf.nest.assert_same_structure(nest1,nest2,check_types=True,expand_composites=False)
tf.nest.flatten(structure,expand_composites=False)
tf.nest.is_nested(seq)
tf.nest.map_structure(func,*structure,**kwargs)
tf.nest.pack_sequence_as(structure,flat_sequence,expand_composites=False)
tf.nn.RNNCellDeviceWrapper(*args,**kwargs)
tf.nn.RNNCellDropoutWrapper(*args,**kwargs)
tf.nn.RNNCellResidualWrapper(*args,**kwargs)
tf.nn.all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,name=None)
tf.nn.atrous_conv2d(value,filters,rate,padding,name=None)
tf.nn.atrous_conv2d_transpose(value,filters,output_shape,rate,padding,name=None)
tf.nn.avg_pool(input,ksize,strides,padding,data_format=None,name=None)
tf.nn.avg_pool1d(input,ksize,strides,padding,data_format='NWC',name=None)
tf.nn.avg_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)
tf.nn.avg_pool3d(input,ksize,strides,padding,data_format='NDHWC',name=None)
tf.nn.batch_norm_with_global_normalization(input,mean,variance,beta,gamma,variance_epsilon,scale_after_normalization,name=None)
tf.nn.batch_normalization(x,mean,variance,offset,scale,variance_epsilon,name=None)
tf.nn.bias_add(value,bias,data_format=None,name=None)
tf.nn.collapse_repeated(labels,seq_length,name=None)
tf.nn.compute_accidental_hits(true_classes,sampled_candidates,num_true,seed=None,name=None)
tf.nn.compute_average_loss(per_example_loss,sample_weight=None,global_batch_size=None)
tf.nn.conv1d(input,filters,stride,padding,data_format='NWC',dilations=None,name=None)
tf.nn.conv1d_transpose(input,filters,output_shape,strides,padding='SAME',data_format='NWC',dilations=None,name=None)
tf.nn.conv2d(input,filters,strides,padding,data_format='NHWC',dilations=None,name=None)
tf.nn.conv2d_transpose(input,filters,output_shape,strides,padding='SAME',data_format='NHWC',dilations=None,name=None)
tf.nn.conv3d(input,filters,strides,padding,data_format='NDHWC',dilations=None,name=None)
tf.nn.conv3d_transpose(input,filters,output_shape,strides,padding='SAME',data_format='NDHWC',dilations=None,name=None)
tf.nn.conv_transpose(input,filters,output_shape,strides,padding='SAME',data_format=None,dilations=None,name=None)
tf.nn.convolution(input,filters,strides=None,padding='VALID',data_format=None,dilations=None,name=None)
tf.nn.crelu(features,axis=-1,name=None)
tf.nn.ctc_beam_search_decoder(inputs,sequence_length,beam_width=100,top_paths=1)
tf.nn.ctc_greedy_decoder(inputs,sequence_length,merge_repeated=True,blank_index=None)
tf.nn.ctc_loss(labels,logits,label_length,logit_length,logits_time_major=True,unique=None,blank_index=None,name=None)
tf.nn.ctc_unique_labels(labels,name=None)
tf.nn.depth_to_space(input,block_size,data_format='NHWC',name=None)
tf.nn.depthwise_conv2d(input,filter,strides,padding,data_format=None,dilations=None,name=None)
tf.nn.depthwise_conv2d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.nn.depthwise_conv2d_backprop_input(input_sizes,filter,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.nn.dilation2d(input,filters,strides,padding,data_format,dilations,name=None)
tf.nn.dropout(x,rate,noise_shape=None,seed=None,name=None)
tf.nn.elu(features,name=None)
tf.nn.embedding_lookup(params,ids,max_norm=None,name=None)
tf.nn.embedding_lookup_sparse(params,sp_ids,sp_weights,combiner=None,max_norm=None,name=None)
tf.nn.erosion2d(value,filters,strides,padding,data_format,dilations,name=None)
tf.nn.experimental.stateless_dropout(x,rate,seed,rng_alg=None,noise_shape=None,name=None)
tf.nn.fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1.0,num_reserved_ids=0,num_shards=1,shard=0,unigrams=(),seed=None,name=None)
tf.nn.fractional_avg_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,seed=0,name=None)
tf.nn.fractional_max_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,seed=0,name=None)
tf.nn.gelu(features,approximate=False,name=None)
tf.nn.in_top_k(targets,predictions,k,name=None)
tf.nn.isotonic_regression(inputs,decreasing=True,axis=-1)
tf.nn.l2_loss(t,name=None)
tf.nn.l2_normalize(x,axis=None,epsilon=1e-12,name=None,dim=None)
tf.nn.leaky_relu(features,alpha=0.2,name=None)
tf.nn.learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tf.nn.local_response_normalization(input,depth_radius=5,bias=1,alpha=1,beta=0.5,name=None)
tf.nn.log_poisson_loss(targets,log_input,compute_full_loss=False,name=None)
tf.nn.log_softmax(logits,axis=None,name=None)
tf.nn.lrn(input,depth_radius=5,bias=1,alpha=1,beta=0.5,name=None)
tf.nn.max_pool(input,ksize,strides,padding,data_format=None,name=None)
tf.nn.max_pool1d(input,ksize,strides,padding,data_format='NWC',name=None)
tf.nn.max_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)
tf.nn.max_pool3d(input,ksize,strides,padding,data_format='NDHWC',name=None)
tf.nn.max_pool_with_argmax(input,ksize,strides,padding,data_format='NHWC',output_dtype=tf.dtypes.int64,include_batch_in_index=False,name=None)
tf.nn.moments(x,axes,shift=None,keepdims=False,name=None)
tf.nn.nce_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=False,name='nce_loss')
tf.nn.normalize_moments(counts,mean_ss,variance_ss,shift,name=None)
tf.nn.pool(input,window_shape,pooling_type,strides=None,padding='VALID',data_format=None,dilations=None,name=None)
tf.nn.relu(features,name=None)
tf.nn.relu6(features,name=None)
tf.nn.safe_embedding_lookup_sparse(embedding_weights,sparse_ids,sparse_weights=None,combiner='mean',default_id=None,max_norm=None,name=None)
tf.nn.sampled_softmax_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=True,seed=None,name='sampled_softmax_loss')
tf.nn.scale_regularization_loss(regularization_loss)
tf.nn.selu(features,name=None)
tf.nn.separable_conv2d(input,depthwise_filter,pointwise_filter,strides,padding,data_format=None,dilations=None,name=None)
tf.nn.sigmoid(x,name=None)
tf.nn.sigmoid_cross_entropy_with_logits(labels=None,logits=None,name=None)
tf.nn.silu(features)
tf.nn.softmax(logits,axis=None,name=None)
tf.nn.softmax_cross_entropy_with_logits(labels,logits,axis=-1,name=None)
tf.nn.softplus(features,name=None)
tf.nn.softsign(features,name=None)
tf.nn.space_to_batch(input,block_shape,paddings,name=None)
tf.nn.space_to_depth(input,block_size,data_format='NHWC',name=None)
tf.nn.sparse_softmax_cross_entropy_with_logits(labels,logits,name=None)
tf.nn.sufficient_statistics(x,axes,shift=None,keepdims=False,name=None)
tf.nn.swish(features)
tf.nn.tanh(x,name=None)
tf.nn.top_k(input,k=1,sorted=True,name=None)
tf.nn.weighted_cross_entropy_with_logits(labels,logits,pos_weight,name=None)
tf.nn.weighted_moments(x,axes,frequency_weights,keepdims=False,name=None)
tf.nn.with_space_to_batch(input,dilation_rate,padding,op,filter_shape=None,spatial_dims=None,data_format=None)
tf.nn.zero_fraction(value,name=None)
tf.no_gradient(op_type)
tf.no_op(name=None)
tf.nondifferentiable_batch_function(num_batch_threads,max_batch_size,batch_timeout_micros,allowed_batch_sizes=None,max_enqueued_batches=10,autograph=True,enable_large_batch_splitting=True)
tf.norm(tensor,ord='euclidean',axis=None,keepdims=None,name=None)
tf.not_equal(x,y,name=None)
tf.numpy_function(func,inp,Tout,name=None)
tf.one_hot(indices,depth,on_value=None,off_value=None,axis=None,dtype=None,name=None)
tf.ones(shape,dtype=tf.dtypes.float32,name=None)
tf.ones_like(input,dtype=None,name=None)
tf.optimizers.Adadelta(learning_rate=0.001,rho=0.95,epsilon=1e-07,name='Adadelta',**kwargs)
tf.optimizers.Adagrad(learning_rate=0.001,initial_accumulator_value=0.1,epsilon=1e-07,name='Adagrad',**kwargs)
tf.optimizers.Adam(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,name='Adam',**kwargs)
tf.optimizers.Adamax(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Adamax',**kwargs)
tf.optimizers.Ftrl(learning_rate=0.001,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,name='Ftrl',l2_shrinkage_regularization_strength=0.0,beta=0.0,**kwargs)
tf.optimizers.Nadam(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Nadam',**kwargs)
tf.optimizers.Optimizer(name,gradient_aggregator=None,gradient_transformers=None,**kwargs)
tf.optimizers.RMSprop(learning_rate=0.001,rho=0.9,momentum=0.0,epsilon=1e-07,centered=False,name='RMSprop',**kwargs)
tf.optimizers.SGD(learning_rate=0.01,momentum=0.0,nesterov=False,name='SGD',**kwargs)
tf.optimizers.deserialize(config,custom_objects=None)
tf.optimizers.get(identifier)
tf.optimizers.schedules.CosineDecay(initial_learning_rate,decay_steps,alpha=0.0,name=None)
tf.optimizers.schedules.CosineDecayRestarts(initial_learning_rate,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name=None)
tf.optimizers.schedules.ExponentialDecay(initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)
tf.optimizers.schedules.InverseTimeDecay(initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)
tf.optimizers.schedules.PiecewiseConstantDecay(boundaries,values,name=None)
tf.optimizers.schedules.PolynomialDecay(initial_learning_rate,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name=None)
tf.optimizers.schedules.deserialize(config,custom_objects=None)
tf.optimizers.schedules.serialize(learning_rate_schedule)
tf.optimizers.serialize(optimizer)
tf.pad(tensor,paddings,mode='CONSTANT',constant_values=0,name=None)
tf.parallel_stack(values,name='parallel_stack')
tf.pow(x,y,name=None)
tf.print(*inputs,**kwargs)
tf.profiler.experimental.Profile(logdir,options=None)
tf.profiler.experimental.ProfilerOptions(host_tracer_level=2,python_tracer_level=0,device_tracer_level=1,delay_ms=None)
tf.profiler.experimental.Trace(name,**kwargs)
tf.profiler.experimental.client.monitor(service_addr,duration_ms,level=1)
tf.profiler.experimental.client.trace(service_addr,logdir,duration_ms,worker_list='',num_tracing_attempts=3,options=None)
tf.profiler.experimental.server.start(port)
tf.profiler.experimental.start(logdir,options=None)
tf.profiler.experimental.stop(save=True)
tf.py_function(func,inp,Tout,name=None)
tf.quantization.dequantize(input,min_range,max_range,mode='MIN_COMBINED',name=None,axis=None,narrow_range=False,dtype=tf.dtypes.float32)
tf.quantization.fake_quant_with_min_max_args(inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)
tf.quantization.fake_quant_with_min_max_args_gradient(gradients,inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)
tf.quantization.fake_quant_with_min_max_vars(inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.quantization.fake_quant_with_min_max_vars_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.quantization.fake_quant_with_min_max_vars_per_channel(inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.quantization.quantize(input,min_range,max_range,T,mode='MIN_COMBINED',round_mode='HALF_AWAY_FROM_ZERO',name=None,narrow_range=False,axis=None,ensure_minimum_range=0.01)
tf.quantization.quantize_and_dequantize(input,input_min,input_max,signed_input=True,num_bits=8,range_given=False,round_mode='HALF_TO_EVEN',name=None,narrow_range=False,axis=None)
tf.quantization.quantize_and_dequantize_v2(input,input_min,input_max,signed_input=True,num_bits=8,range_given=False,round_mode='HALF_TO_EVEN',name=None,narrow_range=False,axis=None)
tf.quantization.quantized_concat(concat_dim,values,input_mins,input_maxes,name=None)
tf.queue.FIFOQueue(capacity,dtypes,shapes=None,names=None,shared_name=None,name='fifo_queue')
tf.queue.PaddingFIFOQueue(capacity,dtypes,shapes,names=None,shared_name=None,name='padding_fifo_queue')
tf.queue.PriorityQueue(capacity,types,shapes=None,names=None,shared_name=None,name='priority_queue')
tf.queue.QueueBase(dtypes,shapes,names,queue_ref)
tf.queue.RandomShuffleQueue(capacity,min_after_dequeue,dtypes,shapes=None,names=None,seed=None,shared_name=None,name='random_shuffle_queue')
tf.ragged.boolean_mask(data,mask,name=None)
tf.ragged.constant(pylist,dtype=None,ragged_rank=None,inner_shape=None,name=None,row_splits_dtype=tf.dtypes.int64)
tf.ragged.cross(inputs,name=None)
tf.ragged.cross_hashed(inputs,num_buckets=0,hash_key=None,name=None)
tf.ragged.map_flat_values(op,*args,**kwargs)
tf.ragged.range(starts,limits=None,deltas=1,dtype=None,name=None,row_splits_dtype=tf.dtypes.int64)
tf.ragged.row_splits_to_segment_ids(splits,name=None,out_type=None)
tf.ragged.segment_ids_to_row_splits(segment_ids,num_segments=None,out_type=None,name=None)
tf.ragged.stack(values:typing.List[ragged_tensor.RaggedOrDense],axis=0,name=None)
tf.ragged.stack_dynamic_partitions(data,partitions,num_partitions,name=None)
tf.random.Generator(copy_from=None,state=None,alg=None)
tf.random.all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,name=None)
tf.random.categorical(logits,num_samples,dtype=None,seed=None,name=None)
tf.random.create_rng_state(seed,alg)
tf.random.experimental.Generator(copy_from=None,state=None,alg=None)
tf.random.experimental.create_rng_state(seed,alg)
tf.random.experimental.get_global_generator()
tf.random.experimental.set_global_generator(generator)
tf.random.experimental.stateless_fold_in(seed,data,alg='auto_select')
tf.random.experimental.stateless_split(seed,num=2,alg='auto_select')
tf.random.fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1.0,num_reserved_ids=0,num_shards=1,shard=0,unigrams=(),seed=None,name=None)
tf.random.gamma(shape,alpha,beta=None,dtype=tf.dtypes.float32,seed=None,name=None)
tf.random.get_global_generator()
tf.random.learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tf.random.log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tf.random.normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)
tf.random.poisson(shape,lam,dtype=tf.dtypes.float32,seed=None,name=None)
tf.random.set_global_generator(generator)
tf.random.set_seed(seed)
tf.random.shuffle(value,seed=None,name=None)
tf.random.stateless_binomial(shape,seed,counts,probs,output_dtype=tf.dtypes.int32,name=None)
tf.random.stateless_categorical(logits,num_samples,seed,dtype=tf.dtypes.int64,name=None)
tf.random.stateless_gamma(shape,seed,alpha,beta=None,dtype=tf.dtypes.float32,name=None)
tf.random.stateless_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None,alg='auto_select')
tf.random.stateless_parameterized_truncated_normal(shape,seed,means=0.0,stddevs=1.0,minvals=-2.0,maxvals=2.0,name=None)
tf.random.stateless_poisson(shape,seed,lam,dtype=tf.dtypes.int32,name=None)
tf.random.stateless_truncated_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None,alg='auto_select')
tf.random.stateless_uniform(shape,seed,minval=0,maxval=None,dtype=tf.dtypes.float32,name=None,alg='auto_select')
tf.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)
tf.random.uniform(shape,minval=0,maxval=None,dtype=tf.dtypes.float32,seed=None,name=None)
tf.random.uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)
tf.random_normal_initializer(mean=0.0,stddev=0.05,seed=None)
tf.random_uniform_initializer(minval=-0.05,maxval=0.05,seed=None)
tf.range(limit,delta=1,dtype=None,name='range')tf.range(start,limit,delta=1,dtype=None,name='range')
tf.rank(input,name=None)
tf.raw_ops.Abort(error_msg='',exit_without_error=False,name=None)
tf.raw_ops.Abs(x,name=None)
tf.raw_ops.AccumulateNV2(inputs,shape,name=None)
tf.raw_ops.AccumulatorApplyGradient(handle,local_step,gradient,name=None)
tf.raw_ops.AccumulatorNumAccumulated(handle,name=None)
tf.raw_ops.AccumulatorSetGlobalStep(handle,new_global_step,name=None)
tf.raw_ops.AccumulatorTakeGradient(handle,num_required,dtype,name=None)
tf.raw_ops.Acos(x,name=None)
tf.raw_ops.Acosh(x,name=None)
tf.raw_ops.Add(x,y,name=None)
tf.raw_ops.AddManySparseToTensorsMap(sparse_indices,sparse_values,sparse_shape,container='',shared_name='',name=None)
tf.raw_ops.AddN(inputs,name=None)
tf.raw_ops.AddSparseToTensorsMap(sparse_indices,sparse_values,sparse_shape,container='',shared_name='',name=None)
tf.raw_ops.AddV2(x,y,name=None)
tf.raw_ops.AdjustContrast(images,contrast_factor,min_value,max_value,name=None)
tf.raw_ops.AdjustContrastv2(images,contrast_factor,name=None)
tf.raw_ops.AdjustHue(images,delta,name=None)
tf.raw_ops.AdjustSaturation(images,scale,name=None)
tf.raw_ops.All(input,axis,keep_dims=False,name=None)
tf.raw_ops.AllCandidateSampler(true_classes,num_true,num_sampled,unique,seed=0,seed2=0,name=None)
tf.raw_ops.AllToAll(input,group_assignment,concat_dimension,split_dimension,split_count,name=None)
tf.raw_ops.Angle(input,Tout=tf.dtypes.float32,name=None)
tf.raw_ops.AnonymousHashTable(key_dtype,value_dtype,name=None)
tf.raw_ops.AnonymousIterator(output_types,output_shapes,name=None)
tf.raw_ops.AnonymousIteratorV2(output_types,output_shapes,name=None)
tf.raw_ops.AnonymousMemoryCache(name=None)
tf.raw_ops.AnonymousMultiDeviceIterator(devices,output_types,output_shapes,name=None)
tf.raw_ops.AnonymousRandomSeedGenerator(seed,seed2,name=None)
tf.raw_ops.AnonymousSeedGenerator(seed,seed2,reshuffle,name=None)
tf.raw_ops.Any(input,axis,keep_dims=False,name=None)
tf.raw_ops.ApplyAdaMax(var,m,v,beta1_power,lr,beta1,beta2,epsilon,grad,use_locking=False,name=None)
tf.raw_ops.ApplyAdadelta(var,accum,accum_update,lr,rho,epsilon,grad,use_locking=False,name=None)
tf.raw_ops.ApplyAdagrad(var,accum,lr,grad,use_locking=False,update_slots=True,name=None)
tf.raw_ops.ApplyAdagradDA(var,gradient_accumulator,gradient_squared_accumulator,grad,lr,l1,l2,global_step,use_locking=False,name=None)
tf.raw_ops.ApplyAdagradV2(var,accum,lr,epsilon,grad,use_locking=False,update_slots=True,name=None)
tf.raw_ops.ApplyAdam(var,m,v,beta1_power,beta2_power,lr,beta1,beta2,epsilon,grad,use_locking=False,use_nesterov=False,name=None)
tf.raw_ops.ApplyAddSign(var,m,lr,alpha,sign_decay,beta,grad,use_locking=False,name=None)
tf.raw_ops.ApplyCenteredRMSProp(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=False,name=None)
tf.raw_ops.ApplyFtrl(var,accum,linear,grad,lr,l1,l2,lr_power,use_locking=False,multiply_linear_by_lr=False,name=None)
tf.raw_ops.ApplyFtrlV2(var,accum,linear,grad,lr,l1,l2,l2_shrinkage,lr_power,use_locking=False,multiply_linear_by_lr=False,name=None)
tf.raw_ops.ApplyGradientDescent(var,alpha,delta,use_locking=False,name=None)
tf.raw_ops.ApplyMomentum(var,accum,lr,grad,momentum,use_locking=False,use_nesterov=False,name=None)
tf.raw_ops.ApplyPowerSign(var,m,lr,logbase,sign_decay,beta,grad,use_locking=False,name=None)
tf.raw_ops.ApplyProximalAdagrad(var,accum,lr,l1,l2,grad,use_locking=False,name=None)
tf.raw_ops.ApplyProximalGradientDescent(var,alpha,l1,l2,delta,use_locking=False,name=None)
tf.raw_ops.ApplyRMSProp(var,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=False,name=None)
tf.raw_ops.ApproximateEqual(x,y,tolerance=1e-05,name=None)
tf.raw_ops.ArgMax(input,dimension,output_type=tf.dtypes.int64,name=None)
tf.raw_ops.ArgMin(input,dimension,output_type=tf.dtypes.int64,name=None)
tf.raw_ops.AsString(input,precision=-1,scientific=False,shortest=False,width=-1,fill='',name=None)
tf.raw_ops.Asin(x,name=None)
tf.raw_ops.Asinh(x,name=None)
tf.raw_ops.Assert(condition,data,summarize=3,name=None)
tf.raw_ops.AssertCardinalityDataset(input_dataset,cardinality,output_types,output_shapes,name=None)
tf.raw_ops.AssertNextDataset(input_dataset,transformations,output_types,output_shapes,name=None)
tf.raw_ops.Assign(ref,value,validate_shape=True,use_locking=True,name=None)
tf.raw_ops.AssignAdd(ref,value,use_locking=False,name=None)
tf.raw_ops.AssignAddVariableOp(resource,value,name=None)
tf.raw_ops.AssignSub(ref,value,use_locking=False,name=None)
tf.raw_ops.AssignSubVariableOp(resource,value,name=None)
tf.raw_ops.AssignVariableOp(resource,value,name=None)
tf.raw_ops.AssignVariableXlaConcatND(resource,inputs,num_concats,paddings=[],name=None)
tf.raw_ops.Atan(x,name=None)
tf.raw_ops.Atan2(y,x,name=None)
tf.raw_ops.Atanh(x,name=None)
tf.raw_ops.AudioSpectrogram(input,window_size,stride,magnitude_squared=False,name=None)
tf.raw_ops.AudioSummary(tag,tensor,sample_rate,max_outputs=3,name=None)
tf.raw_ops.AudioSummaryV2(tag,tensor,sample_rate,max_outputs=3,name=None)
tf.raw_ops.AutoShardDataset(input_dataset,num_workers,index,output_types,output_shapes,auto_shard_policy=0,num_replicas=0,name=None)
tf.raw_ops.AvgPool(value,ksize,strides,padding,data_format='NHWC',name=None)
tf.raw_ops.AvgPool3D(input,ksize,strides,padding,data_format='NDHWC',name=None)
tf.raw_ops.AvgPool3DGrad(orig_input_shape,grad,ksize,strides,padding,data_format='NDHWC',name=None)
tf.raw_ops.AvgPoolGrad(orig_input_shape,grad,ksize,strides,padding,data_format='NHWC',name=None)
tf.raw_ops.BandedTriangularSolve(matrix,rhs,lower=True,adjoint=False,name=None)
tf.raw_ops.Barrier(component_types,shapes=[],capacity=-1,container='',shared_name='',name=None)
tf.raw_ops.BarrierClose(handle,cancel_pending_enqueues=False,name=None)
tf.raw_ops.BarrierIncompleteSize(handle,name=None)
tf.raw_ops.BarrierInsertMany(handle,keys,values,component_index,name=None)
tf.raw_ops.BarrierReadySize(handle,name=None)
tf.raw_ops.BarrierTakeMany(handle,num_elements,component_types,allow_small_batch=False,wait_for_incomplete=False,timeout_ms=-1,name=None)
tf.raw_ops.Batch(in_tensors,num_batch_threads,max_batch_size,batch_timeout_micros,grad_timeout_micros,max_enqueued_batches=10,allowed_batch_sizes=[],container='',shared_name='',batching_queue='',name=None)
tf.raw_ops.BatchCholesky(input,name=None)
tf.raw_ops.BatchCholeskyGrad(l,grad,name=None)
tf.raw_ops.BatchDataset(input_dataset,batch_size,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.BatchDatasetV2(input_dataset,batch_size,drop_remainder,output_types,output_shapes,parallel_copy=False,metadata='',name=None)
tf.raw_ops.BatchFFT(input,name=None)
tf.raw_ops.BatchFFT2D(input,name=None)
tf.raw_ops.BatchFFT3D(input,name=None)
tf.raw_ops.BatchFunction(in_tensors,captured_tensors,f,num_batch_threads,max_batch_size,batch_timeout_micros,Tout,max_enqueued_batches=10,allowed_batch_sizes=[],container='',shared_name='',batching_queue='',enable_large_batch_splitting=False,name=None)
tf.raw_ops.BatchIFFT(input,name=None)
tf.raw_ops.BatchIFFT2D(input,name=None)
tf.raw_ops.BatchIFFT3D(input,name=None)
tf.raw_ops.BatchMatMul(x,y,adj_x=False,adj_y=False,name=None)
tf.raw_ops.BatchMatMulV2(x,y,adj_x=False,adj_y=False,name=None)
tf.raw_ops.BatchMatMulV3(x,y,Tout,adj_x=False,adj_y=False,name=None)
tf.raw_ops.BatchMatrixBandPart(input,num_lower,num_upper,name=None)
tf.raw_ops.BatchMatrixDeterminant(input,name=None)
tf.raw_ops.BatchMatrixDiag(diagonal,name=None)
tf.raw_ops.BatchMatrixDiagPart(input,name=None)
tf.raw_ops.BatchMatrixInverse(input,adjoint=False,name=None)
tf.raw_ops.BatchMatrixSetDiag(input,diagonal,name=None)
tf.raw_ops.BatchMatrixSolve(matrix,rhs,adjoint=False,name=None)
tf.raw_ops.BatchMatrixSolveLs(matrix,rhs,l2_regularizer,fast=True,name=None)
tf.raw_ops.BatchMatrixTriangularSolve(matrix,rhs,lower=True,adjoint=False,name=None)
tf.raw_ops.BatchNormWithGlobalNormalization(t,m,v,beta,gamma,variance_epsilon,scale_after_normalization,name=None)
tf.raw_ops.BatchNormWithGlobalNormalizationGrad(t,m,v,gamma,backprop,variance_epsilon,scale_after_normalization,name=None)
tf.raw_ops.BatchSelfAdjointEig(input,name=None)
tf.raw_ops.BatchSelfAdjointEigV2(input,compute_v=True,name=None)
tf.raw_ops.BatchSvd(input,compute_uv=True,full_matrices=False,name=None)
tf.raw_ops.BatchToSpace(input,crops,block_size,name=None)
tf.raw_ops.BatchToSpaceND(input,block_shape,crops,name=None)
tf.raw_ops.BesselI0(x,name=None)
tf.raw_ops.BesselI0e(x,name=None)
tf.raw_ops.BesselI1(x,name=None)
tf.raw_ops.BesselI1e(x,name=None)
tf.raw_ops.BesselJ0(x,name=None)
tf.raw_ops.BesselJ1(x,name=None)
tf.raw_ops.BesselK0(x,name=None)
tf.raw_ops.BesselK0e(x,name=None)
tf.raw_ops.BesselK1(x,name=None)
tf.raw_ops.BesselK1e(x,name=None)
tf.raw_ops.BesselY0(x,name=None)
tf.raw_ops.BesselY1(x,name=None)
tf.raw_ops.Betainc(a,b,x,name=None)
tf.raw_ops.BiasAdd(value,bias,data_format='NHWC',name=None)
tf.raw_ops.BiasAddGrad(out_backprop,data_format='NHWC',name=None)
tf.raw_ops.BiasAddV1(value,bias,name=None)
tf.raw_ops.Bincount(arr,size,weights,name=None)
tf.raw_ops.Bitcast(input,type,name=None)
tf.raw_ops.BitwiseAnd(x,y,name=None)
tf.raw_ops.BitwiseOr(x,y,name=None)
tf.raw_ops.BitwiseXor(x,y,name=None)
tf.raw_ops.BlockLSTM(seq_len_max,x,cs_prev,h_prev,w,wci,wcf,wco,b,forget_bias=1,cell_clip=3,use_peephole=False,name=None)
tf.raw_ops.BlockLSTMGrad(seq_len_max,x,cs_prev,h_prev,w,wci,wcf,wco,b,i,cs,f,o,ci,co,h,cs_grad,h_grad,use_peephole,name=None)
tf.raw_ops.BlockLSTMGradV2(seq_len_max,x,cs_prev,h_prev,w,wci,wcf,wco,b,i,cs,f,o,ci,co,h,cs_grad,h_grad,use_peephole,name=None)
tf.raw_ops.BlockLSTMV2(seq_len_max,x,cs_prev,h_prev,w,wci,wcf,wco,b,cell_clip=0,use_peephole=False,name=None)
tf.raw_ops.BoostedTreesAggregateStats(node_ids,gradients,hessians,feature,max_splits,num_buckets,name=None)
tf.raw_ops.BoostedTreesBucketize(float_values,bucket_boundaries,name=None)
tf.raw_ops.BoostedTreesCalculateBestFeatureSplit(node_id_range,stats_summary,l1,l2,tree_complexity,min_node_weight,logits_dimension,split_type='inequality',name=None)
tf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2(node_id_range,stats_summaries_list,split_types,candidate_feature_ids,l1,l2,tree_complexity,min_node_weight,logits_dimension,name=None)
tf.raw_ops.BoostedTreesCalculateBestGainsPerFeature(node_id_range,stats_summary_list,l1,l2,tree_complexity,min_node_weight,max_splits,name=None)
tf.raw_ops.BoostedTreesCenterBias(tree_ensemble_handle,mean_gradients,mean_hessians,l1,l2,name=None)
tf.raw_ops.BoostedTreesCreateEnsemble(tree_ensemble_handle,stamp_token,tree_ensemble_serialized,name=None)
tf.raw_ops.BoostedTreesCreateQuantileStreamResource(quantile_stream_resource_handle,epsilon,num_streams,max_elements=1099511627776,name=None)
tf.raw_ops.BoostedTreesDeserializeEnsemble(tree_ensemble_handle,stamp_token,tree_ensemble_serialized,name=None)
tf.raw_ops.BoostedTreesEnsembleResourceHandleOp(container='',shared_name='',name=None)
tf.raw_ops.BoostedTreesExampleDebugOutputs(tree_ensemble_handle,bucketized_features,logits_dimension,name=None)
tf.raw_ops.BoostedTreesFlushQuantileSummaries(quantile_stream_resource_handle,num_features,name=None)
tf.raw_ops.BoostedTreesGetEnsembleStates(tree_ensemble_handle,name=None)
tf.raw_ops.BoostedTreesMakeQuantileSummaries(float_values,example_weights,epsilon,name=None)
tf.raw_ops.BoostedTreesMakeStatsSummary(node_ids,gradients,hessians,bucketized_features_list,max_splits,num_buckets,name=None)
tf.raw_ops.BoostedTreesPredict(tree_ensemble_handle,bucketized_features,logits_dimension,name=None)
tf.raw_ops.BoostedTreesQuantileStreamResourceAddSummaries(quantile_stream_resource_handle,summaries,name=None)
tf.raw_ops.BoostedTreesQuantileStreamResourceDeserialize(quantile_stream_resource_handle,bucket_boundaries,name=None)
tf.raw_ops.BoostedTreesQuantileStreamResourceFlush(quantile_stream_resource_handle,num_buckets,generate_quantiles=False,name=None)
tf.raw_ops.BoostedTreesQuantileStreamResourceGetBucketBoundaries(quantile_stream_resource_handle,num_features,name=None)
tf.raw_ops.BoostedTreesQuantileStreamResourceHandleOp(container='',shared_name='',name=None)
tf.raw_ops.BoostedTreesSerializeEnsemble(tree_ensemble_handle,name=None)
tf.raw_ops.BoostedTreesSparseAggregateStats(node_ids,gradients,hessians,feature_indices,feature_values,feature_shape,max_splits,num_buckets,name=None)
tf.raw_ops.BoostedTreesSparseCalculateBestFeatureSplit(node_id_range,stats_summary_indices,stats_summary_values,stats_summary_shape,l1,l2,tree_complexity,min_node_weight,logits_dimension,split_type='inequality',name=None)
tf.raw_ops.BoostedTreesTrainingPredict(tree_ensemble_handle,cached_tree_ids,cached_node_ids,bucketized_features,logits_dimension,name=None)
tf.raw_ops.BoostedTreesUpdateEnsemble(tree_ensemble_handle,feature_ids,node_ids,gains,thresholds,left_node_contribs,right_node_contribs,max_depth,learning_rate,pruning_mode,name=None)
tf.raw_ops.BoostedTreesUpdateEnsembleV2(tree_ensemble_handle,feature_ids,dimension_ids,node_ids,gains,thresholds,left_node_contribs,right_node_contribs,split_types,max_depth,learning_rate,pruning_mode,logits_dimension=1,name=None)
tf.raw_ops.BroadcastArgs(s0,s1,name=None)
tf.raw_ops.BroadcastGradientArgs(s0,s1,name=None)
tf.raw_ops.BroadcastTo(input,shape,name=None)
tf.raw_ops.Bucketize(input,boundaries,name=None)
tf.raw_ops.BytesProducedStatsDataset(input_dataset,tag,output_types,output_shapes,name=None)
tf.raw_ops.CSRSparseMatrixComponents(csr_sparse_matrix,index,type,name=None)
tf.raw_ops.CSRSparseMatrixToDense(sparse_input,type,name=None)
tf.raw_ops.CSRSparseMatrixToSparseTensor(sparse_matrix,type,name=None)
tf.raw_ops.CSVDataset(filenames,compression_type,buffer_size,header,field_delim,use_quote_delim,na_value,select_cols,record_defaults,output_shapes,name=None)
tf.raw_ops.CSVDatasetV2(filenames,compression_type,buffer_size,header,field_delim,use_quote_delim,na_value,select_cols,record_defaults,exclude_cols,output_shapes,name=None)
tf.raw_ops.CTCBeamSearchDecoder(inputs,sequence_length,beam_width,top_paths,merge_repeated=True,name=None)
tf.raw_ops.CTCGreedyDecoder(inputs,sequence_length,merge_repeated=False,blank_index=-1,name=None)
tf.raw_ops.CTCLoss(inputs,labels_indices,labels_values,sequence_length,preprocess_collapse_repeated=False,ctc_merge_repeated=True,ignore_longer_outputs_than_inputs=False,name=None)
tf.raw_ops.CTCLossV2(inputs,labels_indices,labels_values,sequence_length,preprocess_collapse_repeated=False,ctc_merge_repeated=True,ignore_longer_outputs_than_inputs=False,name=None)
tf.raw_ops.CacheDataset(input_dataset,filename,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.CacheDatasetV2(input_dataset,filename,cache,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.Case(branch_index,input,Tout,branches,output_shapes=[],name=None)
tf.raw_ops.Cast(x,DstT,Truncate=False,name=None)
tf.raw_ops.Ceil(x,name=None)
tf.raw_ops.CheckNumerics(tensor,message,name=None)
tf.raw_ops.CheckNumericsV2(tensor,message,name=None)
tf.raw_ops.Cholesky(input,name=None)
tf.raw_ops.CholeskyGrad(l,grad,name=None)
tf.raw_ops.ChooseFastestBranchDataset(input_dataset,ratio_numerator,ratio_denominator,other_arguments,num_elements_per_branch,branches,other_arguments_lengths,output_types,output_shapes,name=None)
tf.raw_ops.ChooseFastestDataset(input_datasets,num_experiments,output_types,output_shapes,name=None)
tf.raw_ops.ClipByValue(t,clip_value_min,clip_value_max,name=None)
tf.raw_ops.CloseSummaryWriter(writer,name=None)
tf.raw_ops.CollectiveAllToAllV3(input,communicator,group_assignment,timeout_seconds=0,name=None)
tf.raw_ops.CollectiveBcastRecv(T,group_size,group_key,instance_key,shape,communication_hint='auto',timeout_seconds=0,name=None)
tf.raw_ops.CollectiveBcastRecvV2(group_size,group_key,instance_key,shape,T,communication_hint='auto',timeout_seconds=0,name=None)
tf.raw_ops.CollectiveBcastSend(input,group_size,group_key,instance_key,shape,communication_hint='auto',timeout_seconds=0,name=None)
tf.raw_ops.CollectiveBcastSendV2(input,group_size,group_key,instance_key,communication_hint='auto',timeout_seconds=0,name=None)
tf.raw_ops.CollectiveGather(input,group_size,group_key,instance_key,shape,communication_hint='auto',timeout_seconds=0,name=None)
tf.raw_ops.CollectiveGatherV2(input,group_size,group_key,instance_key,ordering_token,communication_hint='auto',timeout_seconds=0,name=None)
tf.raw_ops.CollectiveInitializeCommunicator(group_key,rank,group_size,communication_hint='auto',timeout_seconds=0,name=None)
tf.raw_ops.CollectivePermute(input,source_target_pairs,name=None)
tf.raw_ops.CollectiveReduce(input,group_size,group_key,instance_key,merge_op,final_op,subdiv_offsets,wait_for=[],communication_hint='auto',timeout_seconds=0,name=None)
tf.raw_ops.CollectiveReduceV2(input,group_size,group_key,instance_key,ordering_token,merge_op,final_op,communication_hint='auto',timeout_seconds=0,max_subdivs_per_device=-1,name=None)
tf.raw_ops.CollectiveReduceV3(input,communicator,group_assignment,reduction,timeout_seconds=0,name=None)
tf.raw_ops.CombinedNonMaxSuppression(boxes,scores,max_output_size_per_class,max_total_size,iou_threshold,score_threshold,pad_per_class=False,clip_boxes=True,name=None)
tf.raw_ops.Complex(real,imag,Tout=tf.dtypes.complex64,name=None)
tf.raw_ops.ComplexAbs(x,Tout=tf.dtypes.float32,name=None)
tf.raw_ops.CompositeTensorVariantFromComponents(components,metadata,name=None)
tf.raw_ops.CompositeTensorVariantToComponents(encoded,metadata,Tcomponents,name=None)
tf.raw_ops.CompressElement(components,name=None)
tf.raw_ops.ComputeAccidentalHits(true_classes,sampled_candidates,num_true,seed=0,seed2=0,name=None)
tf.raw_ops.ComputeBatchSize(input_dataset,name=None)
tf.raw_ops.Concat(concat_dim,values,name=None)
tf.raw_ops.ConcatOffset(concat_dim,shape,name=None)
tf.raw_ops.ConcatV2(values,axis,name=None)
tf.raw_ops.ConcatenateDataset(input_dataset,another_dataset,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.ConditionalAccumulator(dtype,shape,container='',shared_name='',reduction_type='MEAN',name=None)
tf.raw_ops.ConfigureDistributedTPU(embedding_config='',tpu_embedding_config='',is_global_init=False,enable_whole_mesh_compilations=False,compilation_failure_closes_chips=True,tpu_cancellation_closes_chips=0,name=None)
tf.raw_ops.ConfigureTPUEmbedding(config,name=None)
tf.raw_ops.Conj(input,name=None)
tf.raw_ops.ConjugateTranspose(x,perm,name=None)
tf.raw_ops.Const(value,dtype,name=None)
tf.raw_ops.ConsumeMutexLock(mutex_lock,name=None)
tf.raw_ops.ControlTrigger(name=None)
tf.raw_ops.Conv2D(input,filter,strides,padding,use_cudnn_on_gpu=True,explicit_paddings=[],data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.raw_ops.Conv2DBackpropFilter(input,filter_sizes,out_backprop,strides,padding,use_cudnn_on_gpu=True,explicit_paddings=[],data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.raw_ops.Conv2DBackpropInput(input_sizes,filter,out_backprop,strides,padding,use_cudnn_on_gpu=True,explicit_paddings=[],data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.raw_ops.Conv3D(input,filter,strides,padding,data_format='NDHWC',dilations=[1,1,1,1,1],name=None)
tf.raw_ops.Conv3DBackpropFilter(input,filter,out_backprop,strides,padding,dilations=[1,1,1,1,1],name=None)
tf.raw_ops.Conv3DBackpropFilterV2(input,filter_sizes,out_backprop,strides,padding,data_format='NDHWC',dilations=[1,1,1,1,1],name=None)
tf.raw_ops.Conv3DBackpropInput(input,filter,out_backprop,strides,padding,dilations=[1,1,1,1,1],name=None)
tf.raw_ops.Conv3DBackpropInputV2(input_sizes,filter,out_backprop,strides,padding,data_format='NDHWC',dilations=[1,1,1,1,1],name=None)
tf.raw_ops.Copy(input,tensor_name='',debug_ops_spec=[],name=None)
tf.raw_ops.CopyHost(input,tensor_name='',debug_ops_spec=[],name=None)
tf.raw_ops.Cos(x,name=None)
tf.raw_ops.Cosh(x,name=None)
tf.raw_ops.CountUpTo(ref,limit,name=None)
tf.raw_ops.CreateSummaryDbWriter(writer,db_uri,experiment_name,run_name,user_name,name=None)
tf.raw_ops.CreateSummaryFileWriter(writer,logdir,max_queue,flush_millis,filename_suffix,name=None)
tf.raw_ops.CropAndResize(image,boxes,box_ind,crop_size,method='bilinear',extrapolation_value=0,name=None)
tf.raw_ops.CropAndResizeGradBoxes(grads,image,boxes,box_ind,method='bilinear',name=None)
tf.raw_ops.CropAndResizeGradImage(grads,boxes,box_ind,image_size,T,method='bilinear',name=None)
tf.raw_ops.Cross(a,b,name=None)
tf.raw_ops.CrossReplicaSum(input,group_assignment,name=None)
tf.raw_ops.CudnnRNN(input,input_h,input_c,params,rnn_mode='lstm',input_mode='linear_input',direction='unidirectional',dropout=0,seed=0,seed2=0,is_training=True,name=None)
tf.raw_ops.CudnnRNNBackprop(input,input_h,input_c,params,output,output_h,output_c,output_backprop,output_h_backprop,output_c_backprop,reserve_space,rnn_mode='lstm',input_mode='linear_input',direction='unidirectional',dropout=0,seed=0,seed2=0,name=None)
tf.raw_ops.CudnnRNNBackpropV2(input,input_h,input_c,params,output,output_h,output_c,output_backprop,output_h_backprop,output_c_backprop,reserve_space,host_reserved,rnn_mode='lstm',input_mode='linear_input',direction='unidirectional',dropout=0,seed=0,seed2=0,name=None)
tf.raw_ops.CudnnRNNBackpropV3(input,input_h,input_c,params,sequence_lengths,output,output_h,output_c,output_backprop,output_h_backprop,output_c_backprop,reserve_space,host_reserved,rnn_mode='lstm',input_mode='linear_input',direction='unidirectional',dropout=0,seed=0,seed2=0,num_proj=0,time_major=True,name=None)
tf.raw_ops.CudnnRNNCanonicalToParams(num_layers,num_units,input_size,weights,biases,rnn_mode='lstm',input_mode='linear_input',direction='unidirectional',dropout=0,seed=0,seed2=0,name=None)
tf.raw_ops.CudnnRNNCanonicalToParamsV2(num_layers,num_units,input_size,weights,biases,rnn_mode='lstm',input_mode='linear_input',direction='unidirectional',dropout=0,seed=0,seed2=0,num_proj=0,name=None)
tf.raw_ops.CudnnRNNParamsSize(num_layers,num_units,input_size,T,S,rnn_mode='lstm',input_mode='linear_input',direction='unidirectional',dropout=0,seed=0,seed2=0,num_proj=0,name=None)
tf.raw_ops.CudnnRNNParamsToCanonical(num_layers,num_units,input_size,params,num_params,rnn_mode='lstm',input_mode='linear_input',direction='unidirectional',dropout=0,seed=0,seed2=0,name=None)
tf.raw_ops.CudnnRNNParamsToCanonicalV2(num_layers,num_units,input_size,params,num_params_weights,num_params_biases,rnn_mode='lstm',input_mode='linear_input',direction='unidirectional',dropout=0,seed=0,seed2=0,num_proj=0,name=None)
tf.raw_ops.CudnnRNNV2(input,input_h,input_c,params,rnn_mode='lstm',input_mode='linear_input',direction='unidirectional',dropout=0,seed=0,seed2=0,is_training=True,name=None)
tf.raw_ops.CudnnRNNV3(input,input_h,input_c,params,sequence_lengths,rnn_mode='lstm',input_mode='linear_input',direction='unidirectional',dropout=0,seed=0,seed2=0,num_proj=0,is_training=True,time_major=True,name=None)
tf.raw_ops.Cumprod(x,axis,exclusive=False,reverse=False,name=None)
tf.raw_ops.Cumsum(x,axis,exclusive=False,reverse=False,name=None)
tf.raw_ops.CumulativeLogsumexp(x,axis,exclusive=False,reverse=False,name=None)
tf.raw_ops.DataFormatDimMap(x,src_format='NHWC',dst_format='NCHW',name=None)
tf.raw_ops.DataFormatVecPermute(x,src_format='NHWC',dst_format='NCHW',name=None)
tf.raw_ops.DataServiceDataset(dataset_id,processing_mode,address,protocol,job_name,max_outstanding_requests,iteration_counter,output_types,output_shapes,task_refresh_interval_hint_ms=-1,data_transfer_protocol='',target_workers='AUTO',name=None)
tf.raw_ops.DataServiceDatasetV2(dataset_id,processing_mode,address,protocol,job_name,consumer_index,num_consumers,max_outstanding_requests,iteration_counter,output_types,output_shapes,task_refresh_interval_hint_ms=-1,data_transfer_protocol='',target_workers='AUTO',name=None)
tf.raw_ops.DatasetCardinality(input_dataset,name=None)
tf.raw_ops.DatasetFromGraph(graph_def,name=None)
tf.raw_ops.DatasetToGraph(input_dataset,stateful_whitelist=[],allow_stateful=False,strip_device_assignment=False,name=None)
tf.raw_ops.DatasetToGraphV2(input_dataset,external_state_policy=0,strip_device_assignment=False,name=None)
tf.raw_ops.DatasetToSingleElement(dataset,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.DatasetToTFRecord(input_dataset,filename,compression_type,name=None)
tf.raw_ops.Dawsn(x,name=None)
tf.raw_ops.DebugGradientIdentity(input,name=None)
tf.raw_ops.DebugGradientRefIdentity(input,name=None)
tf.raw_ops.DebugIdentity(input,device_name='',tensor_name='',debug_urls=[],gated_grpc=False,name=None)
tf.raw_ops.DebugIdentityV2(input,tfdbg_context_id='',op_name='',output_slot=-1,tensor_debug_mode=-1,debug_urls=[],circular_buffer_size=1000,tfdbg_run_id='',name=None)
tf.raw_ops.DebugNanCount(input,device_name='',tensor_name='',debug_urls=[],gated_grpc=False,name=None)
tf.raw_ops.DebugNumericSummary(input,device_name='',tensor_name='',debug_urls=[],lower_bound=float('-inf'),upper_bound=float('inf'),mute_if_healthy=False,gated_grpc=False,name=None)
tf.raw_ops.DebugNumericSummaryV2(input,output_dtype=tf.dtypes.float32,tensor_debug_mode=-1,tensor_id=-1,name=None)
tf.raw_ops.DecodeAndCropJpeg(contents,crop_window,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)
tf.raw_ops.DecodeBase64(input,name=None)
tf.raw_ops.DecodeBmp(contents,channels=0,name=None)
tf.raw_ops.DecodeCSV(records,record_defaults,field_delim=',',use_quote_delim=True,na_value='',select_cols=[],name=None)
tf.raw_ops.DecodeCompressed(bytes,compression_type='',name=None)
tf.raw_ops.DecodeGif(contents,name=None)
tf.raw_ops.DecodeImage(contents,channels=0,dtype=tf.dtypes.uint8,expand_animations=True,name=None)
tf.raw_ops.DecodeJSONExample(json_examples,name=None)
tf.raw_ops.DecodeJpeg(contents,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)
tf.raw_ops.DecodePaddedRaw(input_bytes,fixed_length,out_type,little_endian=True,name=None)
tf.raw_ops.DecodePng(contents,channels=0,dtype=tf.dtypes.uint8,name=None)
tf.raw_ops.DecodeProtoV2(bytes,message_type,field_names,output_types,descriptor_source='local://',message_format='binary',sanitize=False,name=None)
tf.raw_ops.DecodeRaw(bytes,out_type,little_endian=True,name=None)
tf.raw_ops.DecodeWav(contents,desired_channels=-1,desired_samples=-1,name=None)
tf.raw_ops.DeepCopy(x,name=None)
tf.raw_ops.DeleteIterator(handle,deleter,name=None)
tf.raw_ops.DeleteMemoryCache(handle,deleter,name=None)
tf.raw_ops.DeleteMultiDeviceIterator(multi_device_iterator,iterators,deleter,name=None)
tf.raw_ops.DeleteRandomSeedGenerator(handle,deleter,name=None)
tf.raw_ops.DeleteSeedGenerator(handle,deleter,name=None)
tf.raw_ops.DeleteSessionTensor(handle,name=None)
tf.raw_ops.DenseBincount(input,size,weights,binary_output=False,name=None)
tf.raw_ops.DenseCountSparseOutput(values,weights,binary_output,minlength=-1,maxlength=-1,name=None)
tf.raw_ops.DenseToCSRSparseMatrix(dense_input,indices,name=None)
tf.raw_ops.DenseToDenseSetOperation(set1,set2,set_operation,validate_indices=True,name=None)
tf.raw_ops.DenseToSparseBatchDataset(input_dataset,batch_size,row_shape,output_types,output_shapes,name=None)
tf.raw_ops.DenseToSparseSetOperation(set1,set2_indices,set2_values,set2_shape,set_operation,validate_indices=True,name=None)
tf.raw_ops.DepthToSpace(input,block_size,data_format='NHWC',name=None)
tf.raw_ops.DepthwiseConv2dNative(input,filter,strides,padding,explicit_paddings=[],data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.raw_ops.DepthwiseConv2dNativeBackpropFilter(input,filter_sizes,out_backprop,strides,padding,explicit_paddings=[],data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.raw_ops.DepthwiseConv2dNativeBackpropInput(input_sizes,filter,out_backprop,strides,padding,explicit_paddings=[],data_format='NHWC',dilations=[1,1,1,1],name=None)
tf.raw_ops.Dequantize(input,min_range,max_range,mode='MIN_COMBINED',narrow_range=False,axis=-1,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.DeserializeIterator(resource_handle,serialized,name=None)
tf.raw_ops.DeserializeManySparse(serialized_sparse,dtype,name=None)
tf.raw_ops.DeserializeSparse(serialized_sparse,dtype,name=None)
tf.raw_ops.DestroyResourceOp(resource,ignore_lookup_error=True,name=None)
tf.raw_ops.DestroyTemporaryVariable(ref,var_name,name=None)
tf.raw_ops.DeviceIndex(device_names,name=None)
tf.raw_ops.Diag(diagonal,name=None)
tf.raw_ops.DiagPart(input,name=None)
tf.raw_ops.Digamma(x,name=None)
tf.raw_ops.Dilation2D(input,filter,strides,rates,padding,name=None)
tf.raw_ops.Dilation2DBackpropFilter(input,filter,out_backprop,strides,rates,padding,name=None)
tf.raw_ops.Dilation2DBackpropInput(input,filter,out_backprop,strides,rates,padding,name=None)
tf.raw_ops.DirectedInterleaveDataset(selector_input_dataset,data_input_datasets,output_types,output_shapes,stop_on_empty_dataset=False,name=None)
tf.raw_ops.Div(x,y,name=None)
tf.raw_ops.DivNoNan(x,y,name=None)
tf.raw_ops.DrawBoundingBoxes(images,boxes,name=None)
tf.raw_ops.DrawBoundingBoxesV2(images,boxes,colors,name=None)
tf.raw_ops.DummyIterationCounter(name=None)
tf.raw_ops.DummyMemoryCache(name=None)
tf.raw_ops.DummySeedGenerator(name=None)
tf.raw_ops.DynamicPartition(data,partitions,num_partitions,name=None)
tf.raw_ops.DynamicStitch(indices,data,name=None)
tf.raw_ops.EagerPyFunc(input,token,Tout,is_async=False,name=None)
tf.raw_ops.EditDistance(hypothesis_indices,hypothesis_values,hypothesis_shape,truth_indices,truth_values,truth_shape,normalize=True,name=None)
tf.raw_ops.Eig(input,Tout,compute_v=True,name=None)
tf.raw_ops.Einsum(inputs,equation,name=None)
tf.raw_ops.Elu(features,name=None)
tf.raw_ops.EluGrad(gradients,outputs,name=None)
tf.raw_ops.Empty(shape,dtype,init=False,name=None)
tf.raw_ops.EmptyTensorList(element_shape,max_num_elements,element_dtype,name=None)
tf.raw_ops.EncodeBase64(input,pad=False,name=None)
tf.raw_ops.EncodeJpeg(image,format='',quality=95,progressive=False,optimize_size=False,chroma_downsampling=True,density_unit='in',x_density=300,y_density=300,xmp_metadata='',name=None)
tf.raw_ops.EncodeJpegVariableQuality(images,quality,name=None)
tf.raw_ops.EncodePng(image,compression=-1,name=None)
tf.raw_ops.EncodeProto(sizes,values,field_names,message_type,descriptor_source='local://',name=None)
tf.raw_ops.EncodeWav(audio,sample_rate,name=None)
tf.raw_ops.EnqueueTPUEmbeddingIntegerBatch(batch,mode_override,device_ordinal=-1,name=None)
tf.raw_ops.EnqueueTPUEmbeddingRaggedTensorBatch(sample_splits,embedding_indices,aggregation_weights,mode_override,table_ids,device_ordinal=-1,combiners=[],max_sequence_lengths=[],num_features=[],name=None)
tf.raw_ops.EnqueueTPUEmbeddingSparseBatch(sample_indices,embedding_indices,aggregation_weights,mode_override,device_ordinal=-1,combiners=[],name=None)
tf.raw_ops.EnqueueTPUEmbeddingSparseTensorBatch(sample_indices,embedding_indices,aggregation_weights,mode_override,table_ids,device_ordinal=-1,combiners=[],max_sequence_lengths=[],num_features=[],name=None)
tf.raw_ops.EnsureShape(input,shape,name=None)
tf.raw_ops.Enter(data,frame_name,is_constant=False,parallel_iterations=10,name=None)
tf.raw_ops.Equal(x,y,incompatible_shape_error=True,name=None)
tf.raw_ops.Erf(x,name=None)
tf.raw_ops.Erfc(x,name=None)
tf.raw_ops.Erfinv(x,name=None)
tf.raw_ops.EuclideanNorm(input,axis,keep_dims=False,name=None)
tf.raw_ops.Exit(data,name=None)
tf.raw_ops.Exp(x,name=None)
tf.raw_ops.ExpandDims(input,axis,name=None)
tf.raw_ops.ExperimentalAssertNextDataset(input_dataset,transformations,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalAutoShardDataset(input_dataset,num_workers,index,output_types,output_shapes,auto_shard_policy=0,name=None)
tf.raw_ops.ExperimentalBytesProducedStatsDataset(input_dataset,tag,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalCSVDataset(filenames,compression_type,buffer_size,header,field_delim,use_quote_delim,na_value,select_cols,record_defaults,output_shapes,name=None)
tf.raw_ops.ExperimentalChooseFastestDataset(input_datasets,num_experiments,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalDatasetCardinality(input_dataset,name=None)
tf.raw_ops.ExperimentalDatasetToTFRecord(input_dataset,filename,compression_type,name=None)
tf.raw_ops.ExperimentalDenseToSparseBatchDataset(input_dataset,batch_size,row_shape,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalDirectedInterleaveDataset(selector_input_dataset,data_input_datasets,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalGroupByReducerDataset(input_dataset,key_func_other_arguments,init_func_other_arguments,reduce_func_other_arguments,finalize_func_other_arguments,key_func,init_func,reduce_func,finalize_func,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalGroupByWindowDataset(input_dataset,key_func_other_arguments,reduce_func_other_arguments,window_size_func_other_arguments,key_func,reduce_func,window_size_func,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalIgnoreErrorsDataset(input_dataset,output_types,output_shapes,log_warning=False,name=None)
tf.raw_ops.ExperimentalIteratorGetDevice(resource,name=None)
tf.raw_ops.ExperimentalLMDBDataset(filenames,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalLatencyStatsDataset(input_dataset,tag,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalMapAndBatchDataset(input_dataset,other_arguments,batch_size,num_parallel_calls,drop_remainder,f,output_types,output_shapes,preserve_cardinality=False,name=None)
tf.raw_ops.ExperimentalMapDataset(input_dataset,other_arguments,f,output_types,output_shapes,use_inter_op_parallelism=True,preserve_cardinality=False,name=None)
tf.raw_ops.ExperimentalMatchingFilesDataset(patterns,name=None)
tf.raw_ops.ExperimentalMaxIntraOpParallelismDataset(input_dataset,max_intra_op_parallelism,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalNonSerializableDataset(input_dataset,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalParallelInterleaveDataset(input_dataset,other_arguments,cycle_length,block_length,sloppy,buffer_output_elements,prefetch_input_elements,f,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalParseExampleDataset(input_dataset,num_parallel_calls,dense_defaults,sparse_keys,dense_keys,sparse_types,dense_shapes,output_types,output_shapes,sloppy=False,name=None)
tf.raw_ops.ExperimentalPrivateThreadPoolDataset(input_dataset,num_threads,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalRandomDataset(seed,seed2,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalRebatchDataset(input_dataset,num_replicas,output_types,output_shapes,use_fallback=True,name=None)
tf.raw_ops.ExperimentalScanDataset(input_dataset,initial_state,other_arguments,f,output_types,output_shapes,preserve_cardinality=False,name=None)
tf.raw_ops.ExperimentalSetStatsAggregatorDataset(input_dataset,stats_aggregator,tag,counter_prefix,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalSleepDataset(input_dataset,sleep_microseconds,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalSlidingWindowDataset(input_dataset,window_size,window_shift,window_stride,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalSqlDataset(driver_name,data_source_name,query,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalStatsAggregatorHandle(container='',shared_name='',name=None)
tf.raw_ops.ExperimentalStatsAggregatorSummary(iterator,name=None)
tf.raw_ops.ExperimentalTakeWhileDataset(input_dataset,other_arguments,predicate,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalThreadPoolDataset(input_dataset,thread_pool,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalThreadPoolHandle(num_threads,display_name,max_intra_op_parallelism=1,container='',shared_name='',name=None)
tf.raw_ops.ExperimentalUnbatchDataset(input_dataset,output_types,output_shapes,name=None)
tf.raw_ops.ExperimentalUniqueDataset(input_dataset,output_types,output_shapes,name=None)
tf.raw_ops.Expint(x,name=None)
tf.raw_ops.Expm1(x,name=None)
tf.raw_ops.ExtractGlimpse(input,size,offsets,centered=True,normalized=True,uniform_noise=True,noise='uniform',name=None)
tf.raw_ops.ExtractGlimpseV2(input,size,offsets,centered=True,normalized=True,uniform_noise=True,noise='uniform',name=None)
tf.raw_ops.ExtractImagePatches(images,ksizes,strides,rates,padding,name=None)
tf.raw_ops.ExtractJpegShape(contents,output_type=tf.dtypes.int32,name=None)
tf.raw_ops.ExtractVolumePatches(input,ksizes,strides,padding,name=None)
tf.raw_ops.FFT(input,name=None)
tf.raw_ops.FFT2D(input,name=None)
tf.raw_ops.FFT3D(input,name=None)
tf.raw_ops.FIFOQueue(component_types,shapes=[],capacity=-1,container='',shared_name='',name=None)
tf.raw_ops.FIFOQueueV2(component_types,shapes=[],capacity=-1,container='',shared_name='',name=None)
tf.raw_ops.Fact(name=None)
tf.raw_ops.FakeParam(dtype,shape,name=None)
tf.raw_ops.FakeQuantWithMinMaxArgs(inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)
tf.raw_ops.FakeQuantWithMinMaxArgsGradient(gradients,inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)
tf.raw_ops.FakeQuantWithMinMaxVars(inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.raw_ops.FakeQuantWithMinMaxVarsGradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.raw_ops.FakeQuantWithMinMaxVarsPerChannel(inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.raw_ops.FakeQuantWithMinMaxVarsPerChannelGradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)
tf.raw_ops.FakeQueue(resource,name=None)
tf.raw_ops.Fill(dims,value,name=None)
tf.raw_ops.FilterByLastComponentDataset(input_dataset,output_types,output_shapes,name=None)
tf.raw_ops.FilterDataset(input_dataset,other_arguments,predicate,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.FinalizeDataset(input_dataset,output_types,output_shapes,has_captured_ref=False,name=None)
tf.raw_ops.Fingerprint(data,method,name=None)
tf.raw_ops.FixedLengthRecordDataset(filenames,header_bytes,record_bytes,footer_bytes,buffer_size,metadata='',name=None)
tf.raw_ops.FixedLengthRecordDatasetV2(filenames,header_bytes,record_bytes,footer_bytes,buffer_size,compression_type,metadata='',name=None)
tf.raw_ops.FixedLengthRecordReader(record_bytes,header_bytes=0,footer_bytes=0,hop_bytes=0,container='',shared_name='',name=None)
tf.raw_ops.FixedLengthRecordReaderV2(record_bytes,header_bytes=0,footer_bytes=0,hop_bytes=0,container='',shared_name='',encoding='',name=None)
tf.raw_ops.FixedUnigramCandidateSampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1,num_reserved_ids=0,num_shards=1,shard=0,unigrams=[],seed=0,seed2=0,name=None)
tf.raw_ops.FlatMapDataset(input_dataset,other_arguments,f,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.Floor(x,name=None)
tf.raw_ops.FloorDiv(x,y,name=None)
tf.raw_ops.FloorMod(x,y,name=None)
tf.raw_ops.FlushSummaryWriter(writer,name=None)
tf.raw_ops.FractionalAvgPool(value,pooling_ratio,pseudo_random=False,overlapping=False,deterministic=False,seed=0,seed2=0,name=None)
tf.raw_ops.FractionalAvgPoolGrad(orig_input_tensor_shape,out_backprop,row_pooling_sequence,col_pooling_sequence,overlapping=False,name=None)
tf.raw_ops.FractionalMaxPool(value,pooling_ratio,pseudo_random=False,overlapping=False,deterministic=False,seed=0,seed2=0,name=None)
tf.raw_ops.FractionalMaxPoolGrad(orig_input,orig_output,out_backprop,row_pooling_sequence,col_pooling_sequence,overlapping=False,name=None)
tf.raw_ops.FresnelCos(x,name=None)
tf.raw_ops.FresnelSin(x,name=None)
tf.raw_ops.FusedBatchNorm(x,scale,offset,mean,variance,epsilon=0.0001,exponential_avg_factor=1,data_format='NHWC',is_training=True,name=None)
tf.raw_ops.FusedBatchNormGrad(y_backprop,x,scale,reserve_space_1,reserve_space_2,epsilon=0.0001,data_format='NHWC',is_training=True,name=None)
tf.raw_ops.FusedBatchNormGradV2(y_backprop,x,scale,reserve_space_1,reserve_space_2,epsilon=0.0001,data_format='NHWC',is_training=True,name=None)
tf.raw_ops.FusedBatchNormGradV3(y_backprop,x,scale,reserve_space_1,reserve_space_2,reserve_space_3,epsilon=0.0001,data_format='NHWC',is_training=True,name=None)
tf.raw_ops.FusedBatchNormV2(x,scale,offset,mean,variance,epsilon=0.0001,exponential_avg_factor=1,data_format='NHWC',is_training=True,name=None)
tf.raw_ops.FusedBatchNormV3(x,scale,offset,mean,variance,epsilon=0.0001,exponential_avg_factor=1,data_format='NHWC',is_training=True,name=None)
tf.raw_ops.FusedPadConv2D(input,paddings,filter,mode,strides,padding,name=None)
tf.raw_ops.FusedResizeAndPadConv2D(input,size,paddings,filter,mode,strides,padding,resize_align_corners=False,name=None)
tf.raw_ops.GRUBlockCell(x,h_prev,w_ru,w_c,b_ru,b_c,name=None)
tf.raw_ops.GRUBlockCellGrad(x,h_prev,w_ru,w_c,b_ru,b_c,r,u,c,d_h,name=None)
tf.raw_ops.Gather(params,indices,validate_indices=True,name=None)
tf.raw_ops.GatherNd(params,indices,name=None)
tf.raw_ops.GatherV2(params,indices,axis,batch_dims=0,name=None)
tf.raw_ops.GenerateBoundingBoxProposals(scores,bbox_deltas,image_info,anchors,nms_threshold,pre_nms_topn,min_size,post_nms_topn=300,name=None)
tf.raw_ops.GenerateVocabRemapping(new_vocab_file,old_vocab_file,new_vocab_offset,num_new_vocab,old_vocab_size=-1,name=None)
tf.raw_ops.GeneratorDataset(init_func_other_args,next_func_other_args,finalize_func_other_args,init_func,next_func,finalize_func,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.GetElementAtIndex(dataset,index,output_types,output_shapes,name=None)
tf.raw_ops.GetOptions(input_dataset,name=None)
tf.raw_ops.GetSessionHandle(value,name=None)
tf.raw_ops.GetSessionHandleV2(value,name=None)
tf.raw_ops.GetSessionTensor(handle,dtype,name=None)
tf.raw_ops.Greater(x,y,name=None)
tf.raw_ops.GreaterEqual(x,y,name=None)
tf.raw_ops.GroupByReducerDataset(input_dataset,key_func_other_arguments,init_func_other_arguments,reduce_func_other_arguments,finalize_func_other_arguments,key_func,init_func,reduce_func,finalize_func,output_types,output_shapes,name=None)
tf.raw_ops.GroupByWindowDataset(input_dataset,key_func_other_arguments,reduce_func_other_arguments,window_size_func_other_arguments,key_func,reduce_func,window_size_func,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.GuaranteeConst(input,name=None)
tf.raw_ops.HSVToRGB(images,name=None)
tf.raw_ops.HashTable(key_dtype,value_dtype,container='',shared_name='',use_node_name_sharing=False,name=None)
tf.raw_ops.HashTableV2(key_dtype,value_dtype,container='',shared_name='',use_node_name_sharing=False,name=None)
tf.raw_ops.HistogramFixedWidth(values,value_range,nbins,dtype=tf.dtypes.int32,name=None)
tf.raw_ops.HistogramSummary(tag,values,name=None)
tf.raw_ops.IFFT(input,name=None)
tf.raw_ops.IFFT2D(input,name=None)
tf.raw_ops.IFFT3D(input,name=None)
tf.raw_ops.IRFFT(input,fft_length,Treal=tf.dtypes.float32,name=None)
tf.raw_ops.IRFFT2D(input,fft_length,Treal=tf.dtypes.float32,name=None)
tf.raw_ops.IRFFT3D(input,fft_length,Treal=tf.dtypes.float32,name=None)
tf.raw_ops.Identity(input,name=None)
tf.raw_ops.IdentityN(input,name=None)
tf.raw_ops.IdentityReader(container='',shared_name='',name=None)
tf.raw_ops.IdentityReaderV2(container='',shared_name='',name=None)
tf.raw_ops.If(cond,input,Tout,then_branch,else_branch,output_shapes=[],name=None)
tf.raw_ops.Igamma(a,x,name=None)
tf.raw_ops.IgammaGradA(a,x,name=None)
tf.raw_ops.Igammac(a,x,name=None)
tf.raw_ops.IgnoreErrorsDataset(input_dataset,output_types,output_shapes,log_warning=False,name=None)
tf.raw_ops.Imag(input,Tout=tf.dtypes.float32,name=None)
tf.raw_ops.ImageProjectiveTransformV2(images,transforms,output_shape,interpolation,fill_mode='CONSTANT',name=None)
tf.raw_ops.ImageProjectiveTransformV3(images,transforms,output_shape,fill_value,interpolation,fill_mode='CONSTANT',name=None)
tf.raw_ops.ImageSummary(tag,tensor,max_images=3,bad_color=_execute.make_tensor(\n'dtype:DT_UINT8tensor_shape{dim{size:4}}int_val:255int_val:0int_val:0int_val:255'\n,'bad_color'),name=None)
tf.raw_ops.ImmutableConst(dtype,shape,memory_region_name,name=None)
tf.raw_ops.ImportEvent(writer,event,name=None)
tf.raw_ops.InTopK(predictions,targets,k,name=None)
tf.raw_ops.InTopKV2(predictions,targets,k,name=None)
tf.raw_ops.InfeedDequeue(dtype,shape,name=None)
tf.raw_ops.InfeedDequeueTuple(dtypes,shapes,name=None)
tf.raw_ops.InfeedEnqueue(input,shape=[],layout=[],device_ordinal=-1,name=None)
tf.raw_ops.InfeedEnqueuePrelinearizedBuffer(input,device_ordinal=-1,name=None)
tf.raw_ops.InfeedEnqueueTuple(inputs,shapes,layouts=[],device_ordinal=-1,name=None)
tf.raw_ops.InitializeTable(table_handle,keys,values,name=None)
tf.raw_ops.InitializeTableFromDataset(table_handle,dataset,name=None)
tf.raw_ops.InitializeTableFromTextFile(table_handle,filename,key_index,value_index,vocab_size=-1,delimiter='\t',offset=0,name=None)
tf.raw_ops.InitializeTableFromTextFileV2(table_handle,filename,key_index,value_index,vocab_size=-1,delimiter='\t',offset=0,name=None)
tf.raw_ops.InitializeTableV2(table_handle,keys,values,name=None)
tf.raw_ops.InplaceAdd(x,i,v,name=None)
tf.raw_ops.InplaceSub(x,i,v,name=None)
tf.raw_ops.InplaceUpdate(x,i,v,name=None)
tf.raw_ops.InterleaveDataset(input_dataset,other_arguments,cycle_length,block_length,f,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.Inv(x,name=None)
tf.raw_ops.InvGrad(y,dy,name=None)
tf.raw_ops.Invert(x,name=None)
tf.raw_ops.InvertPermutation(x,name=None)
tf.raw_ops.IsBoostedTreesEnsembleInitialized(tree_ensemble_handle,name=None)
tf.raw_ops.IsBoostedTreesQuantileStreamResourceInitialized(quantile_stream_resource_handle,name=None)
tf.raw_ops.IsFinite(x,name=None)
tf.raw_ops.IsInf(x,name=None)
tf.raw_ops.IsNan(x,name=None)
tf.raw_ops.IsTPUEmbeddingInitialized(name=None)
tf.raw_ops.IsVariableInitialized(ref,name=None)
tf.raw_ops.IsotonicRegression(input,output_dtype=tf.dtypes.float32,name=None)
tf.raw_ops.Iterator(shared_name,container,output_types,output_shapes,name=None)
tf.raw_ops.IteratorFromStringHandle(string_handle,output_types=[],output_shapes=[],name=None)
tf.raw_ops.IteratorFromStringHandleV2(string_handle,output_types=[],output_shapes=[],name=None)
tf.raw_ops.IteratorGetDevice(resource,name=None)
tf.raw_ops.IteratorGetNext(iterator,output_types,output_shapes,name=None)
tf.raw_ops.IteratorGetNextAsOptional(iterator,output_types,output_shapes,name=None)
tf.raw_ops.IteratorGetNextSync(iterator,output_types,output_shapes,name=None)
tf.raw_ops.IteratorToStringHandle(resource_handle,name=None)
tf.raw_ops.IteratorV2(shared_name,container,output_types,output_shapes,name=None)
tf.raw_ops.L2Loss(t,name=None)
tf.raw_ops.LMDBDataset(filenames,output_types,output_shapes,name=None)
tf.raw_ops.LMDBReader(container='',shared_name='',name=None)
tf.raw_ops.LRN(input,depth_radius=5,bias=1,alpha=1,beta=0.5,name=None)
tf.raw_ops.LRNGrad(input_grads,input_image,output_image,depth_radius=5,bias=1,alpha=1,beta=0.5,name=None)
tf.raw_ops.LSTMBlockCell(x,cs_prev,h_prev,w,wci,wcf,wco,b,forget_bias=1,cell_clip=3,use_peephole=False,name=None)
tf.raw_ops.LSTMBlockCellGrad(x,cs_prev,h_prev,w,wci,wcf,wco,b,i,cs,f,o,ci,co,cs_grad,h_grad,use_peephole,name=None)
tf.raw_ops.LatencyStatsDataset(input_dataset,tag,output_types,output_shapes,name=None)
tf.raw_ops.LeakyRelu(features,alpha=0.2,name=None)
tf.raw_ops.LeakyReluGrad(gradients,features,alpha=0.2,name=None)
tf.raw_ops.LearnedUnigramCandidateSampler(true_classes,num_true,num_sampled,unique,range_max,seed=0,seed2=0,name=None)
tf.raw_ops.LeftShift(x,y,name=None)
tf.raw_ops.LegacyParallelInterleaveDatasetV2(input_dataset,other_arguments,cycle_length,block_length,buffer_output_elements,prefetch_input_elements,f,output_types,output_shapes,deterministic='default',metadata='',name=None)
tf.raw_ops.Less(x,y,name=None)
tf.raw_ops.LessEqual(x,y,name=None)
tf.raw_ops.Lgamma(x,name=None)
tf.raw_ops.LinSpace(start,stop,num,name=None)
tf.raw_ops.ListDiff(x,y,out_idx=tf.dtypes.int32,name=None)
tf.raw_ops.LoadAndRemapMatrix(ckpt_path,old_tensor_name,row_remapping,col_remapping,initializing_values,num_rows,num_cols,max_rows_in_memory=-1,name=None)
tf.raw_ops.LoadDataset(path,reader_func_other_args,output_types,output_shapes,reader_func,compression='',name=None)
tf.raw_ops.LoadTPUEmbeddingADAMParameters(parameters,momenta,velocities,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingAdadeltaParameters(parameters,accumulators,updates,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingAdagradMomentumParameters(parameters,accumulators,momenta,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingAdagradParameters(parameters,accumulators,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingCenteredRMSPropParameters(parameters,ms,mom,mg,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingFTRLParameters(parameters,accumulators,linears,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingFrequencyEstimatorParameters(parameters,last_hit_step,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingMDLAdagradLightParameters(parameters,accumulators,weights,benefits,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingMomentumParameters(parameters,momenta,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingProximalAdagradParameters(parameters,accumulators,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingProximalYogiParameters(parameters,v,m,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingRMSPropParameters(parameters,ms,mom,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.LoadTPUEmbeddingStochasticGradientDescentParameters(parameters,num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.Log(x,name=None)
tf.raw_ops.Log1p(x,name=None)
tf.raw_ops.LogMatrixDeterminant(input,name=None)
tf.raw_ops.LogSoftmax(logits,name=None)
tf.raw_ops.LogUniformCandidateSampler(true_classes,num_true,num_sampled,unique,range_max,seed=0,seed2=0,name=None)
tf.raw_ops.LogicalAnd(x,y,name=None)
tf.raw_ops.LogicalNot(x,name=None)
tf.raw_ops.LogicalOr(x,y,name=None)
tf.raw_ops.LookupTableExport(table_handle,Tkeys,Tvalues,name=None)
tf.raw_ops.LookupTableExportV2(table_handle,Tkeys,Tvalues,name=None)
tf.raw_ops.LookupTableFind(table_handle,keys,default_value,name=None)
tf.raw_ops.LookupTableFindV2(table_handle,keys,default_value,name=None)
tf.raw_ops.LookupTableImport(table_handle,keys,values,name=None)
tf.raw_ops.LookupTableImportV2(table_handle,keys,values,name=None)
tf.raw_ops.LookupTableInsert(table_handle,keys,values,name=None)
tf.raw_ops.LookupTableInsertV2(table_handle,keys,values,name=None)
tf.raw_ops.LookupTableRemoveV2(table_handle,keys,name=None)
tf.raw_ops.LookupTableSize(table_handle,name=None)
tf.raw_ops.LookupTableSizeV2(table_handle,name=None)
tf.raw_ops.LoopCond(input,name=None)
tf.raw_ops.LowerBound(sorted_inputs,values,out_type=tf.dtypes.int32,name=None)
tf.raw_ops.Lu(input,output_idx_type=tf.dtypes.int32,name=None)
tf.raw_ops.MakeIterator(dataset,iterator,name=None)
tf.raw_ops.MapAndBatchDataset(input_dataset,other_arguments,batch_size,num_parallel_calls,drop_remainder,f,output_types,output_shapes,preserve_cardinality=False,metadata='',name=None)
tf.raw_ops.MapClear(dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.MapDataset(input_dataset,other_arguments,f,output_types,output_shapes,use_inter_op_parallelism=True,preserve_cardinality=False,metadata='',name=None)
tf.raw_ops.MapDefun(arguments,captured_inputs,output_types,output_shapes,f,max_intra_op_parallelism=1,name=None)
tf.raw_ops.MapIncompleteSize(dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.MapPeek(key,indices,dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.MapSize(dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.MapStage(key,indices,values,dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.MapUnstage(key,indices,dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.MapUnstageNoKey(indices,dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.MatMul(a,b,transpose_a=False,transpose_b=False,name=None)
tf.raw_ops.MatchingFiles(pattern,name=None)
tf.raw_ops.MatchingFilesDataset(patterns,name=None)
tf.raw_ops.MatrixBandPart(input,num_lower,num_upper,name=None)
tf.raw_ops.MatrixDeterminant(input,name=None)
tf.raw_ops.MatrixDiag(diagonal,name=None)
tf.raw_ops.MatrixDiagPart(input,name=None)
tf.raw_ops.MatrixDiagPartV2(input,k,padding_value,name=None)
tf.raw_ops.MatrixDiagPartV3(input,k,padding_value,align='RIGHT_LEFT',name=None)
tf.raw_ops.MatrixDiagV2(diagonal,k,num_rows,num_cols,padding_value,name=None)
tf.raw_ops.MatrixDiagV3(diagonal,k,num_rows,num_cols,padding_value,align='RIGHT_LEFT',name=None)
tf.raw_ops.MatrixExponential(input,name=None)
tf.raw_ops.MatrixInverse(input,adjoint=False,name=None)
tf.raw_ops.MatrixLogarithm(input,name=None)
tf.raw_ops.MatrixSetDiag(input,diagonal,name=None)
tf.raw_ops.MatrixSetDiagV2(input,diagonal,k,name=None)
tf.raw_ops.MatrixSetDiagV3(input,diagonal,k,align='RIGHT_LEFT',name=None)
tf.raw_ops.MatrixSolve(matrix,rhs,adjoint=False,name=None)
tf.raw_ops.MatrixSolveLs(matrix,rhs,l2_regularizer,fast=True,name=None)
tf.raw_ops.MatrixSquareRoot(input,name=None)
tf.raw_ops.MatrixTriangularSolve(matrix,rhs,lower=True,adjoint=False,name=None)
tf.raw_ops.Max(input,axis,keep_dims=False,name=None)
tf.raw_ops.MaxIntraOpParallelismDataset(input_dataset,max_intra_op_parallelism,output_types,output_shapes,name=None)
tf.raw_ops.MaxPool(input,ksize,strides,padding,explicit_paddings=[],data_format='NHWC',name=None)
tf.raw_ops.MaxPool3D(input,ksize,strides,padding,data_format='NDHWC',name=None)
tf.raw_ops.MaxPool3DGrad(orig_input,orig_output,grad,ksize,strides,padding,data_format='NDHWC',name=None)
tf.raw_ops.MaxPool3DGradGrad(orig_input,orig_output,grad,ksize,strides,padding,data_format='NDHWC',name=None)
tf.raw_ops.MaxPoolGrad(orig_input,orig_output,grad,ksize,strides,padding,explicit_paddings=[],data_format='NHWC',name=None)
tf.raw_ops.MaxPoolGradGrad(orig_input,orig_output,grad,ksize,strides,padding,data_format='NHWC',name=None)
tf.raw_ops.MaxPoolGradGradV2(orig_input,orig_output,grad,ksize,strides,padding,data_format='NHWC',name=None)
tf.raw_ops.MaxPoolGradGradWithArgmax(input,grad,argmax,ksize,strides,padding,include_batch_in_index=False,name=None)
tf.raw_ops.MaxPoolGradV2(orig_input,orig_output,grad,ksize,strides,padding,data_format='NHWC',name=None)
tf.raw_ops.MaxPoolGradWithArgmax(input,grad,argmax,ksize,strides,padding,include_batch_in_index=False,name=None)
tf.raw_ops.MaxPoolV2(input,ksize,strides,padding,data_format='NHWC',name=None)
tf.raw_ops.MaxPoolWithArgmax(input,ksize,strides,padding,Targmax=tf.dtypes.int64,include_batch_in_index=False,name=None)
tf.raw_ops.Maximum(x,y,name=None)
tf.raw_ops.Mean(input,axis,keep_dims=False,name=None)
tf.raw_ops.Merge(inputs,name=None)
tf.raw_ops.MergeSummary(inputs,name=None)
tf.raw_ops.MergeV2Checkpoints(checkpoint_prefixes,destination_prefix,delete_old_dirs=True,name=None)
tf.raw_ops.Mfcc(spectrogram,sample_rate,upper_frequency_limit=4000,lower_frequency_limit=20,filterbank_channel_count=40,dct_coefficient_count=13,name=None)
tf.raw_ops.Min(input,axis,keep_dims=False,name=None)
tf.raw_ops.Minimum(x,y,name=None)
tf.raw_ops.MirrorPad(input,paddings,mode,name=None)
tf.raw_ops.MirrorPadGrad(input,paddings,mode,name=None)
tf.raw_ops.Mod(x,y,name=None)
tf.raw_ops.ModelDataset(input_dataset,output_types,output_shapes,algorithm=0,cpu_budget=0,ram_budget=0,name=None)
tf.raw_ops.Mul(x,y,name=None)
tf.raw_ops.MulNoNan(x,y,name=None)
tf.raw_ops.MultiDeviceIterator(devices,shared_name,container,output_types,output_shapes,name=None)
tf.raw_ops.MultiDeviceIteratorFromStringHandle(string_handle,output_types=[],output_shapes=[],name=None)
tf.raw_ops.MultiDeviceIteratorGetNextFromShard(multi_device_iterator,shard_num,incarnation_id,output_types,output_shapes,name=None)
tf.raw_ops.MultiDeviceIteratorInit(dataset,multi_device_iterator,max_buffer_size,name=None)
tf.raw_ops.MultiDeviceIteratorToStringHandle(multi_device_iterator,name=None)
tf.raw_ops.Multinomial(logits,num_samples,seed=0,seed2=0,output_dtype=tf.dtypes.int64,name=None)
tf.raw_ops.MutableDenseHashTable(empty_key,value_dtype,container='',shared_name='',use_node_name_sharing=False,value_shape=[],initial_num_buckets=131072,max_load_factor=0.8,name=None)
tf.raw_ops.MutableDenseHashTableV2(empty_key,deleted_key,value_dtype,container='',shared_name='',use_node_name_sharing=False,value_shape=[],initial_num_buckets=131072,max_load_factor=0.8,name=None)
tf.raw_ops.MutableHashTable(key_dtype,value_dtype,container='',shared_name='',use_node_name_sharing=False,name=None)
tf.raw_ops.MutableHashTableOfTensors(key_dtype,value_dtype,container='',shared_name='',use_node_name_sharing=False,value_shape=[],name=None)
tf.raw_ops.MutableHashTableOfTensorsV2(key_dtype,value_dtype,container='',shared_name='',use_node_name_sharing=False,value_shape=[],name=None)
tf.raw_ops.MutableHashTableV2(key_dtype,value_dtype,container='',shared_name='',use_node_name_sharing=False,name=None)
tf.raw_ops.MutexLock(mutex,name=None)
tf.raw_ops.MutexV2(container='',shared_name='',name=None)
tf.raw_ops.NcclAllReduce(input,reduction,num_devices,shared_name,name=None)
tf.raw_ops.NcclBroadcast(input,shape,name=None)
tf.raw_ops.NcclReduce(input,reduction,name=None)
tf.raw_ops.Ndtri(x,name=None)
tf.raw_ops.Neg(x,name=None)
tf.raw_ops.NextAfter(x1,x2,name=None)
tf.raw_ops.NextIteration(data,name=None)
tf.raw_ops.NoOp(name=None)
tf.raw_ops.NonDeterministicInts(shape,dtype=tf.dtypes.int64,name=None)
tf.raw_ops.NonMaxSuppression(boxes,scores,max_output_size,iou_threshold=0.5,name=None)
tf.raw_ops.NonMaxSuppressionV2(boxes,scores,max_output_size,iou_threshold,name=None)
tf.raw_ops.NonMaxSuppressionV3(boxes,scores,max_output_size,iou_threshold,score_threshold,name=None)
tf.raw_ops.NonMaxSuppressionV4(boxes,scores,max_output_size,iou_threshold,score_threshold,pad_to_max_output_size=False,name=None)
tf.raw_ops.NonMaxSuppressionV5(boxes,scores,max_output_size,iou_threshold,score_threshold,soft_nms_sigma,pad_to_max_output_size=False,name=None)
tf.raw_ops.NonMaxSuppressionWithOverlaps(overlaps,scores,max_output_size,overlap_threshold,score_threshold,name=None)
tf.raw_ops.NonSerializableDataset(input_dataset,output_types,output_shapes,name=None)
tf.raw_ops.NotEqual(x,y,incompatible_shape_error=True,name=None)
tf.raw_ops.NthElement(input,n,reverse=False,name=None)
tf.raw_ops.OneHot(indices,depth,on_value,off_value,axis=-1,name=None)
tf.raw_ops.OneShotIterator(dataset_factory,output_types,output_shapes,container='',shared_name='',name=None)
tf.raw_ops.OnesLike(x,name=None)
tf.raw_ops.OptimizeDataset(input_dataset,optimizations,output_types,output_shapes,optimization_configs=[],name=None)
tf.raw_ops.OptimizeDatasetV2(input_dataset,optimizations_enabled,optimizations_disabled,optimizations_default,output_types,output_shapes,optimization_configs=[],name=None)
tf.raw_ops.OptionalFromValue(components,name=None)
tf.raw_ops.OptionalGetValue(optional,output_types,output_shapes,name=None)
tf.raw_ops.OptionalHasValue(optional,name=None)
tf.raw_ops.OptionalNone(name=None)
tf.raw_ops.OptionsDataset(input_dataset,serialized_options,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.OrderedMapClear(dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.OrderedMapIncompleteSize(dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.OrderedMapPeek(key,indices,dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.OrderedMapSize(dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.OrderedMapStage(key,indices,values,dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.OrderedMapUnstage(key,indices,dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.OrderedMapUnstageNoKey(indices,dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.Pack(values,axis=0,name=None)
tf.raw_ops.Pad(input,paddings,name=None)
tf.raw_ops.PadV2(input,paddings,constant_values,name=None)
tf.raw_ops.PaddedBatchDataset(input_dataset,batch_size,padded_shapes,padding_values,output_shapes,metadata='',name=None)
tf.raw_ops.PaddedBatchDatasetV2(input_dataset,batch_size,padded_shapes,padding_values,drop_remainder,output_shapes,parallel_copy=False,metadata='',name=None)
tf.raw_ops.PaddingFIFOQueue(component_types,shapes=[],capacity=-1,container='',shared_name='',name=None)
tf.raw_ops.PaddingFIFOQueueV2(component_types,shapes=[],capacity=-1,container='',shared_name='',name=None)
tf.raw_ops.ParallelBatchDataset(input_dataset,batch_size,num_parallel_calls,drop_remainder,output_types,output_shapes,parallel_copy=False,deterministic='default',metadata='',name=None)
tf.raw_ops.ParallelConcat(values,shape,name=None)
tf.raw_ops.ParallelDynamicStitch(indices,data,name=None)
tf.raw_ops.ParallelInterleaveDataset(input_dataset,other_arguments,cycle_length,block_length,sloppy,buffer_output_elements,prefetch_input_elements,f,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.ParallelInterleaveDatasetV2(input_dataset,other_arguments,cycle_length,block_length,num_parallel_calls,f,output_types,output_shapes,sloppy=False,metadata='',name=None)
tf.raw_ops.ParallelInterleaveDatasetV3(input_dataset,other_arguments,cycle_length,block_length,num_parallel_calls,f,output_types,output_shapes,deterministic='default',metadata='',name=None)
tf.raw_ops.ParallelInterleaveDatasetV4(input_dataset,other_arguments,cycle_length,block_length,buffer_output_elements,prefetch_input_elements,num_parallel_calls,f,output_types,output_shapes,deterministic='default',metadata='',name=None)
tf.raw_ops.ParallelMapDataset(input_dataset,other_arguments,num_parallel_calls,f,output_types,output_shapes,use_inter_op_parallelism=True,sloppy=False,preserve_cardinality=False,metadata='',name=None)
tf.raw_ops.ParallelMapDatasetV2(input_dataset,other_arguments,num_parallel_calls,f,output_types,output_shapes,use_inter_op_parallelism=True,deterministic='default',preserve_cardinality=False,metadata='',name=None)
tf.raw_ops.ParameterizedTruncatedNormal(shape,means,stdevs,minvals,maxvals,seed=0,seed2=0,name=None)
tf.raw_ops.ParseExample(serialized,names,sparse_keys,dense_keys,dense_defaults,sparse_types,dense_shapes,name=None)
tf.raw_ops.ParseExampleDataset(input_dataset,num_parallel_calls,dense_defaults,sparse_keys,dense_keys,sparse_types,dense_shapes,output_types,output_shapes,sloppy=False,ragged_keys=[],ragged_value_types=[],ragged_split_types=[],name=None)
tf.raw_ops.ParseExampleDatasetV2(input_dataset,num_parallel_calls,dense_defaults,sparse_keys,dense_keys,sparse_types,dense_shapes,output_types,output_shapes,deterministic='default',ragged_keys=[],ragged_value_types=[],ragged_split_types=[],name=None)
tf.raw_ops.ParseExampleV2(serialized,names,sparse_keys,dense_keys,ragged_keys,dense_defaults,num_sparse,sparse_types,ragged_value_types,ragged_split_types,dense_shapes,name=None)
tf.raw_ops.ParseSequenceExample(serialized,debug_name,context_dense_defaults,feature_list_dense_missing_assumed_empty,context_sparse_keys,context_dense_keys,feature_list_sparse_keys,feature_list_dense_keys,Ncontext_sparse=0,Ncontext_dense=0,Nfeature_list_sparse=0,Nfeature_list_dense=0,context_sparse_types=[],feature_list_dense_types=[],context_dense_shapes=[],feature_list_sparse_types=[],feature_list_dense_shapes=[],name=None)
tf.raw_ops.ParseSequenceExampleV2(serialized,debug_name,context_sparse_keys,context_dense_keys,context_ragged_keys,feature_list_sparse_keys,feature_list_dense_keys,feature_list_ragged_keys,feature_list_dense_missing_assumed_empty,context_dense_defaults,Ncontext_sparse=0,context_sparse_types=[],context_ragged_value_types=[],context_ragged_split_types=[],context_dense_shapes=[],Nfeature_list_sparse=0,Nfeature_list_dense=0,feature_list_dense_types=[],feature_list_sparse_types=[],feature_list_ragged_value_types=[],feature_list_ragged_split_types=[],feature_list_dense_shapes=[],name=None)
tf.raw_ops.ParseSingleExample(serialized,dense_defaults,num_sparse,sparse_keys,dense_keys,sparse_types,dense_shapes,name=None)
tf.raw_ops.ParseSingleSequenceExample(serialized,feature_list_dense_missing_assumed_empty,context_sparse_keys,context_dense_keys,feature_list_sparse_keys,feature_list_dense_keys,context_dense_defaults,debug_name,context_sparse_types=[],feature_list_dense_types=[],context_dense_shapes=[],feature_list_sparse_types=[],feature_list_dense_shapes=[],name=None)
tf.raw_ops.ParseTensor(serialized,out_type,name=None)
tf.raw_ops.PartitionedCall(args,Tout,f,config='',config_proto='',executor_type='',name=None)
tf.raw_ops.Placeholder(dtype,shape=None,name=None)
tf.raw_ops.PlaceholderV2(dtype,shape,name=None)
tf.raw_ops.PlaceholderWithDefault(input,shape,name=None)
tf.raw_ops.Polygamma(a,x,name=None)
tf.raw_ops.PopulationCount(x,name=None)
tf.raw_ops.Pow(x,y,name=None)
tf.raw_ops.PrefetchDataset(input_dataset,buffer_size,output_types,output_shapes,slack_period=0,legacy_autotune=True,buffer_size_min=0,metadata='',name=None)
tf.raw_ops.Prelinearize(input,shape=[],layout=[],name=None)
tf.raw_ops.PrelinearizeTuple(inputs,shapes,layouts=[],name=None)
tf.raw_ops.PreventGradient(input,message='',name=None)
tf.raw_ops.Print(input,data,message='',first_n=-1,summarize=3,name=None)
tf.raw_ops.PrintV2(input,output_stream='stderr',end='\n',name=None)
tf.raw_ops.PriorityQueue(shapes,component_types=[],capacity=-1,container='',shared_name='',name=None)
tf.raw_ops.PriorityQueueV2(shapes,component_types=[],capacity=-1,container='',shared_name='',name=None)
tf.raw_ops.PrivateThreadPoolDataset(input_dataset,num_threads,output_types,output_shapes,name=None)
tf.raw_ops.Prod(input,axis,keep_dims=False,name=None)
tf.raw_ops.PyFunc(input,token,Tout,name=None)
tf.raw_ops.PyFuncStateless(input,token,Tout,name=None)
tf.raw_ops.Qr(input,full_matrices=False,name=None)
tf.raw_ops.QuantizeAndDequantize(input,signed_input=True,num_bits=8,range_given=False,input_min=0,input_max=0,name=None)
tf.raw_ops.QuantizeAndDequantizeV2(input,input_min,input_max,signed_input=True,num_bits=8,range_given=False,round_mode='HALF_TO_EVEN',narrow_range=False,axis=-1,name=None)
tf.raw_ops.QuantizeAndDequantizeV3(input,input_min,input_max,num_bits,signed_input=True,range_given=True,narrow_range=False,axis=-1,name=None)
tf.raw_ops.QuantizeAndDequantizeV4(input,input_min,input_max,signed_input=True,num_bits=8,range_given=False,round_mode='HALF_TO_EVEN',narrow_range=False,axis=-1,name=None)
tf.raw_ops.QuantizeAndDequantizeV4Grad(gradients,input,input_min,input_max,axis=-1,name=None)
tf.raw_ops.QuantizeDownAndShrinkRange(input,input_min,input_max,out_type,name=None)
tf.raw_ops.QuantizeV2(input,min_range,max_range,T,mode='MIN_COMBINED',round_mode='HALF_AWAY_FROM_ZERO',narrow_range=False,axis=-1,ensure_minimum_range=0.01,name=None)
tf.raw_ops.QuantizedAdd(x,y,min_x,max_x,min_y,max_y,Toutput=tf.dtypes.qint32,name=None)
tf.raw_ops.QuantizedAvgPool(input,min_input,max_input,ksize,strides,padding,name=None)
tf.raw_ops.QuantizedBatchNormWithGlobalNormalization(t,t_min,t_max,m,m_min,m_max,v,v_min,v_max,beta,beta_min,beta_max,gamma,gamma_min,gamma_max,out_type,variance_epsilon,scale_after_normalization,name=None)
tf.raw_ops.QuantizedBiasAdd(input,bias,min_input,max_input,min_bias,max_bias,out_type,name=None)
tf.raw_ops.QuantizedConcat(concat_dim,values,input_mins,input_maxes,name=None)
tf.raw_ops.QuantizedConv2D(input,filter,min_input,max_input,min_filter,max_filter,strides,padding,out_type=tf.dtypes.qint32,dilations=[1,1,1,1],name=None)
tf.raw_ops.QuantizedConv2DAndRelu(input,filter,min_input,max_input,min_filter,max_filter,strides,padding,out_type=tf.dtypes.qint32,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedConv2DAndReluAndRequantize(input,filter,min_input,max_input,min_filter,max_filter,min_freezed_output,max_freezed_output,strides,padding,out_type=tf.dtypes.quint8,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedConv2DAndRequantize(input,filter,min_input,max_input,min_filter,max_filter,min_freezed_output,max_freezed_output,strides,padding,out_type=tf.dtypes.qint8,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedConv2DPerChannel(input,filter,min_input,max_input,min_filter,max_filter,strides,padding,out_type=tf.dtypes.qint32,dilations=[1,1,1,1],name=None)
tf.raw_ops.QuantizedConv2DWithBias(input,filter,bias,min_input,max_input,min_filter,max_filter,strides,padding,out_type=tf.dtypes.qint32,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedConv2DWithBiasAndRelu(input,filter,bias,min_input,max_input,min_filter,max_filter,strides,padding,out_type=tf.dtypes.qint32,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedConv2DWithBiasAndReluAndRequantize(input,filter,bias,min_input,max_input,min_filter,max_filter,min_freezed_output,max_freezed_output,strides,padding,out_type=tf.dtypes.quint8,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedConv2DWithBiasAndRequantize(input,filter,bias,min_input,max_input,min_filter,max_filter,min_freezed_output,max_freezed_output,strides,padding,out_type=tf.dtypes.qint8,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedConv2DWithBiasSignedSumAndReluAndRequantize(input,filter,bias,min_input,max_input,min_filter,max_filter,min_freezed_output,max_freezed_output,summand,min_summand,max_summand,strides,padding,out_type=tf.dtypes.quint8,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedConv2DWithBiasSumAndRelu(input,filter,bias,min_input,max_input,min_filter,max_filter,summand,strides,padding,out_type=tf.dtypes.qint32,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedConv2DWithBiasSumAndReluAndRequantize(input,filter,bias,min_input,max_input,min_filter,max_filter,min_freezed_output,max_freezed_output,summand,min_summand,max_summand,strides,padding,out_type=tf.dtypes.quint8,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedDepthwiseConv2D(input,filter,min_input,max_input,min_filter,max_filter,strides,padding,out_type=tf.dtypes.qint32,dilations=[1,1,1,1],name=None)
tf.raw_ops.QuantizedDepthwiseConv2DWithBias(input,filter,bias,min_input,max_input,min_filter,max_filter,strides,padding,out_type=tf.dtypes.qint32,dilations=[1,1,1,1],name=None)
tf.raw_ops.QuantizedDepthwiseConv2DWithBiasAndRelu(input,filter,bias,min_input,max_input,min_filter,max_filter,strides,padding,out_type=tf.dtypes.qint32,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize(input,filter,bias,min_input,max_input,min_filter,max_filter,min_freezed_output,max_freezed_output,strides,padding,out_type=tf.dtypes.quint8,dilations=[1,1,1,1],padding_list=[],name=None)
tf.raw_ops.QuantizedInstanceNorm(x,x_min,x_max,output_range_given=False,given_y_min=0,given_y_max=0,variance_epsilon=1e-05,min_separation=0.001,name=None)
tf.raw_ops.QuantizedMatMul(a,b,min_a,max_a,min_b,max_b,Toutput=tf.dtypes.qint32,transpose_a=False,transpose_b=False,Tactivation=tf.dtypes.quint8,name=None)
tf.raw_ops.QuantizedMatMulWithBias(a,b,bias,min_a,max_a,min_b,max_b,Toutput=tf.dtypes.qint32,transpose_a=False,transpose_b=False,input_quant_mode='MIN_FIRST',name=None)
tf.raw_ops.QuantizedMatMulWithBiasAndDequantize(a,b,bias,min_a,max_a,min_b,max_b,min_freezed_output,max_freezed_output,Toutput,transpose_a=False,transpose_b=False,input_quant_mode='MIN_FIRST',name=None)
tf.raw_ops.QuantizedMatMulWithBiasAndRelu(a,b,bias,min_a,max_a,min_b,max_b,Toutput=tf.dtypes.qint32,transpose_a=False,transpose_b=False,input_quant_mode='MIN_FIRST',name=None)
tf.raw_ops.QuantizedMatMulWithBiasAndReluAndRequantize(a,b,bias,min_a,max_a,min_b,max_b,min_freezed_output,max_freezed_output,Toutput=tf.dtypes.quint8,transpose_a=False,transpose_b=False,input_quant_mode='MIN_FIRST',name=None)
tf.raw_ops.QuantizedMatMulWithBiasAndRequantize(a,b,bias,min_a,max_a,min_b,max_b,min_freezed_output,max_freezed_output,Toutput=tf.dtypes.quint8,transpose_a=False,transpose_b=False,input_quant_mode='MIN_FIRST',name=None)
tf.raw_ops.QuantizedMaxPool(input,min_input,max_input,ksize,strides,padding,name=None)
tf.raw_ops.QuantizedMul(x,y,min_x,max_x,min_y,max_y,Toutput=tf.dtypes.qint32,name=None)
tf.raw_ops.QuantizedRelu(features,min_features,max_features,out_type=tf.dtypes.quint8,name=None)
tf.raw_ops.QuantizedRelu6(features,min_features,max_features,out_type=tf.dtypes.quint8,name=None)
tf.raw_ops.QuantizedReluX(features,max_value,min_features,max_features,out_type=tf.dtypes.quint8,name=None)
tf.raw_ops.QuantizedReshape(tensor,shape,input_min,input_max,name=None)
tf.raw_ops.QuantizedResizeBilinear(images,size,min,max,align_corners=False,half_pixel_centers=False,name=None)
tf.raw_ops.QueueClose(handle,cancel_pending_enqueues=False,name=None)
tf.raw_ops.QueueCloseV2(handle,cancel_pending_enqueues=False,name=None)
tf.raw_ops.QueueDequeue(handle,component_types,timeout_ms=-1,name=None)
tf.raw_ops.QueueDequeueMany(handle,n,component_types,timeout_ms=-1,name=None)
tf.raw_ops.QueueDequeueManyV2(handle,n,component_types,timeout_ms=-1,name=None)
tf.raw_ops.QueueDequeueUpTo(handle,n,component_types,timeout_ms=-1,name=None)
tf.raw_ops.QueueDequeueUpToV2(handle,n,component_types,timeout_ms=-1,name=None)
tf.raw_ops.QueueDequeueV2(handle,component_types,timeout_ms=-1,name=None)
tf.raw_ops.QueueEnqueue(handle,components,timeout_ms=-1,name=None)
tf.raw_ops.QueueEnqueueMany(handle,components,timeout_ms=-1,name=None)
tf.raw_ops.QueueEnqueueManyV2(handle,components,timeout_ms=-1,name=None)
tf.raw_ops.QueueEnqueueV2(handle,components,timeout_ms=-1,name=None)
tf.raw_ops.QueueIsClosed(handle,name=None)
tf.raw_ops.QueueIsClosedV2(handle,name=None)
tf.raw_ops.QueueSize(handle,name=None)
tf.raw_ops.QueueSizeV2(handle,name=None)
tf.raw_ops.RFFT(input,fft_length,Tcomplex=tf.dtypes.complex64,name=None)
tf.raw_ops.RFFT2D(input,fft_length,Tcomplex=tf.dtypes.complex64,name=None)
tf.raw_ops.RFFT3D(input,fft_length,Tcomplex=tf.dtypes.complex64,name=None)
tf.raw_ops.RGBToHSV(images,name=None)
tf.raw_ops.RaggedBincount(splits,values,size,weights,binary_output=False,name=None)
tf.raw_ops.RaggedCountSparseOutput(splits,values,weights,binary_output,minlength=-1,maxlength=-1,name=None)
tf.raw_ops.RaggedCross(ragged_values,ragged_row_splits,sparse_indices,sparse_values,sparse_shape,dense_inputs,input_order,hashed_output,num_buckets,hash_key,out_values_type,out_row_splits_type,name=None)
tf.raw_ops.RaggedGather(params_nested_splits,params_dense_values,indices,OUTPUT_RAGGED_RANK,name=None)
tf.raw_ops.RaggedRange(starts,limits,deltas,Tsplits=tf.dtypes.int64,name=None)
tf.raw_ops.RaggedTensorFromVariant(encoded_ragged,input_ragged_rank,output_ragged_rank,Tvalues,Tsplits=tf.dtypes.int64,name=None)
tf.raw_ops.RaggedTensorToSparse(rt_nested_splits,rt_dense_values,name=None)
tf.raw_ops.RaggedTensorToTensor(shape,values,default_value,row_partition_tensors,row_partition_types,name=None)
tf.raw_ops.RaggedTensorToVariant(rt_nested_splits,rt_dense_values,batched_input,name=None)
tf.raw_ops.RaggedTensorToVariantGradient(encoded_ragged_grad,row_splits,dense_values_shape,Tvalues,name=None)
tf.raw_ops.RandomCrop(image,size,seed=0,seed2=0,name=None)
tf.raw_ops.RandomDataset(seed,seed2,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.RandomGamma(shape,alpha,seed=0,seed2=0,name=None)
tf.raw_ops.RandomGammaGrad(alpha,sample,name=None)
tf.raw_ops.RandomPoisson(shape,rate,seed=0,seed2=0,name=None)
tf.raw_ops.RandomPoissonV2(shape,rate,seed=0,seed2=0,dtype=tf.dtypes.int64,name=None)
tf.raw_ops.RandomShuffle(value,seed=0,seed2=0,name=None)
tf.raw_ops.RandomShuffleQueue(component_types,shapes=[],capacity=-1,min_after_dequeue=0,seed=0,seed2=0,container='',shared_name='',name=None)
tf.raw_ops.RandomShuffleQueueV2(component_types,shapes=[],capacity=-1,min_after_dequeue=0,seed=0,seed2=0,container='',shared_name='',name=None)
tf.raw_ops.RandomStandardNormal(shape,dtype,seed=0,seed2=0,name=None)
tf.raw_ops.RandomUniform(shape,dtype,seed=0,seed2=0,name=None)
tf.raw_ops.RandomUniformInt(shape,minval,maxval,seed=0,seed2=0,name=None)
tf.raw_ops.Range(start,limit,delta,name=None)
tf.raw_ops.RangeDataset(start,stop,step,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.Rank(input,name=None)
tf.raw_ops.ReadFile(filename,name=None)
tf.raw_ops.ReadVariableOp(resource,dtype,name=None)
tf.raw_ops.ReadVariableXlaSplitND(resource,T,N,num_splits,paddings=[],name=None)
tf.raw_ops.ReaderNumRecordsProduced(reader_handle,name=None)
tf.raw_ops.ReaderNumRecordsProducedV2(reader_handle,name=None)
tf.raw_ops.ReaderNumWorkUnitsCompleted(reader_handle,name=None)
tf.raw_ops.ReaderNumWorkUnitsCompletedV2(reader_handle,name=None)
tf.raw_ops.ReaderRead(reader_handle,queue_handle,name=None)
tf.raw_ops.ReaderReadUpTo(reader_handle,queue_handle,num_records,name=None)
tf.raw_ops.ReaderReadUpToV2(reader_handle,queue_handle,num_records,name=None)
tf.raw_ops.ReaderReadV2(reader_handle,queue_handle,name=None)
tf.raw_ops.ReaderReset(reader_handle,name=None)
tf.raw_ops.ReaderResetV2(reader_handle,name=None)
tf.raw_ops.ReaderRestoreState(reader_handle,state,name=None)
tf.raw_ops.ReaderRestoreStateV2(reader_handle,state,name=None)
tf.raw_ops.ReaderSerializeState(reader_handle,name=None)
tf.raw_ops.ReaderSerializeStateV2(reader_handle,name=None)
tf.raw_ops.Real(input,Tout=tf.dtypes.float32,name=None)
tf.raw_ops.RealDiv(x,y,name=None)
tf.raw_ops.RebatchDataset(input_dataset,num_replicas,output_types,output_shapes,use_fallback=True,name=None)
tf.raw_ops.RebatchDatasetV2(input_dataset,batch_sizes,drop_remainder,output_types,output_shapes,name=None)
tf.raw_ops.Reciprocal(x,name=None)
tf.raw_ops.ReciprocalGrad(y,dy,name=None)
tf.raw_ops.RecordInput(file_pattern,file_random_seed=301,file_shuffle_shift_ratio=0,file_buffer_size=10000,file_parallelism=16,batch_size=32,compression_type='',name=None)
tf.raw_ops.Recv(tensor_type,tensor_name,send_device,send_device_incarnation,recv_device,client_terminated=False,name=None)
tf.raw_ops.RecvTPUEmbeddingActivations(num_outputs,config,name=None)
tf.raw_ops.ReduceDataset(input_dataset,initial_state,other_arguments,f,output_types,output_shapes,use_inter_op_parallelism=True,metadata='',name=None)
tf.raw_ops.ReduceJoin(inputs,reduction_indices,keep_dims=False,separator='',name=None)
tf.raw_ops.RefEnter(data,frame_name,is_constant=False,parallel_iterations=10,name=None)
tf.raw_ops.RefExit(data,name=None)
tf.raw_ops.RefIdentity(input,name=None)
tf.raw_ops.RefMerge(inputs,name=None)
tf.raw_ops.RefNextIteration(data,name=None)
tf.raw_ops.RefSelect(index,inputs,name=None)
tf.raw_ops.RefSwitch(data,pred,name=None)
tf.raw_ops.RegexFullMatch(input,pattern,name=None)
tf.raw_ops.RegexReplace(input,pattern,rewrite,replace_global=True,name=None)
tf.raw_ops.RegisterDataset(dataset,address,protocol,external_state_policy,element_spec='',name=None)
tf.raw_ops.Relu(features,name=None)
tf.raw_ops.Relu6(features,name=None)
tf.raw_ops.Relu6Grad(gradients,features,name=None)
tf.raw_ops.ReluGrad(gradients,features,name=None)
tf.raw_ops.RemoteCall(target,args,Tout,f,name=None)
tf.raw_ops.RepeatDataset(input_dataset,count,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.RequantizationRange(input,input_min,input_max,name=None)
tf.raw_ops.RequantizationRangePerChannel(input,input_min,input_max,clip_value_max,name=None)
tf.raw_ops.Requantize(input,input_min,input_max,requested_output_min,requested_output_max,out_type,name=None)
tf.raw_ops.RequantizePerChannel(input,input_min,input_max,requested_output_min,requested_output_max,out_type=tf.dtypes.quint8,name=None)
tf.raw_ops.Reshape(tensor,shape,name=None)
tf.raw_ops.ResizeArea(images,size,align_corners=False,name=None)
tf.raw_ops.ResizeBicubic(images,size,align_corners=False,half_pixel_centers=False,name=None)
tf.raw_ops.ResizeBicubicGrad(grads,original_image,align_corners=False,half_pixel_centers=False,name=None)
tf.raw_ops.ResizeBilinear(images,size,align_corners=False,half_pixel_centers=False,name=None)
tf.raw_ops.ResizeBilinearGrad(grads,original_image,align_corners=False,half_pixel_centers=False,name=None)
tf.raw_ops.ResizeNearestNeighbor(images,size,align_corners=False,half_pixel_centers=False,name=None)
tf.raw_ops.ResizeNearestNeighborGrad(grads,size,align_corners=False,half_pixel_centers=False,name=None)
tf.raw_ops.ResourceAccumulatorApplyGradient(handle,local_step,gradient,name=None)
tf.raw_ops.ResourceAccumulatorNumAccumulated(handle,name=None)
tf.raw_ops.ResourceAccumulatorSetGlobalStep(handle,new_global_step,name=None)
tf.raw_ops.ResourceAccumulatorTakeGradient(handle,num_required,dtype,name=None)
tf.raw_ops.ResourceApplyAdaMax(var,m,v,beta1_power,lr,beta1,beta2,epsilon,grad,use_locking=False,name=None)
tf.raw_ops.ResourceApplyAdadelta(var,accum,accum_update,lr,rho,epsilon,grad,use_locking=False,name=None)
tf.raw_ops.ResourceApplyAdagrad(var,accum,lr,grad,use_locking=False,update_slots=True,name=None)
tf.raw_ops.ResourceApplyAdagradDA(var,gradient_accumulator,gradient_squared_accumulator,grad,lr,l1,l2,global_step,use_locking=False,name=None)
tf.raw_ops.ResourceApplyAdagradV2(var,accum,lr,epsilon,grad,use_locking=False,update_slots=True,name=None)
tf.raw_ops.ResourceApplyAdam(var,m,v,beta1_power,beta2_power,lr,beta1,beta2,epsilon,grad,use_locking=False,use_nesterov=False,name=None)
tf.raw_ops.ResourceApplyAdamWithAmsgrad(var,m,v,vhat,beta1_power,beta2_power,lr,beta1,beta2,epsilon,grad,use_locking=False,name=None)
tf.raw_ops.ResourceApplyAddSign(var,m,lr,alpha,sign_decay,beta,grad,use_locking=False,name=None)
tf.raw_ops.ResourceApplyCenteredRMSProp(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=False,name=None)
tf.raw_ops.ResourceApplyFtrl(var,accum,linear,grad,lr,l1,l2,lr_power,use_locking=False,multiply_linear_by_lr=False,name=None)
tf.raw_ops.ResourceApplyFtrlV2(var,accum,linear,grad,lr,l1,l2,l2_shrinkage,lr_power,use_locking=False,multiply_linear_by_lr=False,name=None)
tf.raw_ops.ResourceApplyGradientDescent(var,alpha,delta,use_locking=False,name=None)
tf.raw_ops.ResourceApplyKerasMomentum(var,accum,lr,grad,momentum,use_locking=False,use_nesterov=False,name=None)
tf.raw_ops.ResourceApplyMomentum(var,accum,lr,grad,momentum,use_locking=False,use_nesterov=False,name=None)
tf.raw_ops.ResourceApplyPowerSign(var,m,lr,logbase,sign_decay,beta,grad,use_locking=False,name=None)
tf.raw_ops.ResourceApplyProximalAdagrad(var,accum,lr,l1,l2,grad,use_locking=False,name=None)
tf.raw_ops.ResourceApplyProximalGradientDescent(var,alpha,l1,l2,delta,use_locking=False,name=None)
tf.raw_ops.ResourceApplyRMSProp(var,ms,mom,lr,rho,momentum,epsilon,grad,use_locking=False,name=None)
tf.raw_ops.ResourceConditionalAccumulator(dtype,shape,container='',shared_name='',reduction_type='MEAN',name=None)
tf.raw_ops.ResourceCountUpTo(resource,limit,T,name=None)
tf.raw_ops.ResourceGather(resource,indices,dtype,batch_dims=0,validate_indices=True,name=None)
tf.raw_ops.ResourceGatherNd(resource,indices,dtype,name=None)
tf.raw_ops.ResourceScatterAdd(resource,indices,updates,name=None)
tf.raw_ops.ResourceScatterDiv(resource,indices,updates,name=None)
tf.raw_ops.ResourceScatterMax(resource,indices,updates,name=None)
tf.raw_ops.ResourceScatterMin(resource,indices,updates,name=None)
tf.raw_ops.ResourceScatterMul(resource,indices,updates,name=None)
tf.raw_ops.ResourceScatterNdAdd(ref,indices,updates,use_locking=True,name=None)
tf.raw_ops.ResourceScatterNdMax(ref,indices,updates,use_locking=True,name=None)
tf.raw_ops.ResourceScatterNdMin(ref,indices,updates,use_locking=True,name=None)
tf.raw_ops.ResourceScatterNdSub(ref,indices,updates,use_locking=True,name=None)
tf.raw_ops.ResourceScatterNdUpdate(ref,indices,updates,use_locking=True,name=None)
tf.raw_ops.ResourceScatterSub(resource,indices,updates,name=None)
tf.raw_ops.ResourceScatterUpdate(resource,indices,updates,name=None)
tf.raw_ops.ResourceSparseApplyAdadelta(var,accum,accum_update,lr,rho,epsilon,grad,indices,use_locking=False,name=None)
tf.raw_ops.ResourceSparseApplyAdagrad(var,accum,lr,grad,indices,use_locking=False,update_slots=True,name=None)
tf.raw_ops.ResourceSparseApplyAdagradDA(var,gradient_accumulator,gradient_squared_accumulator,grad,indices,lr,l1,l2,global_step,use_locking=False,name=None)
tf.raw_ops.ResourceSparseApplyAdagradV2(var,accum,lr,epsilon,grad,indices,use_locking=False,update_slots=True,name=None)
tf.raw_ops.ResourceSparseApplyCenteredRMSProp(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=False,name=None)
tf.raw_ops.ResourceSparseApplyFtrl(var,accum,linear,grad,indices,lr,l1,l2,lr_power,use_locking=False,multiply_linear_by_lr=False,name=None)
tf.raw_ops.ResourceSparseApplyFtrlV2(var,accum,linear,grad,indices,lr,l1,l2,l2_shrinkage,lr_power,use_locking=False,multiply_linear_by_lr=False,name=None)
tf.raw_ops.ResourceSparseApplyKerasMomentum(var,accum,lr,grad,indices,momentum,use_locking=False,use_nesterov=False,name=None)
tf.raw_ops.ResourceSparseApplyMomentum(var,accum,lr,grad,indices,momentum,use_locking=False,use_nesterov=False,name=None)
tf.raw_ops.ResourceSparseApplyProximalAdagrad(var,accum,lr,l1,l2,grad,indices,use_locking=False,name=None)
tf.raw_ops.ResourceSparseApplyProximalGradientDescent(var,alpha,l1,l2,grad,indices,use_locking=False,name=None)
tf.raw_ops.ResourceSparseApplyRMSProp(var,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=False,name=None)
tf.raw_ops.ResourceStridedSliceAssign(ref,begin,end,strides,value,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,name=None)
tf.raw_ops.Restore(file_pattern,tensor_name,dt,preferred_shard=-1,name=None)
tf.raw_ops.RestoreSlice(file_pattern,tensor_name,shape_and_slice,dt,preferred_shard=-1,name=None)
tf.raw_ops.RestoreV2(prefix,tensor_names,shape_and_slices,dtypes,name=None)
tf.raw_ops.RetrieveTPUEmbeddingADAMParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingAdadeltaParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingAdagradMomentumParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingAdagradParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingCenteredRMSPropParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingFTRLParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingFrequencyEstimatorParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingMDLAdagradLightParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingMomentumParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingProximalAdagradParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingProximalYogiParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingRMSPropParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.RetrieveTPUEmbeddingStochasticGradientDescentParameters(num_shards,shard_id,table_id=-1,table_name='',config='',name=None)
tf.raw_ops.Reverse(tensor,dims,name=None)
tf.raw_ops.ReverseSequence(input,seq_lengths,seq_dim,batch_dim=0,name=None)
tf.raw_ops.ReverseV2(tensor,axis,name=None)
tf.raw_ops.RightShift(x,y,name=None)
tf.raw_ops.Rint(x,name=None)
tf.raw_ops.RngReadAndSkip(resource,alg,delta,name=None)
tf.raw_ops.RngSkip(resource,algorithm,delta,name=None)
tf.raw_ops.Roll(input,shift,axis,name=None)
tf.raw_ops.Round(x,name=None)
tf.raw_ops.Rsqrt(x,name=None)
tf.raw_ops.RsqrtGrad(y,dy,name=None)
tf.raw_ops.SampleDistortedBoundingBox(image_size,bounding_boxes,seed=0,seed2=0,min_object_covered=0.1,aspect_ratio_range=[0.75,1.33],area_range=[0.05,1],max_attempts=100,use_image_if_no_bounding_boxes=False,name=None)
tf.raw_ops.SampleDistortedBoundingBoxV2(image_size,bounding_boxes,min_object_covered,seed=0,seed2=0,aspect_ratio_range=[0.75,1.33],area_range=[0.05,1],max_attempts=100,use_image_if_no_bounding_boxes=False,name=None)
tf.raw_ops.SamplingDataset(input_dataset,rate,seed,seed2,output_types,output_shapes,name=None)
tf.raw_ops.Save(filename,tensor_names,data,name=None)
tf.raw_ops.SaveDataset(input_dataset,path,shard_func_other_args,shard_func,compression='',use_shard_func=True,name=None)
tf.raw_ops.SaveDatasetV2(input_dataset,path,shard_func_other_args,shard_func,output_types,output_shapes,compression='',use_shard_func=True,name=None)
tf.raw_ops.SaveSlices(filename,tensor_names,shapes_and_slices,data,name=None)
tf.raw_ops.SaveV2(prefix,tensor_names,shape_and_slices,tensors,name=None)
tf.raw_ops.ScalarSummary(tags,values,name=None)
tf.raw_ops.ScaleAndTranslate(images,size,scale,translation,kernel_type='lanczos3',antialias=True,name=None)
tf.raw_ops.ScaleAndTranslateGrad(grads,original_image,scale,translation,kernel_type='lanczos3',antialias=True,name=None)
tf.raw_ops.ScanDataset(input_dataset,initial_state,other_arguments,f,output_types,output_shapes,preserve_cardinality=False,use_default_device=True,metadata='',name=None)
tf.raw_ops.ScatterAdd(ref,indices,updates,use_locking=False,name=None)
tf.raw_ops.ScatterDiv(ref,indices,updates,use_locking=False,name=None)
tf.raw_ops.ScatterMax(ref,indices,updates,use_locking=False,name=None)
tf.raw_ops.ScatterMin(ref,indices,updates,use_locking=False,name=None)
tf.raw_ops.ScatterMul(ref,indices,updates,use_locking=False,name=None)
tf.raw_ops.ScatterNd(indices,updates,shape,name=None)
tf.raw_ops.ScatterNdAdd(ref,indices,updates,use_locking=False,name=None)
tf.raw_ops.ScatterNdMax(ref,indices,updates,use_locking=False,name=None)
tf.raw_ops.ScatterNdMin(ref,indices,updates,use_locking=False,name=None)
tf.raw_ops.ScatterNdNonAliasingAdd(input,indices,updates,name=None)
tf.raw_ops.ScatterNdSub(ref,indices,updates,use_locking=False,name=None)
tf.raw_ops.ScatterNdUpdate(ref,indices,updates,use_locking=True,name=None)
tf.raw_ops.ScatterSub(ref,indices,updates,use_locking=False,name=None)
tf.raw_ops.ScatterUpdate(ref,indices,updates,use_locking=True,name=None)
tf.raw_ops.SdcaFprint(input,name=None)
tf.raw_ops.SdcaOptimizer(sparse_example_indices,sparse_feature_indices,sparse_feature_values,dense_features,example_weights,example_labels,sparse_indices,sparse_weights,dense_weights,example_state_data,loss_type,l1,l2,num_loss_partitions,num_inner_iterations,adaptative=True,name=None)
tf.raw_ops.SdcaOptimizerV2(sparse_example_indices,sparse_feature_indices,sparse_feature_values,dense_features,example_weights,example_labels,sparse_indices,sparse_weights,dense_weights,example_state_data,loss_type,l1,l2,num_loss_partitions,num_inner_iterations,adaptive=True,name=None)
tf.raw_ops.SdcaShrinkL1(weights,l1,l2,name=None)
tf.raw_ops.SegmentMax(data,segment_ids,name=None)
tf.raw_ops.SegmentMean(data,segment_ids,name=None)
tf.raw_ops.SegmentMin(data,segment_ids,name=None)
tf.raw_ops.SegmentProd(data,segment_ids,name=None)
tf.raw_ops.SegmentSum(data,segment_ids,name=None)
tf.raw_ops.Select(condition,x,y,name=None)
tf.raw_ops.SelectV2(condition,t,e,name=None)
tf.raw_ops.SelfAdjointEig(input,name=None)
tf.raw_ops.SelfAdjointEigV2(input,compute_v=True,name=None)
tf.raw_ops.Selu(features,name=None)
tf.raw_ops.SeluGrad(gradients,outputs,name=None)
tf.raw_ops.Send(tensor,tensor_name,send_device,send_device_incarnation,recv_device,client_terminated=False,name=None)
tf.raw_ops.SendTPUEmbeddingGradients(inputs,learning_rates,config,name=None)
tf.raw_ops.SerializeIterator(resource_handle,external_state_policy=0,name=None)
tf.raw_ops.SerializeManySparse(sparse_indices,sparse_values,sparse_shape,out_type=tf.dtypes.string,name=None)
tf.raw_ops.SerializeSparse(sparse_indices,sparse_values,sparse_shape,out_type=tf.dtypes.string,name=None)
tf.raw_ops.SerializeTensor(tensor,name=None)
tf.raw_ops.SetSize(set_indices,set_values,set_shape,validate_indices=True,name=None)
tf.raw_ops.SetStatsAggregatorDataset(input_dataset,stats_aggregator,tag,counter_prefix,output_types,output_shapes,name=None)
tf.raw_ops.Shape(input,out_type=tf.dtypes.int32,name=None)
tf.raw_ops.ShapeN(input,out_type=tf.dtypes.int32,name=None)
tf.raw_ops.ShardDataset(input_dataset,num_shards,index,output_types,output_shapes,require_non_empty=False,metadata='',name=None)
tf.raw_ops.ShardedFilename(basename,shard,num_shards,name=None)
tf.raw_ops.ShardedFilespec(basename,num_shards,name=None)
tf.raw_ops.ShuffleAndRepeatDataset(input_dataset,buffer_size,seed,seed2,count,output_types,output_shapes,reshuffle_each_iteration=True,metadata='',name=None)
tf.raw_ops.ShuffleAndRepeatDatasetV2(input_dataset,buffer_size,seed,seed2,count,seed_generator,output_types,output_shapes,reshuffle_each_iteration=True,metadata='',name=None)
tf.raw_ops.ShuffleDataset(input_dataset,buffer_size,seed,seed2,output_types,output_shapes,reshuffle_each_iteration=True,metadata='',name=None)
tf.raw_ops.ShuffleDatasetV2(input_dataset,buffer_size,seed_generator,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.ShuffleDatasetV3(input_dataset,buffer_size,seed,seed2,seed_generator,output_types,output_shapes,reshuffle_each_iteration=True,metadata='',name=None)
tf.raw_ops.ShutdownDistributedTPU(name=None)
tf.raw_ops.Sigmoid(x,name=None)
tf.raw_ops.SigmoidGrad(y,dy,name=None)
tf.raw_ops.Sign(x,name=None)
tf.raw_ops.Sin(x,name=None)
tf.raw_ops.Sinh(x,name=None)
tf.raw_ops.Size(input,out_type=tf.dtypes.int32,name=None)
tf.raw_ops.SkipDataset(input_dataset,count,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.SleepDataset(input_dataset,sleep_microseconds,output_types,output_shapes,name=None)
tf.raw_ops.Slice(input,begin,size,name=None)
tf.raw_ops.SlidingWindowDataset(input_dataset,window_size,window_shift,window_stride,output_types,output_shapes,name=None)
tf.raw_ops.Snapshot(input,name=None)
tf.raw_ops.SnapshotDataset(input_dataset,path,output_types,output_shapes,compression='',reader_path_prefix='',writer_path_prefix='',shard_size_bytes=10737418240,pending_snapshot_expiry_seconds=86400,num_reader_threads=1,reader_buffer_size=1,num_writer_threads=1,writer_buffer_size=1,shuffle_on_read=False,seed=0,seed2=0,mode='auto',snapshot_name='',name=None)
tf.raw_ops.SnapshotDatasetReader(shard_dir,start_index,output_types,output_shapes,version,compression='',name=None)
tf.raw_ops.SnapshotDatasetV2(input_dataset,path,reader_func_other_args,shard_func_other_args,output_types,output_shapes,reader_func,shard_func,compression='',reader_prefix='',writer_prefix='',hash_valid=False,hash=0,metadata='',name=None)
tf.raw_ops.SnapshotNestedDatasetReader(inputs,output_types,output_shapes,name=None)
tf.raw_ops.SobolSample(dim,num_results,skip,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.Softmax(logits,name=None)
tf.raw_ops.SoftmaxCrossEntropyWithLogits(features,labels,name=None)
tf.raw_ops.Softplus(features,name=None)
tf.raw_ops.SoftplusGrad(gradients,features,name=None)
tf.raw_ops.Softsign(features,name=None)
tf.raw_ops.SoftsignGrad(gradients,features,name=None)
tf.raw_ops.SpaceToBatch(input,paddings,block_size,name=None)
tf.raw_ops.SpaceToBatchND(input,block_shape,paddings,name=None)
tf.raw_ops.SpaceToDepth(input,block_size,data_format='NHWC',name=None)
tf.raw_ops.SparseAccumulatorApplyGradient(handle,local_step,gradient_indices,gradient_values,gradient_shape,has_known_shape,name=None)
tf.raw_ops.SparseAccumulatorTakeGradient(handle,num_required,dtype,name=None)
tf.raw_ops.SparseAdd(a_indices,a_values,a_shape,b_indices,b_values,b_shape,thresh,name=None)
tf.raw_ops.SparseAddGrad(backprop_val_grad,a_indices,b_indices,sum_indices,name=None)
tf.raw_ops.SparseApplyAdadelta(var,accum,accum_update,lr,rho,epsilon,grad,indices,use_locking=False,name=None)
tf.raw_ops.SparseApplyAdagrad(var,accum,lr,grad,indices,use_locking=False,update_slots=True,name=None)
tf.raw_ops.SparseApplyAdagradDA(var,gradient_accumulator,gradient_squared_accumulator,grad,indices,lr,l1,l2,global_step,use_locking=False,name=None)
tf.raw_ops.SparseApplyAdagradV2(var,accum,lr,epsilon,grad,indices,use_locking=False,update_slots=True,name=None)
tf.raw_ops.SparseApplyCenteredRMSProp(var,mg,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=False,name=None)
tf.raw_ops.SparseApplyFtrl(var,accum,linear,grad,indices,lr,l1,l2,lr_power,use_locking=False,multiply_linear_by_lr=False,name=None)
tf.raw_ops.SparseApplyFtrlV2(var,accum,linear,grad,indices,lr,l1,l2,l2_shrinkage,lr_power,use_locking=False,multiply_linear_by_lr=False,name=None)
tf.raw_ops.SparseApplyMomentum(var,accum,lr,grad,indices,momentum,use_locking=False,use_nesterov=False,name=None)
tf.raw_ops.SparseApplyProximalAdagrad(var,accum,lr,l1,l2,grad,indices,use_locking=False,name=None)
tf.raw_ops.SparseApplyProximalGradientDescent(var,alpha,l1,l2,grad,indices,use_locking=False,name=None)
tf.raw_ops.SparseApplyRMSProp(var,ms,mom,lr,rho,momentum,epsilon,grad,indices,use_locking=False,name=None)
tf.raw_ops.SparseBincount(indices,values,dense_shape,size,weights,binary_output=False,name=None)
tf.raw_ops.SparseConcat(indices,values,shapes,concat_dim,name=None)
tf.raw_ops.SparseConditionalAccumulator(dtype,shape,container='',shared_name='',reduction_type='MEAN',name=None)
tf.raw_ops.SparseCountSparseOutput(indices,values,dense_shape,weights,binary_output,minlength=-1,maxlength=-1,name=None)
tf.raw_ops.SparseCross(indices,values,shapes,dense_inputs,hashed_output,num_buckets,hash_key,out_type,internal_type,name=None)
tf.raw_ops.SparseCrossHashed(indices,values,shapes,dense_inputs,num_buckets,strong_hash,salt,name=None)
tf.raw_ops.SparseCrossV2(indices,values,shapes,dense_inputs,sep,name=None)
tf.raw_ops.SparseDenseCwiseAdd(sp_indices,sp_values,sp_shape,dense,name=None)
tf.raw_ops.SparseDenseCwiseDiv(sp_indices,sp_values,sp_shape,dense,name=None)
tf.raw_ops.SparseDenseCwiseMul(sp_indices,sp_values,sp_shape,dense,name=None)
tf.raw_ops.SparseFillEmptyRows(indices,values,dense_shape,default_value,name=None)
tf.raw_ops.SparseFillEmptyRowsGrad(reverse_index_map,grad_values,name=None)
tf.raw_ops.SparseMatMul(a,b,transpose_a=False,transpose_b=False,a_is_sparse=False,b_is_sparse=False,name=None)
tf.raw_ops.SparseMatrixAdd(a,b,alpha,beta,name=None)
tf.raw_ops.SparseMatrixMatMul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,transpose_output=False,conjugate_output=False,name=None)
tf.raw_ops.SparseMatrixMul(a,b,name=None)
tf.raw_ops.SparseMatrixNNZ(sparse_matrix,name=None)
tf.raw_ops.SparseMatrixOrderingAMD(input,name=None)
tf.raw_ops.SparseMatrixSoftmax(logits,type,name=None)
tf.raw_ops.SparseMatrixSoftmaxGrad(softmax,grad_softmax,type,name=None)
tf.raw_ops.SparseMatrixSparseCholesky(input,permutation,type,name=None)
tf.raw_ops.SparseMatrixSparseMatMul(a,b,type,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,name=None)
tf.raw_ops.SparseMatrixTranspose(input,type,conjugate=False,name=None)
tf.raw_ops.SparseMatrixZeros(dense_shape,type,name=None)
tf.raw_ops.SparseReduceMax(input_indices,input_values,input_shape,reduction_axes,keep_dims=False,name=None)
tf.raw_ops.SparseReduceMaxSparse(input_indices,input_values,input_shape,reduction_axes,keep_dims=False,name=None)
tf.raw_ops.SparseReduceSum(input_indices,input_values,input_shape,reduction_axes,keep_dims=False,name=None)
tf.raw_ops.SparseReduceSumSparse(input_indices,input_values,input_shape,reduction_axes,keep_dims=False,name=None)
tf.raw_ops.SparseReorder(input_indices,input_values,input_shape,name=None)
tf.raw_ops.SparseReshape(input_indices,input_shape,new_shape,name=None)
tf.raw_ops.SparseSegmentMean(data,indices,segment_ids,name=None)
tf.raw_ops.SparseSegmentMeanGrad(grad,indices,segment_ids,output_dim0,name=None)
tf.raw_ops.SparseSegmentMeanWithNumSegments(data,indices,segment_ids,num_segments,name=None)
tf.raw_ops.SparseSegmentSqrtN(data,indices,segment_ids,name=None)
tf.raw_ops.SparseSegmentSqrtNGrad(grad,indices,segment_ids,output_dim0,name=None)
tf.raw_ops.SparseSegmentSqrtNWithNumSegments(data,indices,segment_ids,num_segments,name=None)
tf.raw_ops.SparseSegmentSum(data,indices,segment_ids,name=None)
tf.raw_ops.SparseSegmentSumGrad(grad,indices,segment_ids,output_dim0,name=None)
tf.raw_ops.SparseSegmentSumWithNumSegments(data,indices,segment_ids,num_segments,name=None)
tf.raw_ops.SparseSlice(indices,values,shape,start,size,name=None)
tf.raw_ops.SparseSliceGrad(backprop_val_grad,input_indices,input_start,output_indices,name=None)
tf.raw_ops.SparseSoftmax(sp_indices,sp_values,sp_shape,name=None)
tf.raw_ops.SparseSoftmaxCrossEntropyWithLogits(features,labels,name=None)
tf.raw_ops.SparseSparseMaximum(a_indices,a_values,a_shape,b_indices,b_values,b_shape,name=None)
tf.raw_ops.SparseSparseMinimum(a_indices,a_values,a_shape,b_indices,b_values,b_shape,name=None)
tf.raw_ops.SparseSplit(split_dim,indices,values,shape,num_split,name=None)
tf.raw_ops.SparseTensorDenseAdd(a_indices,a_values,a_shape,b,name=None)
tf.raw_ops.SparseTensorDenseMatMul(a_indices,a_values,a_shape,b,adjoint_a=False,adjoint_b=False,name=None)
tf.raw_ops.SparseTensorSliceDataset(indices,values,dense_shape,name=None)
tf.raw_ops.SparseTensorToCSRSparseMatrix(indices,values,dense_shape,name=None)
tf.raw_ops.SparseToDense(sparse_indices,output_shape,sparse_values,default_value,validate_indices=True,name=None)
tf.raw_ops.SparseToSparseSetOperation(set1_indices,set1_values,set1_shape,set2_indices,set2_values,set2_shape,set_operation,validate_indices=True,name=None)
tf.raw_ops.Spence(x,name=None)
tf.raw_ops.Split(axis,value,num_split,name=None)
tf.raw_ops.SplitV(value,size_splits,axis,num_split,name=None)
tf.raw_ops.SqlDataset(driver_name,data_source_name,query,output_types,output_shapes,name=None)
tf.raw_ops.Sqrt(x,name=None)
tf.raw_ops.SqrtGrad(y,dy,name=None)
tf.raw_ops.Square(x,name=None)
tf.raw_ops.SquaredDifference(x,y,name=None)
tf.raw_ops.Squeeze(input,axis=[],name=None)
tf.raw_ops.Stack(elem_type,stack_name='',name=None)
tf.raw_ops.StackClose(handle,name=None)
tf.raw_ops.StackCloseV2(handle,name=None)
tf.raw_ops.StackPop(handle,elem_type,name=None)
tf.raw_ops.StackPopV2(handle,elem_type,name=None)
tf.raw_ops.StackPush(handle,elem,swap_memory=False,name=None)
tf.raw_ops.StackPushV2(handle,elem,swap_memory=False,name=None)
tf.raw_ops.StackV2(max_size,elem_type,stack_name='',name=None)
tf.raw_ops.Stage(values,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.StageClear(dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.StagePeek(index,dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.StageSize(dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.StatefulPartitionedCall(args,Tout,f,config='',config_proto='',executor_type='',name=None)
tf.raw_ops.StatefulRandomBinomial(resource,algorithm,shape,counts,probs,dtype=tf.dtypes.int64,name=None)
tf.raw_ops.StatefulStandardNormal(resource,shape,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.StatefulStandardNormalV2(resource,algorithm,shape,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.StatefulTruncatedNormal(resource,algorithm,shape,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.StatefulUniform(resource,algorithm,shape,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.StatefulUniformFullInt(resource,algorithm,shape,dtype=tf.dtypes.uint64,name=None)
tf.raw_ops.StatefulUniformInt(resource,algorithm,shape,minval,maxval,name=None)
tf.raw_ops.StatelessCase(branch_index,input,Tout,branches,output_shapes=[],name=None)
tf.raw_ops.StatelessIf(cond,input,Tout,then_branch,else_branch,output_shapes=[],name=None)
tf.raw_ops.StatelessMultinomial(logits,num_samples,seed,output_dtype=tf.dtypes.int64,name=None)
tf.raw_ops.StatelessParameterizedTruncatedNormal(shape,seed,means,stddevs,minvals,maxvals,name=None)
tf.raw_ops.StatelessRandomBinomial(shape,seed,counts,probs,dtype=tf.dtypes.int64,name=None)
tf.raw_ops.StatelessRandomGammaV2(shape,seed,alpha,name=None)
tf.raw_ops.StatelessRandomGetAlg(name=None)
tf.raw_ops.StatelessRandomGetKeyCounter(seed,name=None)
tf.raw_ops.StatelessRandomGetKeyCounterAlg(seed,name=None)
tf.raw_ops.StatelessRandomNormal(shape,seed,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.StatelessRandomNormalV2(shape,key,counter,alg,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.StatelessRandomPoisson(shape,seed,lam,dtype,name=None)
tf.raw_ops.StatelessRandomUniform(shape,seed,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.StatelessRandomUniformFullInt(shape,seed,dtype=tf.dtypes.uint64,name=None)
tf.raw_ops.StatelessRandomUniformFullIntV2(shape,key,counter,alg,dtype=tf.dtypes.uint64,name=None)
tf.raw_ops.StatelessRandomUniformInt(shape,seed,minval,maxval,name=None)
tf.raw_ops.StatelessRandomUniformIntV2(shape,key,counter,alg,minval,maxval,name=None)
tf.raw_ops.StatelessRandomUniformV2(shape,key,counter,alg,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.StatelessSampleDistortedBoundingBox(image_size,bounding_boxes,min_object_covered,seed,aspect_ratio_range=[0.75,1.33],area_range=[0.05,1],max_attempts=100,use_image_if_no_bounding_boxes=False,name=None)
tf.raw_ops.StatelessTruncatedNormal(shape,seed,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.StatelessTruncatedNormalV2(shape,key,counter,alg,dtype=tf.dtypes.float32,name=None)
tf.raw_ops.StatelessWhile(input,cond,body,output_shapes=[],parallel_iterations=10,name=None)
tf.raw_ops.StaticRegexFullMatch(input,pattern,name=None)
tf.raw_ops.StaticRegexReplace(input,pattern,rewrite,replace_global=True,name=None)
tf.raw_ops.StatsAggregatorHandle(container='',shared_name='',name=None)
tf.raw_ops.StatsAggregatorHandleV2(container='',shared_name='',name=None)
tf.raw_ops.StatsAggregatorSetSummaryWriter(stats_aggregator,summary,name=None)
tf.raw_ops.StatsAggregatorSummary(iterator,name=None)
tf.raw_ops.StopGradient(input,name=None)
tf.raw_ops.StridedSlice(input,begin,end,strides,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,name=None)
tf.raw_ops.StridedSliceAssign(ref,begin,end,strides,value,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,name=None)
tf.raw_ops.StridedSliceGrad(shape,begin,end,strides,dy,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,name=None)
tf.raw_ops.StringFormat(inputs,template='%s',placeholder='%s',summarize=3,name=None)
tf.raw_ops.StringJoin(inputs,separator='',name=None)
tf.raw_ops.StringLength(input,unit='BYTE',name=None)
tf.raw_ops.StringLower(input,encoding='',name=None)
tf.raw_ops.StringNGrams(data,data_splits,separator,ngram_widths,left_pad,right_pad,pad_width,preserve_short_sequences,name=None)
tf.raw_ops.StringSplit(input,delimiter,skip_empty=True,name=None)
tf.raw_ops.StringSplitV2(input,sep,maxsplit=-1,name=None)
tf.raw_ops.StringStrip(input,name=None)
tf.raw_ops.StringToHashBucket(string_tensor,num_buckets,name=None)
tf.raw_ops.StringToHashBucketFast(input,num_buckets,name=None)
tf.raw_ops.StringToHashBucketStrong(input,num_buckets,key,name=None)
tf.raw_ops.StringToNumber(string_tensor,out_type=tf.dtypes.float32,name=None)
tf.raw_ops.StringUpper(input,encoding='',name=None)
tf.raw_ops.Sub(x,y,name=None)
tf.raw_ops.Substr(input,pos,len,unit='BYTE',name=None)
tf.raw_ops.Sum(input,axis,keep_dims=False,name=None)
tf.raw_ops.SummaryWriter(shared_name='',container='',name=None)
tf.raw_ops.Svd(input,compute_uv=True,full_matrices=False,name=None)
tf.raw_ops.Switch(data,pred,name=None)
tf.raw_ops.SymbolicGradient(input,Tout,f,name=None)
tf.raw_ops.TFRecordDataset(filenames,compression_type,buffer_size,metadata='',name=None)
tf.raw_ops.TFRecordReader(container='',shared_name='',compression_type='',name=None)
tf.raw_ops.TFRecordReaderV2(container='',shared_name='',compression_type='',name=None)
tf.raw_ops.TPUCompilationResult(name=None)
tf.raw_ops.TPUEmbeddingActivations(embedding_variable,sliced_activations,table_id,lookup_id,name=None)
tf.raw_ops.TPUOrdinalSelector(name=None)
tf.raw_ops.TPUPartitionedCall(args,device_ordinal,Tout,f,autotuner_thresh=0,name=None)
tf.raw_ops.TPUReplicateMetadata(num_replicas,num_cores_per_replica=1,topology='',use_tpu=True,device_assignment=[],computation_shape=[],host_compute_core=[],padding_map=[],step_marker_location='STEP_MARK_AT_ENTRY',allow_soft_placement=False,use_spmd_for_xla_partitioning=False,name=None)
tf.raw_ops.TPUReplicatedInput(inputs,is_mirrored_variable=False,index=-1,is_packed=False,name=None)
tf.raw_ops.TPUReplicatedOutput(input,num_replicas,name=None)
tf.raw_ops.TakeDataset(input_dataset,count,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.TakeManySparseFromTensorsMap(sparse_handles,dtype,container='',shared_name='',name=None)
tf.raw_ops.TakeWhileDataset(input_dataset,other_arguments,predicate,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.Tan(x,name=None)
tf.raw_ops.Tanh(x,name=None)
tf.raw_ops.TanhGrad(y,dy,name=None)
tf.raw_ops.TemporaryVariable(shape,dtype,var_name='',name=None)
tf.raw_ops.TensorArray(size,dtype,dynamic_size=False,clear_after_read=True,tensor_array_name='',element_shape=None,name=None)
tf.raw_ops.TensorArrayClose(handle,name=None)
tf.raw_ops.TensorArrayCloseV2(handle,name=None)
tf.raw_ops.TensorArrayCloseV3(handle,name=None)
tf.raw_ops.TensorArrayConcat(handle,flow_in,dtype,element_shape_except0=None,name=None)
tf.raw_ops.TensorArrayConcatV2(handle,flow_in,dtype,element_shape_except0=None,name=None)
tf.raw_ops.TensorArrayConcatV3(handle,flow_in,dtype,element_shape_except0=None,name=None)
tf.raw_ops.TensorArrayGather(handle,indices,flow_in,dtype,element_shape=None,name=None)
tf.raw_ops.TensorArrayGatherV2(handle,indices,flow_in,dtype,element_shape=None,name=None)
tf.raw_ops.TensorArrayGatherV3(handle,indices,flow_in,dtype,element_shape=None,name=None)
tf.raw_ops.TensorArrayGrad(handle,flow_in,source,name=None)
tf.raw_ops.TensorArrayGradV2(handle,flow_in,source,name=None)
tf.raw_ops.TensorArrayGradV3(handle,flow_in,source,name=None)
tf.raw_ops.TensorArrayGradWithShape(handle,flow_in,shape_to_prepend,source,name=None)
tf.raw_ops.TensorArrayPack(handle,flow_in,dtype,element_shape=None,name=None)
tf.raw_ops.TensorArrayRead(handle,index,flow_in,dtype,name=None)
tf.raw_ops.TensorArrayReadV2(handle,index,flow_in,dtype,name=None)
tf.raw_ops.TensorArrayReadV3(handle,index,flow_in,dtype,name=None)
tf.raw_ops.TensorArrayScatter(handle,indices,value,flow_in,name=None)
tf.raw_ops.TensorArrayScatterV2(handle,indices,value,flow_in,name=None)
tf.raw_ops.TensorArrayScatterV3(handle,indices,value,flow_in,name=None)
tf.raw_ops.TensorArraySize(handle,flow_in,name=None)
tf.raw_ops.TensorArraySizeV2(handle,flow_in,name=None)
tf.raw_ops.TensorArraySizeV3(handle,flow_in,name=None)
tf.raw_ops.TensorArraySplit(handle,value,lengths,flow_in,name=None)
tf.raw_ops.TensorArraySplitV2(handle,value,lengths,flow_in,name=None)
tf.raw_ops.TensorArraySplitV3(handle,value,lengths,flow_in,name=None)
tf.raw_ops.TensorArrayUnpack(handle,value,flow_in,name=None)
tf.raw_ops.TensorArrayV2(size,dtype,element_shape=None,dynamic_size=False,clear_after_read=True,tensor_array_name='',name=None)
tf.raw_ops.TensorArrayV3(size,dtype,element_shape=None,dynamic_size=False,clear_after_read=True,identical_element_shapes=False,tensor_array_name='',name=None)
tf.raw_ops.TensorArrayWrite(handle,index,value,flow_in,name=None)
tf.raw_ops.TensorArrayWriteV2(handle,index,value,flow_in,name=None)
tf.raw_ops.TensorArrayWriteV3(handle,index,value,flow_in,name=None)
tf.raw_ops.TensorDataset(components,output_shapes,metadata='',name=None)
tf.raw_ops.TensorListConcat(input_handle,element_dtype,element_shape=None,name=None)
tf.raw_ops.TensorListConcatLists(input_a,input_b,element_dtype,name=None)
tf.raw_ops.TensorListConcatV2(input_handle,element_shape,leading_dims,element_dtype,name=None)
tf.raw_ops.TensorListElementShape(input_handle,shape_type,name=None)
tf.raw_ops.TensorListFromTensor(tensor,element_shape,name=None)
tf.raw_ops.TensorListGather(input_handle,indices,element_shape,element_dtype,name=None)
tf.raw_ops.TensorListGetItem(input_handle,index,element_shape,element_dtype,name=None)
tf.raw_ops.TensorListLength(input_handle,name=None)
tf.raw_ops.TensorListPopBack(input_handle,element_shape,element_dtype,name=None)
tf.raw_ops.TensorListPushBack(input_handle,tensor,name=None)
tf.raw_ops.TensorListPushBackBatch(input_handles,tensor,name=None)
tf.raw_ops.TensorListReserve(element_shape,num_elements,element_dtype,name=None)
tf.raw_ops.TensorListResize(input_handle,size,name=None)
tf.raw_ops.TensorListScatter(tensor,indices,element_shape,name=None)
tf.raw_ops.TensorListScatterIntoExistingList(input_handle,tensor,indices,name=None)
tf.raw_ops.TensorListScatterV2(tensor,indices,element_shape,num_elements,name=None)
tf.raw_ops.TensorListSetItem(input_handle,index,item,name=None)
tf.raw_ops.TensorListSplit(tensor,element_shape,lengths,name=None)
tf.raw_ops.TensorListStack(input_handle,element_shape,element_dtype,num_elements=-1,name=None)
tf.raw_ops.TensorScatterAdd(tensor,indices,updates,name=None)
tf.raw_ops.TensorScatterMax(tensor,indices,updates,name=None)
tf.raw_ops.TensorScatterMin(tensor,indices,updates,name=None)
tf.raw_ops.TensorScatterSub(tensor,indices,updates,name=None)
tf.raw_ops.TensorScatterUpdate(tensor,indices,updates,name=None)
tf.raw_ops.TensorSliceDataset(components,output_shapes,is_files=False,metadata='',name=None)
tf.raw_ops.TensorStridedSliceUpdate(input,begin,end,strides,value,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,name=None)
tf.raw_ops.TensorSummary(tensor,description='',labels=[],display_name='',name=None)
tf.raw_ops.TensorSummaryV2(tag,tensor,serialized_summary_metadata,name=None)
tf.raw_ops.TextLineDataset(filenames,compression_type,buffer_size,metadata='',name=None)
tf.raw_ops.TextLineReader(skip_header_lines=0,container='',shared_name='',name=None)
tf.raw_ops.TextLineReaderV2(skip_header_lines=0,container='',shared_name='',name=None)
tf.raw_ops.ThreadPoolDataset(input_dataset,thread_pool,output_types,output_shapes,name=None)
tf.raw_ops.ThreadPoolHandle(num_threads,display_name,max_intra_op_parallelism=1,container='',shared_name='',name=None)
tf.raw_ops.ThreadUnsafeUnigramCandidateSampler(true_classes,num_true,num_sampled,unique,range_max,seed=0,seed2=0,name=None)
tf.raw_ops.Tile(input,multiples,name=None)
tf.raw_ops.TileGrad(input,multiples,name=None)
tf.raw_ops.Timestamp(name=None)
tf.raw_ops.ToBool(input,name=None)
tf.raw_ops.TopK(input,k,sorted=True,name=None)
tf.raw_ops.TopKV2(input,k,sorted=True,name=None)
tf.raw_ops.Transpose(x,perm,name=None)
tf.raw_ops.TridiagonalMatMul(superdiag,maindiag,subdiag,rhs,name=None)
tf.raw_ops.TridiagonalSolve(diagonals,rhs,partial_pivoting=True,perturb_singular=False,name=None)
tf.raw_ops.TruncateDiv(x,y,name=None)
tf.raw_ops.TruncateMod(x,y,name=None)
tf.raw_ops.TruncatedNormal(shape,dtype,seed=0,seed2=0,name=None)
tf.raw_ops.Unbatch(batched_tensor,batch_index,id,timeout_micros,container='',shared_name='',name=None)
tf.raw_ops.UnbatchDataset(input_dataset,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.UnbatchGrad(original_input,batch_index,grad,id,container='',shared_name='',name=None)
tf.raw_ops.UncompressElement(compressed,output_types,output_shapes,name=None)
tf.raw_ops.UnicodeDecode(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,Tsplits=tf.dtypes.int64,name=None)
tf.raw_ops.UnicodeDecodeWithOffsets(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,Tsplits=tf.dtypes.int64,name=None)
tf.raw_ops.UnicodeEncode(input_values,input_splits,output_encoding,errors='replace',replacement_char=65533,name=None)
tf.raw_ops.UnicodeScript(input,name=None)
tf.raw_ops.UnicodeTranscode(input,input_encoding,output_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)
tf.raw_ops.UniformCandidateSampler(true_classes,num_true,num_sampled,unique,range_max,seed=0,seed2=0,name=None)
tf.raw_ops.Unique(x,out_idx=tf.dtypes.int32,name=None)
tf.raw_ops.UniqueDataset(input_dataset,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.UniqueV2(x,axis,out_idx=tf.dtypes.int32,name=None)
tf.raw_ops.UniqueWithCounts(x,out_idx=tf.dtypes.int32,name=None)
tf.raw_ops.UniqueWithCountsV2(x,axis,out_idx=tf.dtypes.int32,name=None)
tf.raw_ops.Unpack(value,num,axis=0,name=None)
tf.raw_ops.UnravelIndex(indices,dims,name=None)
tf.raw_ops.UnsortedSegmentJoin(inputs,segment_ids,num_segments,separator='',name=None)
tf.raw_ops.UnsortedSegmentMax(data,segment_ids,num_segments,name=None)
tf.raw_ops.UnsortedSegmentMin(data,segment_ids,num_segments,name=None)
tf.raw_ops.UnsortedSegmentProd(data,segment_ids,num_segments,name=None)
tf.raw_ops.UnsortedSegmentSum(data,segment_ids,num_segments,name=None)
tf.raw_ops.Unstage(dtypes,capacity=0,memory_limit=0,container='',shared_name='',name=None)
tf.raw_ops.UnwrapDatasetVariant(input_handle,name=None)
tf.raw_ops.UpperBound(sorted_inputs,values,out_type=tf.dtypes.int32,name=None)
tf.raw_ops.VarHandleOp(dtype,shape,container='',shared_name='',allowed_devices=[],name=None)
tf.raw_ops.VarIsInitializedOp(resource,name=None)
tf.raw_ops.Variable(shape,dtype,container='',shared_name='',name=None)
tf.raw_ops.VariableShape(input,out_type=tf.dtypes.int32,name=None)
tf.raw_ops.VariableV2(shape,dtype,container='',shared_name='',name=None)
tf.raw_ops.Where(condition,name=None)
tf.raw_ops.While(input,cond,body,output_shapes=[],parallel_iterations=10,name=None)
tf.raw_ops.WholeFileReader(container='',shared_name='',name=None)
tf.raw_ops.WholeFileReaderV2(container='',shared_name='',name=None)
tf.raw_ops.WindowDataset(input_dataset,size,shift,stride,drop_remainder,output_types,output_shapes,metadata='',name=None)
tf.raw_ops.WindowOp(inputs,output_types,output_shapes,name=None)
tf.raw_ops.WorkerHeartbeat(request,name=None)
tf.raw_ops.WrapDatasetVariant(input_handle,name=None)
tf.raw_ops.WriteAudioSummary(writer,step,tag,tensor,sample_rate,max_outputs=3,name=None)
tf.raw_ops.WriteFile(filename,contents,name=None)
tf.raw_ops.WriteGraphSummary(writer,step,tensor,name=None)
tf.raw_ops.WriteHistogramSummary(writer,step,tag,values,name=None)
tf.raw_ops.WriteImageSummary(writer,step,tag,tensor,bad_color,max_images=3,name=None)
tf.raw_ops.WriteRawProtoSummary(writer,step,tensor,name=None)
tf.raw_ops.WriteScalarSummary(writer,step,tag,value,name=None)
tf.raw_ops.WriteSummary(writer,step,tensor,tag,summary_metadata,name=None)
tf.raw_ops.Xdivy(x,y,name=None)
tf.raw_ops.XlaConcatND(inputs,num_concats,paddings=[],name=None)
tf.raw_ops.XlaSplitND(input,N,num_splits,paddings=[],name=None)
tf.raw_ops.Xlog1py(x,y,name=None)
tf.raw_ops.Xlogy(x,y,name=None)
tf.raw_ops.ZerosLike(x,name=None)
tf.raw_ops.Zeta(x,q,name=None)
tf.raw_ops.ZipDataset(input_datasets,output_types,output_shapes,metadata='',name=None)
tf.realdiv(x,y,name=None)
tf.recompute_grad(f)
tf.reduce_all(input_tensor,axis=None,keepdims=False,name=None)
tf.reduce_any(input_tensor,axis=None,keepdims=False,name=None)
tf.reduce_logsumexp(input_tensor,axis=None,keepdims=False,name=None)
tf.reduce_max(input_tensor,axis=None,keepdims=False,name=None)
tf.reduce_mean(input_tensor,axis=None,keepdims=False,name=None)
tf.reduce_min(input_tensor,axis=None,keepdims=False,name=None)
tf.reduce_prod(input_tensor,axis=None,keepdims=False,name=None)
tf.reduce_sum(input_tensor,axis=None,keepdims=False,name=None)
tf.register_tensor_conversion_function(base_type,conversion_func,priority=100)
tf.repeat(input,repeats,axis=None,name=None)
tf.required_space_to_batch_paddings(input_shape,block_shape,base_paddings=None,name=None)
tf.reshape(tensor,shape,name=None)
tf.reverse(tensor,axis,name=None)
tf.reverse_sequence(input,seq_lengths,seq_axis=None,batch_axis=None,name=None)
tf.roll(input,shift,axis,name=None)
tf.round(x,name=None)
tf.saturate_cast(value,dtype,name=None)
tf.saved_model.Asset(path)
tf.saved_model.LoadOptions(allow_partial_checkpoint=False,experimental_io_device=None,experimental_skip_checkpoint=False)
tf.saved_model.SaveOptions(namespace_whitelist=None,save_debug_info=False,function_aliases=None,experimental_io_device=None,experimental_variable_policy=None,experimental_custom_gradients=True)
tf.saved_model.contains_saved_model(export_dir)
tf.saved_model.experimental.TrackableResource(device='')
tf.saved_model.load(export_dir,tags=None,options=None)
tf.saved_model.save(obj,export_dir,signatures=None,options=None)
tf.scalar_mul(scalar,x,name=None)
tf.scan(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,infer_shape=True,reverse=False,name=None)
tf.scatter_nd(indices,updates,shape,name=None)
tf.searchsorted(sorted_sequence,values,side='left',out_type=tf.dtypes.int32,name=None)
tf.sequence_mask(lengths,maxlen=None,dtype=tf.dtypes.bool,name=None)
tf.sets.difference(a,b,aminusb=True,validate_indices=True)
tf.sets.intersection(a,b,validate_indices=True)
tf.sets.size(a,validate_indices=True)
tf.sets.union(a,b,validate_indices=True)
tf.shape(input,out_type=tf.dtypes.int32,name=None)
tf.shape_n(input,out_type=tf.dtypes.int32,name=None)
tf.sigmoid(x,name=None)
tf.sign(x,name=None)
tf.signal.dct(input,type=2,n=None,axis=-1,norm=None,name=None)
tf.signal.fft(input,name=None)
tf.signal.fft2d(input,name=None)
tf.signal.fft3d(input,name=None)
tf.signal.fftshift(x,axes=None,name=None)
tf.signal.frame(signal,frame_length,frame_step,pad_end=False,pad_value=0,axis=-1,name=None)
tf.signal.hamming_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)
tf.signal.hann_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)
tf.signal.idct(input,type=2,n=None,axis=-1,norm=None,name=None)
tf.signal.ifft(input,name=None)
tf.signal.ifft2d(input,name=None)
tf.signal.ifft3d(input,name=None)
tf.signal.ifftshift(x,axes=None,name=None)
tf.signal.inverse_mdct(mdcts,window_fn=tf.signal.vorbis_window,norm=None,name=None)
tf.signal.irfft(input_tensor,fft_length=None,name=None)
tf.signal.irfft2d(input_tensor,fft_length=None,name=None)
tf.signal.irfft3d(input_tensor,fft_length=None,name=None)
tf.signal.kaiser_bessel_derived_window(window_length,beta=12.0,dtype=tf.dtypes.float32,name=None)
tf.signal.kaiser_window(window_length,beta=12.0,dtype=tf.dtypes.float32,name=None)
tf.signal.linear_to_mel_weight_matrix(num_mel_bins=20,num_spectrogram_bins=129,sample_rate=8000,lower_edge_hertz=125.0,upper_edge_hertz=3800.0,dtype=tf.dtypes.float32,name=None)
tf.signal.mdct(signals,frame_length,window_fn=tf.signal.vorbis_window,pad_end=False,norm=None,name=None)
tf.signal.mfccs_from_log_mel_spectrograms(log_mel_spectrograms,name=None)
tf.signal.overlap_and_add(signal,frame_step,name=None)
tf.signal.rfft(input_tensor,fft_length=None,name=None)
tf.signal.rfft2d(input_tensor,fft_length=None,name=None)
tf.signal.rfft3d(input_tensor,fft_length=None,name=None)
tf.signal.vorbis_window(window_length,dtype=tf.dtypes.float32,name=None)
tf.sin(x,name=None)
tf.sinh(x,name=None)
tf.size(input,out_type=tf.dtypes.int32,name=None)
tf.slice(input_,begin,size,name=None)
tf.sort(values,axis=-1,direction='ASCENDING',name=None)
tf.space_to_batch(input,block_shape,paddings,name=None)
tf.space_to_batch_nd(input,block_shape,paddings,name=None)
tf.sparse.SparseTensor(indices,values,dense_shape)
tf.sparse.add(a,b,threshold=0)
tf.sparse.bincount(values,weights=None,axis=0,minlength=None,maxlength=None,binary_output=False,name=None)
tf.sparse.concat(axis,sp_inputs,expand_nonconcat_dims=False,name=None)
tf.sparse.cross(inputs,name=None,separator=None)
tf.sparse.cross_hashed(inputs,num_buckets=0,hash_key=None,name=None)
tf.sparse.expand_dims(sp_input,axis=None,name=None)
tf.sparse.eye(num_rows,num_columns=None,dtype=tf.dtypes.float32,name=None)
tf.sparse.fill_empty_rows(sp_input,default_value,name=None)
tf.sparse.from_dense(tensor,name=None)
tf.sparse.map_values(op,*args,**kwargs)
tf.sparse.mask(a,mask_indices,name=None)
tf.sparse.maximum(sp_a,sp_b,name=None)
tf.sparse.minimum(sp_a,sp_b,name=None)
tf.sparse.reduce_max(sp_input,axis=None,keepdims=None,output_is_sparse=False,name=None)
tf.sparse.reduce_sum(sp_input,axis=None,keepdims=None,output_is_sparse=False,name=None)
tf.sparse.reorder(sp_input,name=None)
tf.sparse.reset_shape(sp_input,new_shape=None)
tf.sparse.reshape(sp_input,shape,name=None)
tf.sparse.retain(sp_input,to_retain)
tf.sparse.segment_mean(data,indices,segment_ids,num_segments=None,name=None)
tf.sparse.segment_sqrt_n(data,indices,segment_ids,num_segments=None,name=None)
tf.sparse.segment_sum(data,indices,segment_ids,num_segments=None,name=None)
tf.sparse.slice(sp_input,start,size,name=None)
tf.sparse.softmax(sp_input,name=None)
tf.sparse.sparse_dense_matmul(sp_a,b,adjoint_a=False,adjoint_b=False,name=None)
tf.sparse.split(sp_input=None,num_split=None,axis=None,name=None)
tf.sparse.to_dense(sp_input,default_value=None,validate_indices=True,name=None)
tf.sparse.to_indicator(sp_input,vocab_size,name=None)
tf.sparse.transpose(sp_input,perm=None,name=None)
tf.split(value,num_or_size_splits,axis=0,num=None,name='split')
tf.sqrt(x,name=None)
tf.square(x,name=None)
tf.squeeze(input,axis=None,name=None)
tf.stack(values,axis=0,name='stack')
tf.stop_gradient(input,name=None)
tf.strided_slice(input_,begin,end,strides=None,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,var=None,name=None)
tf.strings.as_string(input,precision=-1,scientific=False,shortest=False,width=-1,fill='',name=None)
tf.strings.bytes_split(input,name=None)
tf.strings.format(template,inputs,placeholder='{}',summarize=3,name=None)
tf.strings.join(inputs,separator='',name=None)
tf.strings.length(input,unit='BYTE',name=None)
tf.strings.lower(input,encoding='',name=None)
tf.strings.ngrams(data,ngram_width,separator='',pad_values=None,padding_width=None,preserve_short_sequences=False,name=None)
tf.strings.reduce_join(inputs,axis=None,keepdims=False,separator='',name=None)
tf.strings.regex_full_match(input,pattern,name=None)
tf.strings.regex_replace(input,pattern,rewrite,replace_global=True,name=None)
tf.strings.split(input,sep=None,maxsplit=-1,name=None)
tf.strings.strip(input,name=None)
tf.strings.substr(input,pos,len,unit='BYTE',name=None)
tf.strings.to_hash_bucket(input,num_buckets,name=None)
tf.strings.to_hash_bucket_fast(input,num_buckets,name=None)
tf.strings.to_hash_bucket_strong(input,num_buckets,key,name=None)
tf.strings.to_number(input,out_type=tf.dtypes.float32,name=None)
tf.strings.unicode_decode(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)
tf.strings.unicode_decode_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)
tf.strings.unicode_encode(input,output_encoding,errors='replace',replacement_char=65533,name=None)
tf.strings.unicode_script(input,name=None)
tf.strings.unicode_split(input,input_encoding,errors='replace',replacement_char=65533,name=None)
tf.strings.unicode_split_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,name=None)
tf.strings.unicode_transcode(input,input_encoding,output_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)
tf.strings.unsorted_segment_join(inputs,segment_ids,num_segments,separator='',name=None)
tf.strings.upper(input,encoding='',name=None)
tf.subtract(x,y,name=None)
tf.summary.audio(name,data,sample_rate,step=None,max_outputs=3,encoding=None,description=None)
tf.summary.create_file_writer(logdir,max_queue=None,flush_millis=None,filename_suffix=None,name=None,experimental_trackable=False)
tf.summary.create_noop_writer()
tf.summary.experimental.get_step()
tf.summary.experimental.set_step(step)
tf.summary.experimental.write_raw_pb(tensor,step=None,name=None)
tf.summary.flush(writer=None,name=None)
tf.summary.graph(graph_data)
tf.summary.histogram(name,data,step=None,buckets=None,description=None)
tf.summary.image(name,data,step=None,max_outputs=3,description=None)
tf.summary.scalar(name,data,step=None,description=None)
tf.summary.should_record_summaries()
tf.summary.text(name,data,step=None,description=None)
tf.summary.trace_export(name,step=None,profiler_outdir=None)
tf.summary.trace_off()
tf.summary.trace_on(graph=True,profiler=False)
tf.summary.write(tag,tensor,step=None,metadata=None,name=None)
tf.switch_case(branch_index,branch_fns,default=None,name='switch_case')
tf.sysconfig.get_build_info()
tf.sysconfig.get_compile_flags()
tf.sysconfig.get_include()
tf.sysconfig.get_lib()
tf.sysconfig.get_link_flags()
tf.tan(x,name=None)
tf.tanh(x,name=None)
tf.tensor_scatter_nd_add(tensor,indices,updates,name=None)
tf.tensor_scatter_nd_max(tensor,indices,updates,name=None)
tf.tensor_scatter_nd_min(tensor,indices,updates,name=None)
tf.tensor_scatter_nd_sub(tensor,indices,updates,name=None)
tf.tensor_scatter_nd_update(tensor,indices,updates,name=None)
tf.tensordot(a,b,axes,name=None)
tf.test.Benchmark()
tf.test.TestCase(methodName='runTest')
tf.test.TestCase.failureException(*args,**kwargs)
tf.test.assert_equal_graph_def(expected,actual)
tf.test.benchmark_config()
tf.test.compute_gradient(f,x,delta=None)
tf.test.create_local_cluster(num_workers,num_ps,protocol='grpc',worker_config=None,ps_config=None)
tf.test.disable_with_predicate(pred,skip_message)
tf.test.gpu_device_name()
tf.test.is_built_with_cuda()
tf.test.is_built_with_gpu_support()
tf.test.is_built_with_rocm()
tf.test.is_built_with_xla()
tf.test.is_gpu_available(cuda_only=False,min_cuda_compute_capability=None)
tf.test.main(argv=None)
tf.tile(input,multiples,name=None)
tf.timestamp(name=None)
tf.tpu.XLAOptions(use_spmd_for_xla_partitioning=True,enable_xla_dynamic_padder=True)
tf.tpu.experimental.DeviceAssignment(topology:tf.tpu.experimental.Topology,core_assignment:np.ndarray)tf.tpu.experimental.Topology
tf.tpu.experimental.TPUSystemMetadata(num_cores,num_hosts,num_of_cores_per_host,topology,devices)
tf.tpu.experimental.Topology(serialized=None,mesh_shape=None,device_coordinates=None)
tf.tpu.experimental.embedding.Adagrad(learning_rate:Union[float,Callable[[],float]]=0.001,initial_accumulator_value:float=0.1,use_gradient_accumulation:bool=True,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:bool=None,slot_variable_creation_fn:Optional[SlotVarCreationFnType]=None,clipvalue:Optional[ClipValueType]=None)
tf.tpu.experimental.embedding.Adam(learning_rate:Union[float,Callable[[],float]]=0.001,beta_1:float=0.9,beta_2:float=0.999,epsilon:float=1e-07,lazy_adam:bool=True,sum_inside_sqrt:bool=True,use_gradient_accumulation:bool=True,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:bool=None,slot_variable_creation_fn:Optional[SlotVarCreationFnType]=None,clipvalue:Optional[ClipValueType]=None)
tf.tpu.experimental.embedding.FTRL(learning_rate:Union[float,Callable[[],float]]=0.001,learning_rate_power:float=-0.5,l1_regularization_strength:float=0.0,l2_regularization_strength:float=0.0,beta:float=0.0,initial_accumulator_value:float=0.1,use_gradient_accumulation:bool=True,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:bool=None,slot_variable_creation_fn:Optional[SlotVarCreationFnType]=None,clipvalue:Optional[ClipValueType]=None,multiply_linear_by_learning_rate:bool=False,allow_zero_accumulator:bool=False)
tf.tpu.experimental.embedding.FeatureConfig(table:tf.tpu.experimental.embedding.TableConfig,max_sequence_length:int=0,validate_weights_and_indices:bool=True,name:Optional[Text]=None)tf.tpu.experimental.embedding.TableConfig
tf.tpu.experimental.embedding.SGD(learning_rate:Union[float,Callable[[],float]]=0.01,clip_weight_min:Optional[float]=None,clip_weight_max:Optional[float]=None,weight_decay_factor:Optional[float]=None,multiply_weight_decay_factor_by_learning_rate:bool=None,clipvalue:Optional[ClipValueType]=None)
tf.tpu.experimental.embedding.TPUEmbedding(feature_config:Union[tf.tpu.experimental.embedding.FeatureConfig,Iterable],optimizer:Optional[tpu_embedding_v2_utils._Optimizer],pipeline_execution_with_tensor_core:bool=False)tf.tpu.experimental.embedding.FeatureConfig
tf.tpu.experimental.embedding.TableConfig(vocabulary_size:int,dim:int,initializer:Optional[Callable[[Any],None]],optimizer:Optional[_Optimizer]=None,combiner:Text='mean',name:Optional[Text]=None)
tf.tpu.experimental.embedding.serving_embedding_lookup(inputs,weights,tables,feature_config)
tf.tpu.experimental.initialize_tpu_system(cluster_resolver=None)
tf.tpu.experimental.shutdown_tpu_system(cluster_resolver=None)
tf.train.Checkpoint(root=None,**kwargs)
tf.train.CheckpointManager(checkpoint,directory,max_to_keep,keep_checkpoint_every_n_hours=None,checkpoint_name='ckpt',step_counter=None,checkpoint_interval=None,init_fn=None)
tf.train.CheckpointOptions(experimental_io_device=None)
tf.train.ClusterSpec(cluster)
tf.train.Coordinator(clean_stop_exception_types=None)
tf.train.ExponentialMovingAverage(decay,num_updates=None,zero_debias=False,name='ExponentialMovingAverage')
tf.train.checkpoints_iterator(checkpoint_dir,min_interval_secs=0,timeout=None,timeout_fn=None)
tf.train.experimental.DynamicLossScale(initial_loss_scale=(2**15),increment_period=2000,multiplier=2.0)
tf.train.experimental.FixedLossScale(loss_scale_value)
tf.train.experimental.LossScale()
tf.train.get_checkpoint_state(checkpoint_dir,latest_filename=None)
tf.train.latest_checkpoint(checkpoint_dir,latest_filename=None)
tf.train.list_variables(ckpt_dir_or_file)
tf.train.load_checkpoint(ckpt_dir_or_file)
tf.train.load_variable(ckpt_dir_or_file,name)
tf.transpose(a,perm=None,conjugate=False,name='transpose')
tf.truediv(x,y,name=None)
tf.truncatediv(x,y,name=None)
tf.truncatemod(x,y,name=None)
tf.tuple(tensors,control_inputs=None,name=None)
tf.type_spec_from_value(value)->tf.TypeSpectf.TypeSpec
tf.unique(x,out_idx=tf.dtypes.int32,name=None)
tf.unique_with_counts(x,out_idx=tf.dtypes.int32,name=None)
tf.unravel_index(indices,dims,name=None)
tf.unstack(value,num=None,axis=0,name='unstack')
tf.vectorized_map(fn,elems,fallback_to_while_loop=True)
tf.where(condition,x=None,y=None,name=None)
tf.while_loop(cond,body,loop_vars,shape_invariants=None,parallel_iterations=10,back_prop=True,swap_memory=False,maximum_iterations=None,name=None)
tf.xla.experimental.compile(computation,inputs=None)
tf.zeros(shape,dtype=tf.dtypes.float32,name=None)
tf.zeros_like(input,dtype=None,name=None)